// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_CheatArtifactFullStack : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_CheatArtifactFullStack GetRootAsSA_CheatArtifactFullStack(ByteBuffer _bb) { return GetRootAsSA_CheatArtifactFullStack(_bb, new SA_CheatArtifactFullStack()); }
  public static SA_CheatArtifactFullStack GetRootAsSA_CheatArtifactFullStack(ByteBuffer _bb, SA_CheatArtifactFullStack obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_CheatArtifactFullStack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.ArtifactData? ChangeArtifactList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.ArtifactData?)(new Lobby.ArtifactData()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int ChangeArtifactListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_CheatArtifactFullStack> CreateSA_CheatArtifactFullStack(FlatBufferBuilder builder,
      VectorOffset ChangeArtifactListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_CheatArtifactFullStack.AddChangeArtifactList(builder, ChangeArtifactListOffset);
    return SA_CheatArtifactFullStack.EndSA_CheatArtifactFullStack(builder);
  }

  public static void StartSA_CheatArtifactFullStack(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddChangeArtifactList(FlatBufferBuilder builder, VectorOffset ChangeArtifactListOffset) { builder.AddOffset(0, ChangeArtifactListOffset.Value, 0); }
  public static void StartChangeArtifactListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static Offset<Lobby.SA_CheatArtifactFullStack> EndSA_CheatArtifactFullStack(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_CheatArtifactFullStack>(o);
  }
  public SA_CheatArtifactFullStackT UnPack() {
    var _o = new SA_CheatArtifactFullStackT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_CheatArtifactFullStackT _o) {
    _o.ChangeArtifactList = new List<Lobby.ArtifactDataT>();
    for (var _j = 0; _j < this.ChangeArtifactListLength; ++_j) {_o.ChangeArtifactList.Add(this.ChangeArtifactList(_j).HasValue ? this.ChangeArtifactList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_CheatArtifactFullStack> Pack(FlatBufferBuilder builder, SA_CheatArtifactFullStackT _o) {
    if (_o == null) return default(Offset<Lobby.SA_CheatArtifactFullStack>);
    var _ChangeArtifactList = default(VectorOffset);
    if (_o.ChangeArtifactList != null) {
      StartChangeArtifactListVector(builder, _o.ChangeArtifactList.Count);
      for (var _j = _o.ChangeArtifactList.Count - 1; _j >= 0; --_j) { Lobby.ArtifactData.Pack(builder, _o.ChangeArtifactList[_j]); }
      _ChangeArtifactList = builder.EndVector();
    }
    return CreateSA_CheatArtifactFullStack(
      builder,
      _ChangeArtifactList);
  }
}

public class SA_CheatArtifactFullStackT
{
  public List<Lobby.ArtifactDataT> ChangeArtifactList { get; set; }

  public SA_CheatArtifactFullStackT() {
    this.ChangeArtifactList = null;
  }
}


}
