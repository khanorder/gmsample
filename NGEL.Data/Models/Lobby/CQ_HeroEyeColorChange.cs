// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_HeroEyeColorChange : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_HeroEyeColorChange GetRootAsCQ_HeroEyeColorChange(ByteBuffer _bb) { return GetRootAsCQ_HeroEyeColorChange(_bb, new CQ_HeroEyeColorChange()); }
  public static CQ_HeroEyeColorChange GetRootAsCQ_HeroEyeColorChange(ByteBuffer _bb, CQ_HeroEyeColorChange obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_HeroEyeColorChange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int HeroID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool LeftEyeColorReset { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int LeftEyeDyeID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LeftEyeHexColor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLeftEyeHexColorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetLeftEyeHexColorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetLeftEyeHexColorArray() { return __p.__vector_as_array<byte>(10); }
  public bool RightEyeColorReset { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RightEyeDyeID { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RightEyeHexColor { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRightEyeHexColorBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetRightEyeHexColorBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetRightEyeHexColorArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<Lobby.CQ_HeroEyeColorChange> CreateCQ_HeroEyeColorChange(FlatBufferBuilder builder,
      int HeroID = 0,
      bool LeftEyeColorReset = false,
      int LeftEyeDyeID = 0,
      StringOffset LeftEyeHexColorOffset = default(StringOffset),
      bool RightEyeColorReset = false,
      int RightEyeDyeID = 0,
      StringOffset RightEyeHexColorOffset = default(StringOffset)) {
    builder.StartTable(7);
    CQ_HeroEyeColorChange.AddRightEyeHexColor(builder, RightEyeHexColorOffset);
    CQ_HeroEyeColorChange.AddRightEyeDyeID(builder, RightEyeDyeID);
    CQ_HeroEyeColorChange.AddLeftEyeHexColor(builder, LeftEyeHexColorOffset);
    CQ_HeroEyeColorChange.AddLeftEyeDyeID(builder, LeftEyeDyeID);
    CQ_HeroEyeColorChange.AddHeroID(builder, HeroID);
    CQ_HeroEyeColorChange.AddRightEyeColorReset(builder, RightEyeColorReset);
    CQ_HeroEyeColorChange.AddLeftEyeColorReset(builder, LeftEyeColorReset);
    return CQ_HeroEyeColorChange.EndCQ_HeroEyeColorChange(builder);
  }

  public static void StartCQ_HeroEyeColorChange(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddHeroID(FlatBufferBuilder builder, int HeroID) { builder.AddInt(0, HeroID, 0); }
  public static void AddLeftEyeColorReset(FlatBufferBuilder builder, bool LeftEyeColorReset) { builder.AddBool(1, LeftEyeColorReset, false); }
  public static void AddLeftEyeDyeID(FlatBufferBuilder builder, int LeftEyeDyeID) { builder.AddInt(2, LeftEyeDyeID, 0); }
  public static void AddLeftEyeHexColor(FlatBufferBuilder builder, StringOffset LeftEyeHexColorOffset) { builder.AddOffset(3, LeftEyeHexColorOffset.Value, 0); }
  public static void AddRightEyeColorReset(FlatBufferBuilder builder, bool RightEyeColorReset) { builder.AddBool(4, RightEyeColorReset, false); }
  public static void AddRightEyeDyeID(FlatBufferBuilder builder, int RightEyeDyeID) { builder.AddInt(5, RightEyeDyeID, 0); }
  public static void AddRightEyeHexColor(FlatBufferBuilder builder, StringOffset RightEyeHexColorOffset) { builder.AddOffset(6, RightEyeHexColorOffset.Value, 0); }
  public static Offset<Lobby.CQ_HeroEyeColorChange> EndCQ_HeroEyeColorChange(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_HeroEyeColorChange>(o);
  }
  public CQ_HeroEyeColorChangeT UnPack() {
    var _o = new CQ_HeroEyeColorChangeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_HeroEyeColorChangeT _o) {
    _o.HeroID = this.HeroID;
    _o.LeftEyeColorReset = this.LeftEyeColorReset;
    _o.LeftEyeDyeID = this.LeftEyeDyeID;
    _o.LeftEyeHexColor = this.LeftEyeHexColor;
    _o.RightEyeColorReset = this.RightEyeColorReset;
    _o.RightEyeDyeID = this.RightEyeDyeID;
    _o.RightEyeHexColor = this.RightEyeHexColor;
  }
  public static Offset<Lobby.CQ_HeroEyeColorChange> Pack(FlatBufferBuilder builder, CQ_HeroEyeColorChangeT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_HeroEyeColorChange>);
    var _LeftEyeHexColor = _o.LeftEyeHexColor == null ? default(StringOffset) : builder.CreateString(_o.LeftEyeHexColor);
    var _RightEyeHexColor = _o.RightEyeHexColor == null ? default(StringOffset) : builder.CreateString(_o.RightEyeHexColor);
    return CreateCQ_HeroEyeColorChange(
      builder,
      _o.HeroID,
      _o.LeftEyeColorReset,
      _o.LeftEyeDyeID,
      _LeftEyeHexColor,
      _o.RightEyeColorReset,
      _o.RightEyeDyeID,
      _RightEyeHexColor);
  }
}

public class CQ_HeroEyeColorChangeT
{
  public int HeroID { get; set; }
  public bool LeftEyeColorReset { get; set; }
  public int LeftEyeDyeID { get; set; }
  public string LeftEyeHexColor { get; set; }
  public bool RightEyeColorReset { get; set; }
  public int RightEyeDyeID { get; set; }
  public string RightEyeHexColor { get; set; }

  public CQ_HeroEyeColorChangeT() {
    this.HeroID = 0;
    this.LeftEyeColorReset = false;
    this.LeftEyeDyeID = 0;
    this.LeftEyeHexColor = null;
    this.RightEyeColorReset = false;
    this.RightEyeDyeID = 0;
    this.RightEyeHexColor = null;
  }
}


}
