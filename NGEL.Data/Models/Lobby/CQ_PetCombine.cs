// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_PetCombine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_PetCombine GetRootAsCQ_PetCombine(ByteBuffer _bb) { return GetRootAsCQ_PetCombine(_bb, new CQ_PetCombine()); }
  public static CQ_PetCombine GetRootAsCQ_PetCombine(ByteBuffer _bb, CQ_PetCombine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_PetCombine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MainUniqueIDList(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MainUniqueIDListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetMainUniqueIDListBytes() { return __p.__vector_as_span<long>(4, 8); }
#else
  public ArraySegment<byte>? GetMainUniqueIDListBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public long[] GetMainUniqueIDListArray() { return __p.__vector_as_array<long>(4); }
  public long SubUniqueIDList(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int SubUniqueIDListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetSubUniqueIDListBytes() { return __p.__vector_as_span<long>(6, 8); }
#else
  public ArraySegment<byte>? GetSubUniqueIDListBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public long[] GetSubUniqueIDListArray() { return __p.__vector_as_array<long>(6); }

  public static Offset<Lobby.CQ_PetCombine> CreateCQ_PetCombine(FlatBufferBuilder builder,
      VectorOffset MainUniqueIDListOffset = default(VectorOffset),
      VectorOffset SubUniqueIDListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CQ_PetCombine.AddSubUniqueIDList(builder, SubUniqueIDListOffset);
    CQ_PetCombine.AddMainUniqueIDList(builder, MainUniqueIDListOffset);
    return CQ_PetCombine.EndCQ_PetCombine(builder);
  }

  public static void StartCQ_PetCombine(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMainUniqueIDList(FlatBufferBuilder builder, VectorOffset MainUniqueIDListOffset) { builder.AddOffset(0, MainUniqueIDListOffset.Value, 0); }
  public static VectorOffset CreateMainUniqueIDListVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMainUniqueIDListVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMainUniqueIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMainUniqueIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMainUniqueIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddSubUniqueIDList(FlatBufferBuilder builder, VectorOffset SubUniqueIDListOffset) { builder.AddOffset(1, SubUniqueIDListOffset.Value, 0); }
  public static VectorOffset CreateSubUniqueIDListVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSubUniqueIDListVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubUniqueIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubUniqueIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubUniqueIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<Lobby.CQ_PetCombine> EndCQ_PetCombine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_PetCombine>(o);
  }
  public CQ_PetCombineT UnPack() {
    var _o = new CQ_PetCombineT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_PetCombineT _o) {
    _o.MainUniqueIDList = new List<long>();
    for (var _j = 0; _j < this.MainUniqueIDListLength; ++_j) {_o.MainUniqueIDList.Add(this.MainUniqueIDList(_j));}
    _o.SubUniqueIDList = new List<long>();
    for (var _j = 0; _j < this.SubUniqueIDListLength; ++_j) {_o.SubUniqueIDList.Add(this.SubUniqueIDList(_j));}
  }
  public static Offset<Lobby.CQ_PetCombine> Pack(FlatBufferBuilder builder, CQ_PetCombineT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_PetCombine>);
    var _MainUniqueIDList = default(VectorOffset);
    if (_o.MainUniqueIDList != null) {
      var __MainUniqueIDList = _o.MainUniqueIDList.ToArray();
      _MainUniqueIDList = CreateMainUniqueIDListVector(builder, __MainUniqueIDList);
    }
    var _SubUniqueIDList = default(VectorOffset);
    if (_o.SubUniqueIDList != null) {
      var __SubUniqueIDList = _o.SubUniqueIDList.ToArray();
      _SubUniqueIDList = CreateSubUniqueIDListVector(builder, __SubUniqueIDList);
    }
    return CreateCQ_PetCombine(
      builder,
      _MainUniqueIDList,
      _SubUniqueIDList);
  }
}

public class CQ_PetCombineT
{
  public List<long> MainUniqueIDList { get; set; }
  public List<long> SubUniqueIDList { get; set; }

  public CQ_PetCombineT() {
    this.MainUniqueIDList = null;
    this.SubUniqueIDList = null;
  }
}


}
