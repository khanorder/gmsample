// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_CheatSetAsset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_CheatSetAsset GetRootAsCQ_CheatSetAsset(ByteBuffer _bb) { return GetRootAsCQ_CheatSetAsset(_bb, new CQ_CheatSetAsset()); }
  public static CQ_CheatSetAsset GetRootAsCQ_CheatSetAsset(ByteBuffer _bb, CQ_CheatSetAsset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_CheatSetAsset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.EUserAssetType AssetID { get { int o = __p.__offset(4); return o != 0 ? (Lobby.EUserAssetType)__p.bb.Get(o + __p.bb_pos) : Lobby.EUserAssetType.None; } }
  public int Count { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.CQ_CheatSetAsset> CreateCQ_CheatSetAsset(FlatBufferBuilder builder,
      Lobby.EUserAssetType AssetID = Lobby.EUserAssetType.None,
      int Count = 0) {
    builder.StartTable(2);
    CQ_CheatSetAsset.AddCount(builder, Count);
    CQ_CheatSetAsset.AddAssetID(builder, AssetID);
    return CQ_CheatSetAsset.EndCQ_CheatSetAsset(builder);
  }

  public static void StartCQ_CheatSetAsset(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAssetID(FlatBufferBuilder builder, Lobby.EUserAssetType AssetID) { builder.AddByte(0, (byte)AssetID, 0); }
  public static void AddCount(FlatBufferBuilder builder, int Count) { builder.AddInt(1, Count, 0); }
  public static Offset<Lobby.CQ_CheatSetAsset> EndCQ_CheatSetAsset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_CheatSetAsset>(o);
  }
  public CQ_CheatSetAssetT UnPack() {
    var _o = new CQ_CheatSetAssetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_CheatSetAssetT _o) {
    _o.AssetID = this.AssetID;
    _o.Count = this.Count;
  }
  public static Offset<Lobby.CQ_CheatSetAsset> Pack(FlatBufferBuilder builder, CQ_CheatSetAssetT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_CheatSetAsset>);
    return CreateCQ_CheatSetAsset(
      builder,
      _o.AssetID,
      _o.Count);
  }
}

public class CQ_CheatSetAssetT
{
  public Lobby.EUserAssetType AssetID { get; set; }
  public int Count { get; set; }

  public CQ_CheatSetAssetT() {
    this.AssetID = Lobby.EUserAssetType.None;
    this.Count = 0;
  }
}


}
