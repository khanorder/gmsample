// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SeasonPassData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SeasonPassData GetRootAsSeasonPassData(ByteBuffer _bb) { return GetRootAsSeasonPassData(_bb, new SeasonPassData()); }
  public static SeasonPassData GetRootAsSeasonPassData(ByteBuffer _bb, SeasonPassData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SeasonPassData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SeasonPassID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SeasonNum { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsPaid { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int Level { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Exp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool RewardState(int j) { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int RewardStateLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetRewardStateBytes() { return __p.__vector_as_span<bool>(14, 1); }
#else
  public ArraySegment<byte>? GetRewardStateBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public bool[] GetRewardStateArray() { return __p.__vector_as_array<bool>(14); }

  public static Offset<Lobby.SeasonPassData> CreateSeasonPassData(FlatBufferBuilder builder,
      int SeasonPassID = 0,
      int SeasonNum = 0,
      bool IsPaid = false,
      int Level = 0,
      int Exp = 0,
      VectorOffset RewardStateOffset = default(VectorOffset)) {
    builder.StartTable(6);
    SeasonPassData.AddRewardState(builder, RewardStateOffset);
    SeasonPassData.AddExp(builder, Exp);
    SeasonPassData.AddLevel(builder, Level);
    SeasonPassData.AddSeasonNum(builder, SeasonNum);
    SeasonPassData.AddSeasonPassID(builder, SeasonPassID);
    SeasonPassData.AddIsPaid(builder, IsPaid);
    return SeasonPassData.EndSeasonPassData(builder);
  }

  public static void StartSeasonPassData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddSeasonPassID(FlatBufferBuilder builder, int SeasonPassID) { builder.AddInt(0, SeasonPassID, 0); }
  public static void AddSeasonNum(FlatBufferBuilder builder, int SeasonNum) { builder.AddInt(1, SeasonNum, 0); }
  public static void AddIsPaid(FlatBufferBuilder builder, bool IsPaid) { builder.AddBool(2, IsPaid, false); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(3, Level, 0); }
  public static void AddExp(FlatBufferBuilder builder, int Exp) { builder.AddInt(4, Exp, 0); }
  public static void AddRewardState(FlatBufferBuilder builder, VectorOffset RewardStateOffset) { builder.AddOffset(5, RewardStateOffset.Value, 0); }
  public static VectorOffset CreateRewardStateVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardStateVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardStateVectorBlock(FlatBufferBuilder builder, ArraySegment<bool> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardStateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<bool>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Lobby.SeasonPassData> EndSeasonPassData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SeasonPassData>(o);
  }
  public SeasonPassDataT UnPack() {
    var _o = new SeasonPassDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SeasonPassDataT _o) {
    _o.SeasonPassID = this.SeasonPassID;
    _o.SeasonNum = this.SeasonNum;
    _o.IsPaid = this.IsPaid;
    _o.Level = this.Level;
    _o.Exp = this.Exp;
    _o.RewardState = new List<bool>();
    for (var _j = 0; _j < this.RewardStateLength; ++_j) {_o.RewardState.Add(this.RewardState(_j));}
  }
  public static Offset<Lobby.SeasonPassData> Pack(FlatBufferBuilder builder, SeasonPassDataT _o) {
    if (_o == null) return default(Offset<Lobby.SeasonPassData>);
    var _RewardState = default(VectorOffset);
    if (_o.RewardState != null) {
      var __RewardState = _o.RewardState.ToArray();
      _RewardState = CreateRewardStateVector(builder, __RewardState);
    }
    return CreateSeasonPassData(
      builder,
      _o.SeasonPassID,
      _o.SeasonNum,
      _o.IsPaid,
      _o.Level,
      _o.Exp,
      _RewardState);
  }
}

public class SeasonPassDataT
{
  public int SeasonPassID { get; set; }
  public int SeasonNum { get; set; }
  public bool IsPaid { get; set; }
  public int Level { get; set; }
  public int Exp { get; set; }
  public List<bool> RewardState { get; set; }

  public SeasonPassDataT() {
    this.SeasonPassID = 0;
    this.SeasonNum = 0;
    this.IsPaid = false;
    this.Level = 0;
    this.Exp = 0;
    this.RewardState = null;
  }
}


}
