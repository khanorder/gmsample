// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SN_MatchingWaitConfirm : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SN_MatchingWaitConfirm GetRootAsSN_MatchingWaitConfirm(ByteBuffer _bb) { return GetRootAsSN_MatchingWaitConfirm(_bb, new SN_MatchingWaitConfirm()); }
  public static SN_MatchingWaitConfirm GetRootAsSN_MatchingWaitConfirm(ByteBuffer _bb, SN_MatchingWaitConfirm obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SN_MatchingWaitConfirm __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MatchID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMatchIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMatchIDArray() { return __p.__vector_as_array<byte>(4); }
  public int ConfirmTimeout { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.MatchingTeamInfo? TeamList(int j) { int o = __p.__offset(8); return o != 0 ? (Lobby.MatchingTeamInfo?)(new Lobby.MatchingTeamInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TeamListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int MatchingTableID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.SN_MatchingWaitConfirm> CreateSN_MatchingWaitConfirm(FlatBufferBuilder builder,
      StringOffset MatchIDOffset = default(StringOffset),
      int ConfirmTimeout = 0,
      VectorOffset TeamListOffset = default(VectorOffset),
      int MatchingTableID = 0) {
    builder.StartTable(4);
    SN_MatchingWaitConfirm.AddMatchingTableID(builder, MatchingTableID);
    SN_MatchingWaitConfirm.AddTeamList(builder, TeamListOffset);
    SN_MatchingWaitConfirm.AddConfirmTimeout(builder, ConfirmTimeout);
    SN_MatchingWaitConfirm.AddMatchID(builder, MatchIDOffset);
    return SN_MatchingWaitConfirm.EndSN_MatchingWaitConfirm(builder);
  }

  public static void StartSN_MatchingWaitConfirm(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddMatchID(FlatBufferBuilder builder, StringOffset MatchIDOffset) { builder.AddOffset(0, MatchIDOffset.Value, 0); }
  public static void AddConfirmTimeout(FlatBufferBuilder builder, int ConfirmTimeout) { builder.AddInt(1, ConfirmTimeout, 0); }
  public static void AddTeamList(FlatBufferBuilder builder, VectorOffset TeamListOffset) { builder.AddOffset(2, TeamListOffset.Value, 0); }
  public static VectorOffset CreateTeamListVector(FlatBufferBuilder builder, Offset<Lobby.MatchingTeamInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTeamListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.MatchingTeamInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTeamListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.MatchingTeamInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTeamListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.MatchingTeamInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTeamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMatchingTableID(FlatBufferBuilder builder, int MatchingTableID) { builder.AddInt(3, MatchingTableID, 0); }
  public static Offset<Lobby.SN_MatchingWaitConfirm> EndSN_MatchingWaitConfirm(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SN_MatchingWaitConfirm>(o);
  }
  public SN_MatchingWaitConfirmT UnPack() {
    var _o = new SN_MatchingWaitConfirmT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SN_MatchingWaitConfirmT _o) {
    _o.MatchID = this.MatchID;
    _o.ConfirmTimeout = this.ConfirmTimeout;
    _o.TeamList = new List<Lobby.MatchingTeamInfoT>();
    for (var _j = 0; _j < this.TeamListLength; ++_j) {_o.TeamList.Add(this.TeamList(_j).HasValue ? this.TeamList(_j).Value.UnPack() : null);}
    _o.MatchingTableID = this.MatchingTableID;
  }
  public static Offset<Lobby.SN_MatchingWaitConfirm> Pack(FlatBufferBuilder builder, SN_MatchingWaitConfirmT _o) {
    if (_o == null) return default(Offset<Lobby.SN_MatchingWaitConfirm>);
    var _MatchID = _o.MatchID == null ? default(StringOffset) : builder.CreateString(_o.MatchID);
    var _TeamList = default(VectorOffset);
    if (_o.TeamList != null) {
      var __TeamList = new Offset<Lobby.MatchingTeamInfo>[_o.TeamList.Count];
      for (var _j = 0; _j < __TeamList.Length; ++_j) { __TeamList[_j] = Lobby.MatchingTeamInfo.Pack(builder, _o.TeamList[_j]); }
      _TeamList = CreateTeamListVector(builder, __TeamList);
    }
    return CreateSN_MatchingWaitConfirm(
      builder,
      _MatchID,
      _o.ConfirmTimeout,
      _TeamList,
      _o.MatchingTableID);
  }
}

public class SN_MatchingWaitConfirmT
{
  public string MatchID { get; set; }
  public int ConfirmTimeout { get; set; }
  public List<Lobby.MatchingTeamInfoT> TeamList { get; set; }
  public int MatchingTableID { get; set; }

  public SN_MatchingWaitConfirmT() {
    this.MatchID = null;
    this.ConfirmTimeout = 0;
    this.TeamList = null;
    this.MatchingTableID = 0;
  }
}


}
