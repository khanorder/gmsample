// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_ExpressionPresetList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_ExpressionPresetList GetRootAsSA_ExpressionPresetList(ByteBuffer _bb) { return GetRootAsSA_ExpressionPresetList(_bb, new SA_ExpressionPresetList()); }
  public static SA_ExpressionPresetList GetRootAsSA_ExpressionPresetList(ByteBuffer _bb, SA_ExpressionPresetList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_ExpressionPresetList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.ExpressionPresetData? ExpressionPresetList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.ExpressionPresetData?)(new Lobby.ExpressionPresetData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ExpressionPresetListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_ExpressionPresetList> CreateSA_ExpressionPresetList(FlatBufferBuilder builder,
      VectorOffset ExpressionPresetListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_ExpressionPresetList.AddExpressionPresetList(builder, ExpressionPresetListOffset);
    return SA_ExpressionPresetList.EndSA_ExpressionPresetList(builder);
  }

  public static void StartSA_ExpressionPresetList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddExpressionPresetList(FlatBufferBuilder builder, VectorOffset ExpressionPresetListOffset) { builder.AddOffset(0, ExpressionPresetListOffset.Value, 0); }
  public static VectorOffset CreateExpressionPresetListVector(FlatBufferBuilder builder, Offset<Lobby.ExpressionPresetData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExpressionPresetListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.ExpressionPresetData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExpressionPresetListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.ExpressionPresetData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExpressionPresetListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.ExpressionPresetData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExpressionPresetListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.SA_ExpressionPresetList> EndSA_ExpressionPresetList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_ExpressionPresetList>(o);
  }
  public SA_ExpressionPresetListT UnPack() {
    var _o = new SA_ExpressionPresetListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_ExpressionPresetListT _o) {
    _o.ExpressionPresetList = new List<Lobby.ExpressionPresetDataT>();
    for (var _j = 0; _j < this.ExpressionPresetListLength; ++_j) {_o.ExpressionPresetList.Add(this.ExpressionPresetList(_j).HasValue ? this.ExpressionPresetList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_ExpressionPresetList> Pack(FlatBufferBuilder builder, SA_ExpressionPresetListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_ExpressionPresetList>);
    var _ExpressionPresetList = default(VectorOffset);
    if (_o.ExpressionPresetList != null) {
      var __ExpressionPresetList = new Offset<Lobby.ExpressionPresetData>[_o.ExpressionPresetList.Count];
      for (var _j = 0; _j < __ExpressionPresetList.Length; ++_j) { __ExpressionPresetList[_j] = Lobby.ExpressionPresetData.Pack(builder, _o.ExpressionPresetList[_j]); }
      _ExpressionPresetList = CreateExpressionPresetListVector(builder, __ExpressionPresetList);
    }
    return CreateSA_ExpressionPresetList(
      builder,
      _ExpressionPresetList);
  }
}

public class SA_ExpressionPresetListT
{
  public List<Lobby.ExpressionPresetDataT> ExpressionPresetList { get; set; }

  public SA_ExpressionPresetListT() {
    this.ExpressionPresetList = null;
  }
}


}
