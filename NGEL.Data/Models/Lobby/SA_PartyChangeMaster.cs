// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_PartyChangeMaster : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_PartyChangeMaster GetRootAsSA_PartyChangeMaster(ByteBuffer _bb) { return GetRootAsSA_PartyChangeMaster(_bb, new SA_PartyChangeMaster()); }
  public static SA_PartyChangeMaster GetRootAsSA_PartyChangeMaster(ByteBuffer _bb, SA_PartyChangeMaster obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_PartyChangeMaster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PartyID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPartyIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPartyIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPartyIDArray() { return __p.__vector_as_array<byte>(4); }
  public int NewMasterUID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.SA_PartyChangeMaster> CreateSA_PartyChangeMaster(FlatBufferBuilder builder,
      StringOffset PartyIDOffset = default(StringOffset),
      int NewMasterUID = 0) {
    builder.StartTable(2);
    SA_PartyChangeMaster.AddNewMasterUID(builder, NewMasterUID);
    SA_PartyChangeMaster.AddPartyID(builder, PartyIDOffset);
    return SA_PartyChangeMaster.EndSA_PartyChangeMaster(builder);
  }

  public static void StartSA_PartyChangeMaster(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPartyID(FlatBufferBuilder builder, StringOffset PartyIDOffset) { builder.AddOffset(0, PartyIDOffset.Value, 0); }
  public static void AddNewMasterUID(FlatBufferBuilder builder, int NewMasterUID) { builder.AddInt(1, NewMasterUID, 0); }
  public static Offset<Lobby.SA_PartyChangeMaster> EndSA_PartyChangeMaster(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_PartyChangeMaster>(o);
  }
  public SA_PartyChangeMasterT UnPack() {
    var _o = new SA_PartyChangeMasterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_PartyChangeMasterT _o) {
    _o.PartyID = this.PartyID;
    _o.NewMasterUID = this.NewMasterUID;
  }
  public static Offset<Lobby.SA_PartyChangeMaster> Pack(FlatBufferBuilder builder, SA_PartyChangeMasterT _o) {
    if (_o == null) return default(Offset<Lobby.SA_PartyChangeMaster>);
    var _PartyID = _o.PartyID == null ? default(StringOffset) : builder.CreateString(_o.PartyID);
    return CreateSA_PartyChangeMaster(
      builder,
      _PartyID,
      _o.NewMasterUID);
  }
}

public class SA_PartyChangeMasterT
{
  public string PartyID { get; set; }
  public int NewMasterUID { get; set; }

  public SA_PartyChangeMasterT() {
    this.PartyID = null;
    this.NewMasterUID = 0;
  }
}


}
