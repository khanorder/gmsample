// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct NewHeroData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static NewHeroData GetRootAsNewHeroData(ByteBuffer _bb) { return GetRootAsNewHeroData(_bb, new NewHeroData()); }
  public static NewHeroData GetRootAsNewHeroData(ByteBuffer _bb, NewHeroData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NewHeroData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.HeroData? Hero { get { int o = __p.__offset(4); return o != 0 ? (Lobby.HeroData?)(new Lobby.HeroData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Lobby.HeroSkinData? HairSkin { get { int o = __p.__offset(6); return o != 0 ? (Lobby.HeroSkinData?)(new Lobby.HeroSkinData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Lobby.HeroSkinData? BodySkin { get { int o = __p.__offset(8); return o != 0 ? (Lobby.HeroSkinData?)(new Lobby.HeroSkinData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Lobby.ProfileData? ProfileList(int j) { int o = __p.__offset(10); return o != 0 ? (Lobby.ProfileData?)(new Lobby.ProfileData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ProfileListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Lobby.ItemData? AccessoryList(int j) { int o = __p.__offset(12); return o != 0 ? (Lobby.ItemData?)(new Lobby.ItemData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int AccessoryListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Lobby.ExpressionData? WinPose { get { int o = __p.__offset(14); return o != 0 ? (Lobby.ExpressionData?)(new Lobby.ExpressionData()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Lobby.ExpressionPresetData? ExpressionPreset { get { int o = __p.__offset(16); return o != 0 ? (Lobby.ExpressionPresetData?)(new Lobby.ExpressionPresetData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Lobby.NewHeroData> CreateNewHeroData(FlatBufferBuilder builder,
      Offset<Lobby.HeroData> HeroOffset = default(Offset<Lobby.HeroData>),
      Offset<Lobby.HeroSkinData> HairSkinOffset = default(Offset<Lobby.HeroSkinData>),
      Offset<Lobby.HeroSkinData> BodySkinOffset = default(Offset<Lobby.HeroSkinData>),
      VectorOffset ProfileListOffset = default(VectorOffset),
      VectorOffset AccessoryListOffset = default(VectorOffset),
      Lobby.ExpressionDataT WinPose = null,
      Offset<Lobby.ExpressionPresetData> ExpressionPresetOffset = default(Offset<Lobby.ExpressionPresetData>)) {
    builder.StartTable(7);
    NewHeroData.AddExpressionPreset(builder, ExpressionPresetOffset);
    NewHeroData.AddWinPose(builder, Lobby.ExpressionData.Pack(builder, WinPose));
    NewHeroData.AddAccessoryList(builder, AccessoryListOffset);
    NewHeroData.AddProfileList(builder, ProfileListOffset);
    NewHeroData.AddBodySkin(builder, BodySkinOffset);
    NewHeroData.AddHairSkin(builder, HairSkinOffset);
    NewHeroData.AddHero(builder, HeroOffset);
    return NewHeroData.EndNewHeroData(builder);
  }

  public static void StartNewHeroData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddHero(FlatBufferBuilder builder, Offset<Lobby.HeroData> HeroOffset) { builder.AddOffset(0, HeroOffset.Value, 0); }
  public static void AddHairSkin(FlatBufferBuilder builder, Offset<Lobby.HeroSkinData> HairSkinOffset) { builder.AddOffset(1, HairSkinOffset.Value, 0); }
  public static void AddBodySkin(FlatBufferBuilder builder, Offset<Lobby.HeroSkinData> BodySkinOffset) { builder.AddOffset(2, BodySkinOffset.Value, 0); }
  public static void AddProfileList(FlatBufferBuilder builder, VectorOffset ProfileListOffset) { builder.AddOffset(3, ProfileListOffset.Value, 0); }
  public static void StartProfileListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddAccessoryList(FlatBufferBuilder builder, VectorOffset AccessoryListOffset) { builder.AddOffset(4, AccessoryListOffset.Value, 0); }
  public static void StartAccessoryListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddWinPose(FlatBufferBuilder builder, Offset<Lobby.ExpressionData> WinPoseOffset) { builder.AddStruct(5, WinPoseOffset.Value, 0); }
  public static void AddExpressionPreset(FlatBufferBuilder builder, Offset<Lobby.ExpressionPresetData> ExpressionPresetOffset) { builder.AddOffset(6, ExpressionPresetOffset.Value, 0); }
  public static Offset<Lobby.NewHeroData> EndNewHeroData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.NewHeroData>(o);
  }
  public NewHeroDataT UnPack() {
    var _o = new NewHeroDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NewHeroDataT _o) {
    _o.Hero = this.Hero.HasValue ? this.Hero.Value.UnPack() : null;
    _o.HairSkin = this.HairSkin.HasValue ? this.HairSkin.Value.UnPack() : null;
    _o.BodySkin = this.BodySkin.HasValue ? this.BodySkin.Value.UnPack() : null;
    _o.ProfileList = new List<Lobby.ProfileDataT>();
    for (var _j = 0; _j < this.ProfileListLength; ++_j) {_o.ProfileList.Add(this.ProfileList(_j).HasValue ? this.ProfileList(_j).Value.UnPack() : null);}
    _o.AccessoryList = new List<Lobby.ItemDataT>();
    for (var _j = 0; _j < this.AccessoryListLength; ++_j) {_o.AccessoryList.Add(this.AccessoryList(_j).HasValue ? this.AccessoryList(_j).Value.UnPack() : null);}
    _o.WinPose = this.WinPose.HasValue ? this.WinPose.Value.UnPack() : null;
    _o.ExpressionPreset = this.ExpressionPreset.HasValue ? this.ExpressionPreset.Value.UnPack() : null;
  }
  public static Offset<Lobby.NewHeroData> Pack(FlatBufferBuilder builder, NewHeroDataT _o) {
    if (_o == null) return default(Offset<Lobby.NewHeroData>);
    var _Hero = _o.Hero == null ? default(Offset<Lobby.HeroData>) : Lobby.HeroData.Pack(builder, _o.Hero);
    var _HairSkin = _o.HairSkin == null ? default(Offset<Lobby.HeroSkinData>) : Lobby.HeroSkinData.Pack(builder, _o.HairSkin);
    var _BodySkin = _o.BodySkin == null ? default(Offset<Lobby.HeroSkinData>) : Lobby.HeroSkinData.Pack(builder, _o.BodySkin);
    var _ProfileList = default(VectorOffset);
    if (_o.ProfileList != null) {
      StartProfileListVector(builder, _o.ProfileList.Count);
      for (var _j = _o.ProfileList.Count - 1; _j >= 0; --_j) { Lobby.ProfileData.Pack(builder, _o.ProfileList[_j]); }
      _ProfileList = builder.EndVector();
    }
    var _AccessoryList = default(VectorOffset);
    if (_o.AccessoryList != null) {
      StartAccessoryListVector(builder, _o.AccessoryList.Count);
      for (var _j = _o.AccessoryList.Count - 1; _j >= 0; --_j) { Lobby.ItemData.Pack(builder, _o.AccessoryList[_j]); }
      _AccessoryList = builder.EndVector();
    }
    var _ExpressionPreset = _o.ExpressionPreset == null ? default(Offset<Lobby.ExpressionPresetData>) : Lobby.ExpressionPresetData.Pack(builder, _o.ExpressionPreset);
    return CreateNewHeroData(
      builder,
      _Hero,
      _HairSkin,
      _BodySkin,
      _ProfileList,
      _AccessoryList,
      _o.WinPose,
      _ExpressionPreset);
  }
}

public class NewHeroDataT
{
  public Lobby.HeroDataT Hero { get; set; }
  public Lobby.HeroSkinDataT HairSkin { get; set; }
  public Lobby.HeroSkinDataT BodySkin { get; set; }
  public List<Lobby.ProfileDataT> ProfileList { get; set; }
  public List<Lobby.ItemDataT> AccessoryList { get; set; }
  public Lobby.ExpressionDataT WinPose { get; set; }
  public Lobby.ExpressionPresetDataT ExpressionPreset { get; set; }

  public NewHeroDataT() {
    this.Hero = null;
    this.HairSkin = null;
    this.BodySkin = null;
    this.ProfileList = null;
    this.AccessoryList = null;
    this.WinPose = new Lobby.ExpressionDataT();
    this.ExpressionPreset = null;
  }
}


}
