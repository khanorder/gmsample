// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DediToLobby_VehicleRacePrepare : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static DediToLobby_VehicleRacePrepare GetRootAsDediToLobby_VehicleRacePrepare(ByteBuffer _bb) { return GetRootAsDediToLobby_VehicleRacePrepare(_bb, new DediToLobby_VehicleRacePrepare()); }
  public static DediToLobby_VehicleRacePrepare GetRootAsDediToLobby_VehicleRacePrepare(ByteBuffer _bb, DediToLobby_VehicleRacePrepare obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DediToLobby_VehicleRacePrepare __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string DedicatedID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDedicatedIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDedicatedIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDedicatedIDArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Lobby.DediToLobby_VehicleRacePrepare> CreateDediToLobby_VehicleRacePrepare(FlatBufferBuilder builder,
      StringOffset DedicatedIDOffset = default(StringOffset)) {
    builder.StartTable(1);
    DediToLobby_VehicleRacePrepare.AddDedicatedID(builder, DedicatedIDOffset);
    return DediToLobby_VehicleRacePrepare.EndDediToLobby_VehicleRacePrepare(builder);
  }

  public static void StartDediToLobby_VehicleRacePrepare(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDedicatedID(FlatBufferBuilder builder, StringOffset DedicatedIDOffset) { builder.AddOffset(0, DedicatedIDOffset.Value, 0); }
  public static Offset<Lobby.DediToLobby_VehicleRacePrepare> EndDediToLobby_VehicleRacePrepare(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.DediToLobby_VehicleRacePrepare>(o);
  }
  public DediToLobby_VehicleRacePrepareT UnPack() {
    var _o = new DediToLobby_VehicleRacePrepareT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DediToLobby_VehicleRacePrepareT _o) {
    _o.DedicatedID = this.DedicatedID;
  }
  public static Offset<Lobby.DediToLobby_VehicleRacePrepare> Pack(FlatBufferBuilder builder, DediToLobby_VehicleRacePrepareT _o) {
    if (_o == null) return default(Offset<Lobby.DediToLobby_VehicleRacePrepare>);
    var _DedicatedID = _o.DedicatedID == null ? default(StringOffset) : builder.CreateString(_o.DedicatedID);
    return CreateDediToLobby_VehicleRacePrepare(
      builder,
      _DedicatedID);
  }
}

public class DediToLobby_VehicleRacePrepareT
{
  public string DedicatedID { get; set; }

  public DediToLobby_VehicleRacePrepareT() {
    this.DedicatedID = null;
  }
}


}
