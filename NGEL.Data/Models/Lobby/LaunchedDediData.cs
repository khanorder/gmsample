// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LaunchedDediData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static LaunchedDediData GetRootAsLaunchedDediData(ByteBuffer _bb) { return GetRootAsLaunchedDediData(_bb, new LaunchedDediData()); }
  public static LaunchedDediData GetRootAsLaunchedDediData(ByteBuffer _bb, LaunchedDediData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LaunchedDediData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ManagerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ContentsType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentsTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetContentsTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetContentsTypeArray() { return __p.__vector_as_array<byte>(6); }
  public string DedicatedID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDedicatedIDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDedicatedIDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDedicatedIDArray() { return __p.__vector_as_array<byte>(8); }
  public string ServerUrl { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetServerUrlBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetServerUrlBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetServerUrlArray() { return __p.__vector_as_array<byte>(10); }
  public int UIDList(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UIDListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetUIDListBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetUIDListBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetUIDListArray() { return __p.__vector_as_array<int>(12); }
  public string GameSessionId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameSessionIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetGameSessionIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetGameSessionIdArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<Lobby.LaunchedDediData> CreateLaunchedDediData(FlatBufferBuilder builder,
      int ManagerID = 0,
      StringOffset ContentsTypeOffset = default(StringOffset),
      StringOffset DedicatedIDOffset = default(StringOffset),
      StringOffset ServerUrlOffset = default(StringOffset),
      VectorOffset UIDListOffset = default(VectorOffset),
      StringOffset GameSessionIdOffset = default(StringOffset)) {
    builder.StartTable(6);
    LaunchedDediData.AddGameSessionId(builder, GameSessionIdOffset);
    LaunchedDediData.AddUIDList(builder, UIDListOffset);
    LaunchedDediData.AddServerUrl(builder, ServerUrlOffset);
    LaunchedDediData.AddDedicatedID(builder, DedicatedIDOffset);
    LaunchedDediData.AddContentsType(builder, ContentsTypeOffset);
    LaunchedDediData.AddManagerID(builder, ManagerID);
    return LaunchedDediData.EndLaunchedDediData(builder);
  }

  public static void StartLaunchedDediData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddManagerID(FlatBufferBuilder builder, int ManagerID) { builder.AddInt(0, ManagerID, 0); }
  public static void AddContentsType(FlatBufferBuilder builder, StringOffset ContentsTypeOffset) { builder.AddOffset(1, ContentsTypeOffset.Value, 0); }
  public static void AddDedicatedID(FlatBufferBuilder builder, StringOffset DedicatedIDOffset) { builder.AddOffset(2, DedicatedIDOffset.Value, 0); }
  public static void AddServerUrl(FlatBufferBuilder builder, StringOffset ServerUrlOffset) { builder.AddOffset(3, ServerUrlOffset.Value, 0); }
  public static void AddUIDList(FlatBufferBuilder builder, VectorOffset UIDListOffset) { builder.AddOffset(4, UIDListOffset.Value, 0); }
  public static VectorOffset CreateUIDListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUIDListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGameSessionId(FlatBufferBuilder builder, StringOffset GameSessionIdOffset) { builder.AddOffset(5, GameSessionIdOffset.Value, 0); }
  public static Offset<Lobby.LaunchedDediData> EndLaunchedDediData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.LaunchedDediData>(o);
  }
  public LaunchedDediDataT UnPack() {
    var _o = new LaunchedDediDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LaunchedDediDataT _o) {
    _o.ManagerID = this.ManagerID;
    _o.ContentsType = this.ContentsType;
    _o.DedicatedID = this.DedicatedID;
    _o.ServerUrl = this.ServerUrl;
    _o.UIDList = new List<int>();
    for (var _j = 0; _j < this.UIDListLength; ++_j) {_o.UIDList.Add(this.UIDList(_j));}
    _o.GameSessionId = this.GameSessionId;
  }
  public static Offset<Lobby.LaunchedDediData> Pack(FlatBufferBuilder builder, LaunchedDediDataT _o) {
    if (_o == null) return default(Offset<Lobby.LaunchedDediData>);
    var _ContentsType = _o.ContentsType == null ? default(StringOffset) : builder.CreateString(_o.ContentsType);
    var _DedicatedID = _o.DedicatedID == null ? default(StringOffset) : builder.CreateString(_o.DedicatedID);
    var _ServerUrl = _o.ServerUrl == null ? default(StringOffset) : builder.CreateString(_o.ServerUrl);
    var _UIDList = default(VectorOffset);
    if (_o.UIDList != null) {
      var __UIDList = _o.UIDList.ToArray();
      _UIDList = CreateUIDListVector(builder, __UIDList);
    }
    var _GameSessionId = _o.GameSessionId == null ? default(StringOffset) : builder.CreateString(_o.GameSessionId);
    return CreateLaunchedDediData(
      builder,
      _o.ManagerID,
      _ContentsType,
      _DedicatedID,
      _ServerUrl,
      _UIDList,
      _GameSessionId);
  }
}

public class LaunchedDediDataT
{
  public int ManagerID { get; set; }
  public string ContentsType { get; set; }
  public string DedicatedID { get; set; }
  public string ServerUrl { get; set; }
  public List<int> UIDList { get; set; }
  public string GameSessionId { get; set; }

  public LaunchedDediDataT() {
    this.ManagerID = 0;
    this.ContentsType = null;
    this.DedicatedID = null;
    this.ServerUrl = null;
    this.UIDList = null;
    this.GameSessionId = null;
  }
}


}
