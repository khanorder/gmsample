// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LobbyToLobby_MatchingStartCustomMatch : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static LobbyToLobby_MatchingStartCustomMatch GetRootAsLobbyToLobby_MatchingStartCustomMatch(ByteBuffer _bb) { return GetRootAsLobbyToLobby_MatchingStartCustomMatch(_bb, new LobbyToLobby_MatchingStartCustomMatch()); }
  public static LobbyToLobby_MatchingStartCustomMatch GetRootAsLobbyToLobby_MatchingStartCustomMatch(ByteBuffer _bb, LobbyToLobby_MatchingStartCustomMatch obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LobbyToLobby_MatchingStartCustomMatch __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MatchingTableID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MatchID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchIDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMatchIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMatchIDArray() { return __p.__vector_as_array<byte>(6); }
  public Lobby.MatchingTeamInfo? TeamList(int j) { int o = __p.__offset(8); return o != 0 ? (Lobby.MatchingTeamInfo?)(new Lobby.MatchingTeamInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TeamListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string TeamID { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamIDBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTeamIDBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTeamIDArray() { return __p.__vector_as_array<byte>(10); }
  public string DedicatedID { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDedicatedIDBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDedicatedIDBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDedicatedIDArray() { return __p.__vector_as_array<byte>(12); }
  public string ServerUrl { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetServerUrlBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetServerUrlBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetServerUrlArray() { return __p.__vector_as_array<byte>(14); }
  public string OTP { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOTPBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetOTPBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetOTPArray() { return __p.__vector_as_array<byte>(16); }
  public string GameSessionID { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameSessionIDBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetGameSessionIDBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetGameSessionIDArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<Lobby.LobbyToLobby_MatchingStartCustomMatch> CreateLobbyToLobby_MatchingStartCustomMatch(FlatBufferBuilder builder,
      int MatchingTableID = 0,
      StringOffset MatchIDOffset = default(StringOffset),
      VectorOffset TeamListOffset = default(VectorOffset),
      StringOffset TeamIDOffset = default(StringOffset),
      StringOffset DedicatedIDOffset = default(StringOffset),
      StringOffset ServerUrlOffset = default(StringOffset),
      StringOffset OTPOffset = default(StringOffset),
      StringOffset GameSessionIDOffset = default(StringOffset)) {
    builder.StartTable(8);
    LobbyToLobby_MatchingStartCustomMatch.AddGameSessionID(builder, GameSessionIDOffset);
    LobbyToLobby_MatchingStartCustomMatch.AddOTP(builder, OTPOffset);
    LobbyToLobby_MatchingStartCustomMatch.AddServerUrl(builder, ServerUrlOffset);
    LobbyToLobby_MatchingStartCustomMatch.AddDedicatedID(builder, DedicatedIDOffset);
    LobbyToLobby_MatchingStartCustomMatch.AddTeamID(builder, TeamIDOffset);
    LobbyToLobby_MatchingStartCustomMatch.AddTeamList(builder, TeamListOffset);
    LobbyToLobby_MatchingStartCustomMatch.AddMatchID(builder, MatchIDOffset);
    LobbyToLobby_MatchingStartCustomMatch.AddMatchingTableID(builder, MatchingTableID);
    return LobbyToLobby_MatchingStartCustomMatch.EndLobbyToLobby_MatchingStartCustomMatch(builder);
  }

  public static void StartLobbyToLobby_MatchingStartCustomMatch(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddMatchingTableID(FlatBufferBuilder builder, int MatchingTableID) { builder.AddInt(0, MatchingTableID, 0); }
  public static void AddMatchID(FlatBufferBuilder builder, StringOffset MatchIDOffset) { builder.AddOffset(1, MatchIDOffset.Value, 0); }
  public static void AddTeamList(FlatBufferBuilder builder, VectorOffset TeamListOffset) { builder.AddOffset(2, TeamListOffset.Value, 0); }
  public static VectorOffset CreateTeamListVector(FlatBufferBuilder builder, Offset<Lobby.MatchingTeamInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTeamListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.MatchingTeamInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTeamListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.MatchingTeamInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTeamListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.MatchingTeamInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTeamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTeamID(FlatBufferBuilder builder, StringOffset TeamIDOffset) { builder.AddOffset(3, TeamIDOffset.Value, 0); }
  public static void AddDedicatedID(FlatBufferBuilder builder, StringOffset DedicatedIDOffset) { builder.AddOffset(4, DedicatedIDOffset.Value, 0); }
  public static void AddServerUrl(FlatBufferBuilder builder, StringOffset ServerUrlOffset) { builder.AddOffset(5, ServerUrlOffset.Value, 0); }
  public static void AddOTP(FlatBufferBuilder builder, StringOffset OTPOffset) { builder.AddOffset(6, OTPOffset.Value, 0); }
  public static void AddGameSessionID(FlatBufferBuilder builder, StringOffset GameSessionIDOffset) { builder.AddOffset(7, GameSessionIDOffset.Value, 0); }
  public static Offset<Lobby.LobbyToLobby_MatchingStartCustomMatch> EndLobbyToLobby_MatchingStartCustomMatch(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.LobbyToLobby_MatchingStartCustomMatch>(o);
  }
  public LobbyToLobby_MatchingStartCustomMatchT UnPack() {
    var _o = new LobbyToLobby_MatchingStartCustomMatchT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LobbyToLobby_MatchingStartCustomMatchT _o) {
    _o.MatchingTableID = this.MatchingTableID;
    _o.MatchID = this.MatchID;
    _o.TeamList = new List<Lobby.MatchingTeamInfoT>();
    for (var _j = 0; _j < this.TeamListLength; ++_j) {_o.TeamList.Add(this.TeamList(_j).HasValue ? this.TeamList(_j).Value.UnPack() : null);}
    _o.TeamID = this.TeamID;
    _o.DedicatedID = this.DedicatedID;
    _o.ServerUrl = this.ServerUrl;
    _o.OTP = this.OTP;
    _o.GameSessionID = this.GameSessionID;
  }
  public static Offset<Lobby.LobbyToLobby_MatchingStartCustomMatch> Pack(FlatBufferBuilder builder, LobbyToLobby_MatchingStartCustomMatchT _o) {
    if (_o == null) return default(Offset<Lobby.LobbyToLobby_MatchingStartCustomMatch>);
    var _MatchID = _o.MatchID == null ? default(StringOffset) : builder.CreateString(_o.MatchID);
    var _TeamList = default(VectorOffset);
    if (_o.TeamList != null) {
      var __TeamList = new Offset<Lobby.MatchingTeamInfo>[_o.TeamList.Count];
      for (var _j = 0; _j < __TeamList.Length; ++_j) { __TeamList[_j] = Lobby.MatchingTeamInfo.Pack(builder, _o.TeamList[_j]); }
      _TeamList = CreateTeamListVector(builder, __TeamList);
    }
    var _TeamID = _o.TeamID == null ? default(StringOffset) : builder.CreateString(_o.TeamID);
    var _DedicatedID = _o.DedicatedID == null ? default(StringOffset) : builder.CreateString(_o.DedicatedID);
    var _ServerUrl = _o.ServerUrl == null ? default(StringOffset) : builder.CreateString(_o.ServerUrl);
    var _OTP = _o.OTP == null ? default(StringOffset) : builder.CreateString(_o.OTP);
    var _GameSessionID = _o.GameSessionID == null ? default(StringOffset) : builder.CreateString(_o.GameSessionID);
    return CreateLobbyToLobby_MatchingStartCustomMatch(
      builder,
      _o.MatchingTableID,
      _MatchID,
      _TeamList,
      _TeamID,
      _DedicatedID,
      _ServerUrl,
      _OTP,
      _GameSessionID);
  }
}

public class LobbyToLobby_MatchingStartCustomMatchT
{
  public int MatchingTableID { get; set; }
  public string MatchID { get; set; }
  public List<Lobby.MatchingTeamInfoT> TeamList { get; set; }
  public string TeamID { get; set; }
  public string DedicatedID { get; set; }
  public string ServerUrl { get; set; }
  public string OTP { get; set; }
  public string GameSessionID { get; set; }

  public LobbyToLobby_MatchingStartCustomMatchT() {
    this.MatchingTableID = 0;
    this.MatchID = null;
    this.TeamList = null;
    this.TeamID = null;
    this.DedicatedID = null;
    this.ServerUrl = null;
    this.OTP = null;
    this.GameSessionID = null;
  }
}


}
