// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_AchievementList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_AchievementList GetRootAsSA_AchievementList(ByteBuffer _bb) { return GetRootAsSA_AchievementList(_bb, new SA_AchievementList()); }
  public static SA_AchievementList GetRootAsSA_AchievementList(ByteBuffer _bb, SA_AchievementList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_AchievementList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.AchievementData? AchievementList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.AchievementData?)(new Lobby.AchievementData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int AchievementListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_AchievementList> CreateSA_AchievementList(FlatBufferBuilder builder,
      VectorOffset AchievementListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_AchievementList.AddAchievementList(builder, AchievementListOffset);
    return SA_AchievementList.EndSA_AchievementList(builder);
  }

  public static void StartSA_AchievementList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddAchievementList(FlatBufferBuilder builder, VectorOffset AchievementListOffset) { builder.AddOffset(0, AchievementListOffset.Value, 0); }
  public static void StartAchievementListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Lobby.SA_AchievementList> EndSA_AchievementList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_AchievementList>(o);
  }
  public SA_AchievementListT UnPack() {
    var _o = new SA_AchievementListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_AchievementListT _o) {
    _o.AchievementList = new List<Lobby.AchievementDataT>();
    for (var _j = 0; _j < this.AchievementListLength; ++_j) {_o.AchievementList.Add(this.AchievementList(_j).HasValue ? this.AchievementList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_AchievementList> Pack(FlatBufferBuilder builder, SA_AchievementListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_AchievementList>);
    var _AchievementList = default(VectorOffset);
    if (_o.AchievementList != null) {
      StartAchievementListVector(builder, _o.AchievementList.Count);
      for (var _j = _o.AchievementList.Count - 1; _j >= 0; --_j) { Lobby.AchievementData.Pack(builder, _o.AchievementList[_j]); }
      _AchievementList = builder.EndVector();
    }
    return CreateSA_AchievementList(
      builder,
      _AchievementList);
  }
}

public class SA_AchievementListT
{
  public List<Lobby.AchievementDataT> AchievementList { get; set; }

  public SA_AchievementListT() {
    this.AchievementList = null;
  }
}


}
