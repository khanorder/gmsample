// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_PlayRecordRpgChapterListOther : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_PlayRecordRpgChapterListOther GetRootAsSA_PlayRecordRpgChapterListOther(ByteBuffer _bb) { return GetRootAsSA_PlayRecordRpgChapterListOther(_bb, new SA_PlayRecordRpgChapterListOther()); }
  public static SA_PlayRecordRpgChapterListOther GetRootAsSA_PlayRecordRpgChapterListOther(ByteBuffer _bb, SA_PlayRecordRpgChapterListOther obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_PlayRecordRpgChapterListOther __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TargetUID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ChapterIDList(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ChapterIDListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetChapterIDListBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetChapterIDListBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetChapterIDListArray() { return __p.__vector_as_array<int>(6); }

  public static Offset<Lobby.SA_PlayRecordRpgChapterListOther> CreateSA_PlayRecordRpgChapterListOther(FlatBufferBuilder builder,
      int TargetUID = 0,
      VectorOffset ChapterIDListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SA_PlayRecordRpgChapterListOther.AddChapterIDList(builder, ChapterIDListOffset);
    SA_PlayRecordRpgChapterListOther.AddTargetUID(builder, TargetUID);
    return SA_PlayRecordRpgChapterListOther.EndSA_PlayRecordRpgChapterListOther(builder);
  }

  public static void StartSA_PlayRecordRpgChapterListOther(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTargetUID(FlatBufferBuilder builder, int TargetUID) { builder.AddInt(0, TargetUID, 0); }
  public static void AddChapterIDList(FlatBufferBuilder builder, VectorOffset ChapterIDListOffset) { builder.AddOffset(1, ChapterIDListOffset.Value, 0); }
  public static VectorOffset CreateChapterIDListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateChapterIDListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChapterIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChapterIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartChapterIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.SA_PlayRecordRpgChapterListOther> EndSA_PlayRecordRpgChapterListOther(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_PlayRecordRpgChapterListOther>(o);
  }
  public SA_PlayRecordRpgChapterListOtherT UnPack() {
    var _o = new SA_PlayRecordRpgChapterListOtherT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_PlayRecordRpgChapterListOtherT _o) {
    _o.TargetUID = this.TargetUID;
    _o.ChapterIDList = new List<int>();
    for (var _j = 0; _j < this.ChapterIDListLength; ++_j) {_o.ChapterIDList.Add(this.ChapterIDList(_j));}
  }
  public static Offset<Lobby.SA_PlayRecordRpgChapterListOther> Pack(FlatBufferBuilder builder, SA_PlayRecordRpgChapterListOtherT _o) {
    if (_o == null) return default(Offset<Lobby.SA_PlayRecordRpgChapterListOther>);
    var _ChapterIDList = default(VectorOffset);
    if (_o.ChapterIDList != null) {
      var __ChapterIDList = _o.ChapterIDList.ToArray();
      _ChapterIDList = CreateChapterIDListVector(builder, __ChapterIDList);
    }
    return CreateSA_PlayRecordRpgChapterListOther(
      builder,
      _o.TargetUID,
      _ChapterIDList);
  }
}

public class SA_PlayRecordRpgChapterListOtherT
{
  public int TargetUID { get; set; }
  public List<int> ChapterIDList { get; set; }

  public SA_PlayRecordRpgChapterListOtherT() {
    this.TargetUID = 0;
    this.ChapterIDList = null;
  }
}


}
