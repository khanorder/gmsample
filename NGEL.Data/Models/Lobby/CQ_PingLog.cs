// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_PingLog : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_PingLog GetRootAsCQ_PingLog(ByteBuffer _bb) { return GetRootAsCQ_PingLog(_bb, new CQ_PingLog()); }
  public static CQ_PingLog GetRootAsCQ_PingLog(ByteBuffer _bb, CQ_PingLog obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_PingLog __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.EContentsType ContentsType { get { int o = __p.__offset(4); return o != 0 ? (Lobby.EContentsType)__p.bb.Get(o + __p.bb_pos) : Lobby.EContentsType.None; } }
  public string ServerIP { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetServerIPBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetServerIPBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetServerIPArray() { return __p.__vector_as_array<byte>(6); }
  public float PingAvg { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PingMin { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PingMax { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Lobby.CQ_PingLog> CreateCQ_PingLog(FlatBufferBuilder builder,
      Lobby.EContentsType ContentsType = Lobby.EContentsType.None,
      StringOffset ServerIPOffset = default(StringOffset),
      float PingAvg = 0.0f,
      float PingMin = 0.0f,
      float PingMax = 0.0f) {
    builder.StartTable(5);
    CQ_PingLog.AddPingMax(builder, PingMax);
    CQ_PingLog.AddPingMin(builder, PingMin);
    CQ_PingLog.AddPingAvg(builder, PingAvg);
    CQ_PingLog.AddServerIP(builder, ServerIPOffset);
    CQ_PingLog.AddContentsType(builder, ContentsType);
    return CQ_PingLog.EndCQ_PingLog(builder);
  }

  public static void StartCQ_PingLog(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddContentsType(FlatBufferBuilder builder, Lobby.EContentsType ContentsType) { builder.AddByte(0, (byte)ContentsType, 0); }
  public static void AddServerIP(FlatBufferBuilder builder, StringOffset ServerIPOffset) { builder.AddOffset(1, ServerIPOffset.Value, 0); }
  public static void AddPingAvg(FlatBufferBuilder builder, float PingAvg) { builder.AddFloat(2, PingAvg, 0.0f); }
  public static void AddPingMin(FlatBufferBuilder builder, float PingMin) { builder.AddFloat(3, PingMin, 0.0f); }
  public static void AddPingMax(FlatBufferBuilder builder, float PingMax) { builder.AddFloat(4, PingMax, 0.0f); }
  public static Offset<Lobby.CQ_PingLog> EndCQ_PingLog(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_PingLog>(o);
  }
  public CQ_PingLogT UnPack() {
    var _o = new CQ_PingLogT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_PingLogT _o) {
    _o.ContentsType = this.ContentsType;
    _o.ServerIP = this.ServerIP;
    _o.PingAvg = this.PingAvg;
    _o.PingMin = this.PingMin;
    _o.PingMax = this.PingMax;
  }
  public static Offset<Lobby.CQ_PingLog> Pack(FlatBufferBuilder builder, CQ_PingLogT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_PingLog>);
    var _ServerIP = _o.ServerIP == null ? default(StringOffset) : builder.CreateString(_o.ServerIP);
    return CreateCQ_PingLog(
      builder,
      _o.ContentsType,
      _ServerIP,
      _o.PingAvg,
      _o.PingMin,
      _o.PingMax);
  }
}

public class CQ_PingLogT
{
  public Lobby.EContentsType ContentsType { get; set; }
  public string ServerIP { get; set; }
  public float PingAvg { get; set; }
  public float PingMin { get; set; }
  public float PingMax { get; set; }

  public CQ_PingLogT() {
    this.ContentsType = Lobby.EContentsType.None;
    this.ServerIP = null;
    this.PingAvg = 0.0f;
    this.PingMin = 0.0f;
    this.PingMax = 0.0f;
  }
}


}
