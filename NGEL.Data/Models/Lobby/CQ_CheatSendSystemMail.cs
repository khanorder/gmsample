// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_CheatSendSystemMail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_CheatSendSystemMail GetRootAsCQ_CheatSendSystemMail(ByteBuffer _bb) { return GetRootAsCQ_CheatSendSystemMail(_bb, new CQ_CheatSendSystemMail()); }
  public static CQ_CheatSendSystemMail GetRootAsCQ_CheatSendSystemMail(ByteBuffer _bb, CQ_CheatSendSystemMail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_CheatSendSystemMail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TargetUID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TableID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTableIDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTableIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTableIDArray() { return __p.__vector_as_array<byte>(6); }
  public Lobby.MailRewardInfo? RewardList(int j) { int o = __p.__offset(8); return o != 0 ? (Lobby.MailRewardInfo?)(new Lobby.MailRewardInfo()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int RewardListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.CQ_CheatSendSystemMail> CreateCQ_CheatSendSystemMail(FlatBufferBuilder builder,
      int TargetUID = 0,
      StringOffset TableIDOffset = default(StringOffset),
      VectorOffset RewardListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    CQ_CheatSendSystemMail.AddRewardList(builder, RewardListOffset);
    CQ_CheatSendSystemMail.AddTableID(builder, TableIDOffset);
    CQ_CheatSendSystemMail.AddTargetUID(builder, TargetUID);
    return CQ_CheatSendSystemMail.EndCQ_CheatSendSystemMail(builder);
  }

  public static void StartCQ_CheatSendSystemMail(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTargetUID(FlatBufferBuilder builder, int TargetUID) { builder.AddInt(0, TargetUID, 0); }
  public static void AddTableID(FlatBufferBuilder builder, StringOffset TableIDOffset) { builder.AddOffset(1, TableIDOffset.Value, 0); }
  public static void AddRewardList(FlatBufferBuilder builder, VectorOffset RewardListOffset) { builder.AddOffset(2, RewardListOffset.Value, 0); }
  public static void StartRewardListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Lobby.CQ_CheatSendSystemMail> EndCQ_CheatSendSystemMail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_CheatSendSystemMail>(o);
  }
  public CQ_CheatSendSystemMailT UnPack() {
    var _o = new CQ_CheatSendSystemMailT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_CheatSendSystemMailT _o) {
    _o.TargetUID = this.TargetUID;
    _o.TableID = this.TableID;
    _o.RewardList = new List<Lobby.MailRewardInfoT>();
    for (var _j = 0; _j < this.RewardListLength; ++_j) {_o.RewardList.Add(this.RewardList(_j).HasValue ? this.RewardList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.CQ_CheatSendSystemMail> Pack(FlatBufferBuilder builder, CQ_CheatSendSystemMailT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_CheatSendSystemMail>);
    var _TableID = _o.TableID == null ? default(StringOffset) : builder.CreateString(_o.TableID);
    var _RewardList = default(VectorOffset);
    if (_o.RewardList != null) {
      StartRewardListVector(builder, _o.RewardList.Count);
      for (var _j = _o.RewardList.Count - 1; _j >= 0; --_j) { Lobby.MailRewardInfo.Pack(builder, _o.RewardList[_j]); }
      _RewardList = builder.EndVector();
    }
    return CreateCQ_CheatSendSystemMail(
      builder,
      _o.TargetUID,
      _TableID,
      _RewardList);
  }
}

public class CQ_CheatSendSystemMailT
{
  public int TargetUID { get; set; }
  public string TableID { get; set; }
  public List<Lobby.MailRewardInfoT> RewardList { get; set; }

  public CQ_CheatSendSystemMailT() {
    this.TargetUID = 0;
    this.TableID = null;
    this.RewardList = null;
  }
}


}
