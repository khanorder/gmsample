// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_CheatSetItemCount : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_CheatSetItemCount GetRootAsCQ_CheatSetItemCount(ByteBuffer _bb) { return GetRootAsCQ_CheatSetItemCount(_bb, new CQ_CheatSetItemCount()); }
  public static CQ_CheatSetItemCount GetRootAsCQ_CheatSetItemCount(ByteBuffer _bb, CQ_CheatSetItemCount obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_CheatSetItemCount __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Count { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.CQ_CheatSetItemCount> CreateCQ_CheatSetItemCount(FlatBufferBuilder builder,
      int ItemID = 0,
      int Count = 0) {
    builder.StartTable(2);
    CQ_CheatSetItemCount.AddCount(builder, Count);
    CQ_CheatSetItemCount.AddItemID(builder, ItemID);
    return CQ_CheatSetItemCount.EndCQ_CheatSetItemCount(builder);
  }

  public static void StartCQ_CheatSetItemCount(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(0, ItemID, 0); }
  public static void AddCount(FlatBufferBuilder builder, int Count) { builder.AddInt(1, Count, 0); }
  public static Offset<Lobby.CQ_CheatSetItemCount> EndCQ_CheatSetItemCount(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_CheatSetItemCount>(o);
  }
  public CQ_CheatSetItemCountT UnPack() {
    var _o = new CQ_CheatSetItemCountT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_CheatSetItemCountT _o) {
    _o.ItemID = this.ItemID;
    _o.Count = this.Count;
  }
  public static Offset<Lobby.CQ_CheatSetItemCount> Pack(FlatBufferBuilder builder, CQ_CheatSetItemCountT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_CheatSetItemCount>);
    return CreateCQ_CheatSetItemCount(
      builder,
      _o.ItemID,
      _o.Count);
  }
}

public class CQ_CheatSetItemCountT
{
  public int ItemID { get; set; }
  public int Count { get; set; }

  public CQ_CheatSetItemCountT() {
    this.ItemID = 0;
    this.Count = 0;
  }
}


}
