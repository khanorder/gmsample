// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_TradeStart : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_TradeStart GetRootAsCQ_TradeStart(ByteBuffer _bb) { return GetRootAsCQ_TradeStart(_bb, new CQ_TradeStart()); }
  public static CQ_TradeStart GetRootAsCQ_TradeStart(ByteBuffer _bb, CQ_TradeStart obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_TradeStart __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.ETradeType TradeType { get { int o = __p.__offset(4); return o != 0 ? (Lobby.ETradeType)__p.bb.Get(o + __p.bb_pos) : Lobby.ETradeType.None; } }
  public Lobby.ItemData? TradeItemList(int j) { int o = __p.__offset(6); return o != 0 ? (Lobby.ItemData?)(new Lobby.ItemData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int TradeItemListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.CQ_TradeStart> CreateCQ_TradeStart(FlatBufferBuilder builder,
      Lobby.ETradeType TradeType = Lobby.ETradeType.None,
      VectorOffset TradeItemListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CQ_TradeStart.AddTradeItemList(builder, TradeItemListOffset);
    CQ_TradeStart.AddTradeType(builder, TradeType);
    return CQ_TradeStart.EndCQ_TradeStart(builder);
  }

  public static void StartCQ_TradeStart(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTradeType(FlatBufferBuilder builder, Lobby.ETradeType TradeType) { builder.AddByte(0, (byte)TradeType, 0); }
  public static void AddTradeItemList(FlatBufferBuilder builder, VectorOffset TradeItemListOffset) { builder.AddOffset(1, TradeItemListOffset.Value, 0); }
  public static void StartTradeItemListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.CQ_TradeStart> EndCQ_TradeStart(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_TradeStart>(o);
  }
  public CQ_TradeStartT UnPack() {
    var _o = new CQ_TradeStartT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_TradeStartT _o) {
    _o.TradeType = this.TradeType;
    _o.TradeItemList = new List<Lobby.ItemDataT>();
    for (var _j = 0; _j < this.TradeItemListLength; ++_j) {_o.TradeItemList.Add(this.TradeItemList(_j).HasValue ? this.TradeItemList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.CQ_TradeStart> Pack(FlatBufferBuilder builder, CQ_TradeStartT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_TradeStart>);
    var _TradeItemList = default(VectorOffset);
    if (_o.TradeItemList != null) {
      StartTradeItemListVector(builder, _o.TradeItemList.Count);
      for (var _j = _o.TradeItemList.Count - 1; _j >= 0; --_j) { Lobby.ItemData.Pack(builder, _o.TradeItemList[_j]); }
      _TradeItemList = builder.EndVector();
    }
    return CreateCQ_TradeStart(
      builder,
      _o.TradeType,
      _TradeItemList);
  }
}

public class CQ_TradeStartT
{
  public Lobby.ETradeType TradeType { get; set; }
  public List<Lobby.ItemDataT> TradeItemList { get; set; }

  public CQ_TradeStartT() {
    this.TradeType = Lobby.ETradeType.None;
    this.TradeItemList = null;
  }
}


}
