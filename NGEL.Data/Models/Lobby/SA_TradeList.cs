// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_TradeList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_TradeList GetRootAsSA_TradeList(ByteBuffer _bb) { return GetRootAsSA_TradeList(_bb, new SA_TradeList()); }
  public static SA_TradeList GetRootAsSA_TradeList(ByteBuffer _bb, SA_TradeList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_TradeList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.TradeData? TradeList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.TradeData?)(new Lobby.TradeData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TradeListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_TradeList> CreateSA_TradeList(FlatBufferBuilder builder,
      VectorOffset TradeListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_TradeList.AddTradeList(builder, TradeListOffset);
    return SA_TradeList.EndSA_TradeList(builder);
  }

  public static void StartSA_TradeList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTradeList(FlatBufferBuilder builder, VectorOffset TradeListOffset) { builder.AddOffset(0, TradeListOffset.Value, 0); }
  public static VectorOffset CreateTradeListVector(FlatBufferBuilder builder, Offset<Lobby.TradeData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTradeListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.TradeData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTradeListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.TradeData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTradeListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.TradeData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTradeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.SA_TradeList> EndSA_TradeList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_TradeList>(o);
  }
  public SA_TradeListT UnPack() {
    var _o = new SA_TradeListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_TradeListT _o) {
    _o.TradeList = new List<Lobby.TradeDataT>();
    for (var _j = 0; _j < this.TradeListLength; ++_j) {_o.TradeList.Add(this.TradeList(_j).HasValue ? this.TradeList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_TradeList> Pack(FlatBufferBuilder builder, SA_TradeListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_TradeList>);
    var _TradeList = default(VectorOffset);
    if (_o.TradeList != null) {
      var __TradeList = new Offset<Lobby.TradeData>[_o.TradeList.Count];
      for (var _j = 0; _j < __TradeList.Length; ++_j) { __TradeList[_j] = Lobby.TradeData.Pack(builder, _o.TradeList[_j]); }
      _TradeList = CreateTradeListVector(builder, __TradeList);
    }
    return CreateSA_TradeList(
      builder,
      _TradeList);
  }
}

public class SA_TradeListT
{
  public List<Lobby.TradeDataT> TradeList { get; set; }

  public SA_TradeListT() {
    this.TradeList = null;
  }
}


}
