// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_CheatAllSkin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_CheatAllSkin GetRootAsSA_CheatAllSkin(ByteBuffer _bb) { return GetRootAsSA_CheatAllSkin(_bb, new SA_CheatAllSkin()); }
  public static SA_CheatAllSkin GetRootAsSA_CheatAllSkin(ByteBuffer _bb, SA_CheatAllSkin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_CheatAllSkin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.HeroSkinData? NewSkinList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.HeroSkinData?)(new Lobby.HeroSkinData()).__assign(__p.__vector(o) + j * 20, __p.bb) : null; }
  public int NewSkinListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_CheatAllSkin> CreateSA_CheatAllSkin(FlatBufferBuilder builder,
      VectorOffset newSkinListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_CheatAllSkin.AddNewSkinList(builder, newSkinListOffset);
    return SA_CheatAllSkin.EndSA_CheatAllSkin(builder);
  }

  public static void StartSA_CheatAllSkin(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddNewSkinList(FlatBufferBuilder builder, VectorOffset newSkinListOffset) { builder.AddOffset(0, newSkinListOffset.Value, 0); }
  public static void StartNewSkinListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(20, numElems, 4); }
  public static Offset<Lobby.SA_CheatAllSkin> EndSA_CheatAllSkin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_CheatAllSkin>(o);
  }
  public SA_CheatAllSkinT UnPack() {
    var _o = new SA_CheatAllSkinT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_CheatAllSkinT _o) {
    _o.NewSkinList = new List<Lobby.HeroSkinDataT>();
    for (var _j = 0; _j < this.NewSkinListLength; ++_j) {_o.NewSkinList.Add(this.NewSkinList(_j).HasValue ? this.NewSkinList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_CheatAllSkin> Pack(FlatBufferBuilder builder, SA_CheatAllSkinT _o) {
    if (_o == null) return default(Offset<Lobby.SA_CheatAllSkin>);
    var _newSkinList = default(VectorOffset);
    if (_o.NewSkinList != null) {
      StartNewSkinListVector(builder, _o.NewSkinList.Count);
      for (var _j = _o.NewSkinList.Count - 1; _j >= 0; --_j) { Lobby.HeroSkinData.Pack(builder, _o.NewSkinList[_j]); }
      _newSkinList = builder.EndVector();
    }
    return CreateSA_CheatAllSkin(
      builder,
      _newSkinList);
  }
}

public class SA_CheatAllSkinT
{
  public List<Lobby.HeroSkinDataT> NewSkinList { get; set; }

  public SA_CheatAllSkinT() {
    this.NewSkinList = null;
  }
}


}
