// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_WeaponCategoryList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_WeaponCategoryList GetRootAsSA_WeaponCategoryList(ByteBuffer _bb) { return GetRootAsSA_WeaponCategoryList(_bb, new SA_WeaponCategoryList()); }
  public static SA_WeaponCategoryList GetRootAsSA_WeaponCategoryList(ByteBuffer _bb, SA_WeaponCategoryList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_WeaponCategoryList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.WeaponCategoryData? WeaponCategoryList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.WeaponCategoryData?)(new Lobby.WeaponCategoryData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int WeaponCategoryListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_WeaponCategoryList> CreateSA_WeaponCategoryList(FlatBufferBuilder builder,
      VectorOffset WeaponCategoryListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_WeaponCategoryList.AddWeaponCategoryList(builder, WeaponCategoryListOffset);
    return SA_WeaponCategoryList.EndSA_WeaponCategoryList(builder);
  }

  public static void StartSA_WeaponCategoryList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddWeaponCategoryList(FlatBufferBuilder builder, VectorOffset WeaponCategoryListOffset) { builder.AddOffset(0, WeaponCategoryListOffset.Value, 0); }
  public static void StartWeaponCategoryListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.SA_WeaponCategoryList> EndSA_WeaponCategoryList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_WeaponCategoryList>(o);
  }
  public SA_WeaponCategoryListT UnPack() {
    var _o = new SA_WeaponCategoryListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_WeaponCategoryListT _o) {
    _o.WeaponCategoryList = new List<Lobby.WeaponCategoryDataT>();
    for (var _j = 0; _j < this.WeaponCategoryListLength; ++_j) {_o.WeaponCategoryList.Add(this.WeaponCategoryList(_j).HasValue ? this.WeaponCategoryList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_WeaponCategoryList> Pack(FlatBufferBuilder builder, SA_WeaponCategoryListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_WeaponCategoryList>);
    var _WeaponCategoryList = default(VectorOffset);
    if (_o.WeaponCategoryList != null) {
      StartWeaponCategoryListVector(builder, _o.WeaponCategoryList.Count);
      for (var _j = _o.WeaponCategoryList.Count - 1; _j >= 0; --_j) { Lobby.WeaponCategoryData.Pack(builder, _o.WeaponCategoryList[_j]); }
      _WeaponCategoryList = builder.EndVector();
    }
    return CreateSA_WeaponCategoryList(
      builder,
      _WeaponCategoryList);
  }
}

public class SA_WeaponCategoryListT
{
  public List<Lobby.WeaponCategoryDataT> WeaponCategoryList { get; set; }

  public SA_WeaponCategoryListT() {
    this.WeaponCategoryList = null;
  }
}


}
