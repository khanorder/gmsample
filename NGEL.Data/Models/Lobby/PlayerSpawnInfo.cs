// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlayerSpawnInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static PlayerSpawnInfo GetRootAsPlayerSpawnInfo(ByteBuffer _bb) { return GetRootAsPlayerSpawnInfo(_bb, new PlayerSpawnInfo()); }
  public static PlayerSpawnInfo GetRootAsPlayerSpawnInfo(ByteBuffer _bb, PlayerSpawnInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerSpawnInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LobbyID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLobbyIDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLobbyIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLobbyIDArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<Lobby.PlayerSpawnInfo> CreatePlayerSpawnInfo(FlatBufferBuilder builder,
      int UID = 0,
      StringOffset LobbyIDOffset = default(StringOffset)) {
    builder.StartTable(2);
    PlayerSpawnInfo.AddLobbyID(builder, LobbyIDOffset);
    PlayerSpawnInfo.AddUID(builder, UID);
    return PlayerSpawnInfo.EndPlayerSpawnInfo(builder);
  }

  public static void StartPlayerSpawnInfo(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUID(FlatBufferBuilder builder, int UID) { builder.AddInt(0, UID, 0); }
  public static void AddLobbyID(FlatBufferBuilder builder, StringOffset LobbyIDOffset) { builder.AddOffset(1, LobbyIDOffset.Value, 0); }
  public static Offset<Lobby.PlayerSpawnInfo> EndPlayerSpawnInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.PlayerSpawnInfo>(o);
  }
  public PlayerSpawnInfoT UnPack() {
    var _o = new PlayerSpawnInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlayerSpawnInfoT _o) {
    _o.UID = this.UID;
    _o.LobbyID = this.LobbyID;
  }
  public static Offset<Lobby.PlayerSpawnInfo> Pack(FlatBufferBuilder builder, PlayerSpawnInfoT _o) {
    if (_o == null) return default(Offset<Lobby.PlayerSpawnInfo>);
    var _LobbyID = _o.LobbyID == null ? default(StringOffset) : builder.CreateString(_o.LobbyID);
    return CreatePlayerSpawnInfo(
      builder,
      _o.UID,
      _LobbyID);
  }
}

public class PlayerSpawnInfoT
{
  public int UID { get; set; }
  public string LobbyID { get; set; }

  public PlayerSpawnInfoT() {
    this.UID = 0;
    this.LobbyID = null;
  }
}


}
