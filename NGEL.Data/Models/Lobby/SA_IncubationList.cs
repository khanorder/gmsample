// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_IncubationList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_IncubationList GetRootAsSA_IncubationList(ByteBuffer _bb) { return GetRootAsSA_IncubationList(_bb, new SA_IncubationList()); }
  public static SA_IncubationList GetRootAsSA_IncubationList(ByteBuffer _bb, SA_IncubationList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_IncubationList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.IncubationData? IncubatorList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.IncubationData?)(new Lobby.IncubationData()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int IncubatorListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_IncubationList> CreateSA_IncubationList(FlatBufferBuilder builder,
      VectorOffset IncubatorListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_IncubationList.AddIncubatorList(builder, IncubatorListOffset);
    return SA_IncubationList.EndSA_IncubationList(builder);
  }

  public static void StartSA_IncubationList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddIncubatorList(FlatBufferBuilder builder, VectorOffset IncubatorListOffset) { builder.AddOffset(0, IncubatorListOffset.Value, 0); }
  public static void StartIncubatorListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static Offset<Lobby.SA_IncubationList> EndSA_IncubationList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_IncubationList>(o);
  }
  public SA_IncubationListT UnPack() {
    var _o = new SA_IncubationListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_IncubationListT _o) {
    _o.IncubatorList = new List<Lobby.IncubationDataT>();
    for (var _j = 0; _j < this.IncubatorListLength; ++_j) {_o.IncubatorList.Add(this.IncubatorList(_j).HasValue ? this.IncubatorList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_IncubationList> Pack(FlatBufferBuilder builder, SA_IncubationListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_IncubationList>);
    var _IncubatorList = default(VectorOffset);
    if (_o.IncubatorList != null) {
      StartIncubatorListVector(builder, _o.IncubatorList.Count);
      for (var _j = _o.IncubatorList.Count - 1; _j >= 0; --_j) { Lobby.IncubationData.Pack(builder, _o.IncubatorList[_j]); }
      _IncubatorList = builder.EndVector();
    }
    return CreateSA_IncubationList(
      builder,
      _IncubatorList);
  }
}

public class SA_IncubationListT
{
  public List<Lobby.IncubationDataT> IncubatorList { get; set; }

  public SA_IncubationListT() {
    this.IncubatorList = null;
  }
}


}
