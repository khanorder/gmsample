// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DiceGameFinishInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static DiceGameFinishInfo GetRootAsDiceGameFinishInfo(ByteBuffer _bb) { return GetRootAsDiceGameFinishInfo(_bb, new DiceGameFinishInfo()); }
  public static DiceGameFinishInfo GetRootAsDiceGameFinishInfo(ByteBuffer _bb, DiceGameFinishInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DiceGameFinishInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OpponentUID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string OpponentNickName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpponentNickNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOpponentNickNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOpponentNickNameArray() { return __p.__vector_as_array<byte>(8); }
  public string MatchID { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchIDBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMatchIDBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMatchIDArray() { return __p.__vector_as_array<byte>(10); }
  public bool Winning { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RemainTurnCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RemainHp { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RemainAttack { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RemainDefence { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MyBlockCount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RemainBlockCount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsALive { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Lobby.DiceGameFinishInfo> CreateDiceGameFinishInfo(FlatBufferBuilder builder,
      int UID = 0,
      int OpponentUID = 0,
      StringOffset OpponentNickNameOffset = default(StringOffset),
      StringOffset MatchIDOffset = default(StringOffset),
      bool Winning = false,
      int RemainTurnCount = 0,
      int RemainHp = 0,
      int RemainAttack = 0,
      int RemainDefence = 0,
      int MyBlockCount = 0,
      int RemainBlockCount = 0,
      bool IsALive = false) {
    builder.StartTable(12);
    DiceGameFinishInfo.AddRemainBlockCount(builder, RemainBlockCount);
    DiceGameFinishInfo.AddMyBlockCount(builder, MyBlockCount);
    DiceGameFinishInfo.AddRemainDefence(builder, RemainDefence);
    DiceGameFinishInfo.AddRemainAttack(builder, RemainAttack);
    DiceGameFinishInfo.AddRemainHp(builder, RemainHp);
    DiceGameFinishInfo.AddRemainTurnCount(builder, RemainTurnCount);
    DiceGameFinishInfo.AddMatchID(builder, MatchIDOffset);
    DiceGameFinishInfo.AddOpponentNickName(builder, OpponentNickNameOffset);
    DiceGameFinishInfo.AddOpponentUID(builder, OpponentUID);
    DiceGameFinishInfo.AddUID(builder, UID);
    DiceGameFinishInfo.AddIsALive(builder, IsALive);
    DiceGameFinishInfo.AddWinning(builder, Winning);
    return DiceGameFinishInfo.EndDiceGameFinishInfo(builder);
  }

  public static void StartDiceGameFinishInfo(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddUID(FlatBufferBuilder builder, int UID) { builder.AddInt(0, UID, 0); }
  public static void AddOpponentUID(FlatBufferBuilder builder, int OpponentUID) { builder.AddInt(1, OpponentUID, 0); }
  public static void AddOpponentNickName(FlatBufferBuilder builder, StringOffset OpponentNickNameOffset) { builder.AddOffset(2, OpponentNickNameOffset.Value, 0); }
  public static void AddMatchID(FlatBufferBuilder builder, StringOffset MatchIDOffset) { builder.AddOffset(3, MatchIDOffset.Value, 0); }
  public static void AddWinning(FlatBufferBuilder builder, bool Winning) { builder.AddBool(4, Winning, false); }
  public static void AddRemainTurnCount(FlatBufferBuilder builder, int RemainTurnCount) { builder.AddInt(5, RemainTurnCount, 0); }
  public static void AddRemainHp(FlatBufferBuilder builder, int RemainHp) { builder.AddInt(6, RemainHp, 0); }
  public static void AddRemainAttack(FlatBufferBuilder builder, int RemainAttack) { builder.AddInt(7, RemainAttack, 0); }
  public static void AddRemainDefence(FlatBufferBuilder builder, int RemainDefence) { builder.AddInt(8, RemainDefence, 0); }
  public static void AddMyBlockCount(FlatBufferBuilder builder, int MyBlockCount) { builder.AddInt(9, MyBlockCount, 0); }
  public static void AddRemainBlockCount(FlatBufferBuilder builder, int RemainBlockCount) { builder.AddInt(10, RemainBlockCount, 0); }
  public static void AddIsALive(FlatBufferBuilder builder, bool IsALive) { builder.AddBool(11, IsALive, false); }
  public static Offset<Lobby.DiceGameFinishInfo> EndDiceGameFinishInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.DiceGameFinishInfo>(o);
  }
  public DiceGameFinishInfoT UnPack() {
    var _o = new DiceGameFinishInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DiceGameFinishInfoT _o) {
    _o.UID = this.UID;
    _o.OpponentUID = this.OpponentUID;
    _o.OpponentNickName = this.OpponentNickName;
    _o.MatchID = this.MatchID;
    _o.Winning = this.Winning;
    _o.RemainTurnCount = this.RemainTurnCount;
    _o.RemainHp = this.RemainHp;
    _o.RemainAttack = this.RemainAttack;
    _o.RemainDefence = this.RemainDefence;
    _o.MyBlockCount = this.MyBlockCount;
    _o.RemainBlockCount = this.RemainBlockCount;
    _o.IsALive = this.IsALive;
  }
  public static Offset<Lobby.DiceGameFinishInfo> Pack(FlatBufferBuilder builder, DiceGameFinishInfoT _o) {
    if (_o == null) return default(Offset<Lobby.DiceGameFinishInfo>);
    var _OpponentNickName = _o.OpponentNickName == null ? default(StringOffset) : builder.CreateString(_o.OpponentNickName);
    var _MatchID = _o.MatchID == null ? default(StringOffset) : builder.CreateString(_o.MatchID);
    return CreateDiceGameFinishInfo(
      builder,
      _o.UID,
      _o.OpponentUID,
      _OpponentNickName,
      _MatchID,
      _o.Winning,
      _o.RemainTurnCount,
      _o.RemainHp,
      _o.RemainAttack,
      _o.RemainDefence,
      _o.MyBlockCount,
      _o.RemainBlockCount,
      _o.IsALive);
  }
}

public class DiceGameFinishInfoT
{
  public int UID { get; set; }
  public int OpponentUID { get; set; }
  public string OpponentNickName { get; set; }
  public string MatchID { get; set; }
  public bool Winning { get; set; }
  public int RemainTurnCount { get; set; }
  public int RemainHp { get; set; }
  public int RemainAttack { get; set; }
  public int RemainDefence { get; set; }
  public int MyBlockCount { get; set; }
  public int RemainBlockCount { get; set; }
  public bool IsALive { get; set; }

  public DiceGameFinishInfoT() {
    this.UID = 0;
    this.OpponentUID = 0;
    this.OpponentNickName = null;
    this.MatchID = null;
    this.Winning = false;
    this.RemainTurnCount = 0;
    this.RemainHp = 0;
    this.RemainAttack = 0;
    this.RemainDefence = 0;
    this.MyBlockCount = 0;
    this.RemainBlockCount = 0;
    this.IsALive = false;
  }
}


}
