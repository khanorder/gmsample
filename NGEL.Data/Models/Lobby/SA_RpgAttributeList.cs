// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_RpgAttributeList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_RpgAttributeList GetRootAsSA_RpgAttributeList(ByteBuffer _bb) { return GetRootAsSA_RpgAttributeList(_bb, new SA_RpgAttributeList()); }
  public static SA_RpgAttributeList GetRootAsSA_RpgAttributeList(ByteBuffer _bb, SA_RpgAttributeList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_RpgAttributeList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.AttributeData? AttributeList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.AttributeData?)(new Lobby.AttributeData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int AttributeListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_RpgAttributeList> CreateSA_RpgAttributeList(FlatBufferBuilder builder,
      VectorOffset AttributeListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_RpgAttributeList.AddAttributeList(builder, AttributeListOffset);
    return SA_RpgAttributeList.EndSA_RpgAttributeList(builder);
  }

  public static void StartSA_RpgAttributeList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddAttributeList(FlatBufferBuilder builder, VectorOffset AttributeListOffset) { builder.AddOffset(0, AttributeListOffset.Value, 0); }
  public static void StartAttributeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.SA_RpgAttributeList> EndSA_RpgAttributeList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_RpgAttributeList>(o);
  }
  public SA_RpgAttributeListT UnPack() {
    var _o = new SA_RpgAttributeListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_RpgAttributeListT _o) {
    _o.AttributeList = new List<Lobby.AttributeDataT>();
    for (var _j = 0; _j < this.AttributeListLength; ++_j) {_o.AttributeList.Add(this.AttributeList(_j).HasValue ? this.AttributeList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_RpgAttributeList> Pack(FlatBufferBuilder builder, SA_RpgAttributeListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_RpgAttributeList>);
    var _AttributeList = default(VectorOffset);
    if (_o.AttributeList != null) {
      StartAttributeListVector(builder, _o.AttributeList.Count);
      for (var _j = _o.AttributeList.Count - 1; _j >= 0; --_j) { Lobby.AttributeData.Pack(builder, _o.AttributeList[_j]); }
      _AttributeList = builder.EndVector();
    }
    return CreateSA_RpgAttributeList(
      builder,
      _AttributeList);
  }
}

public class SA_RpgAttributeListT
{
  public List<Lobby.AttributeDataT> AttributeList { get; set; }

  public SA_RpgAttributeListT() {
    this.AttributeList = null;
  }
}


}
