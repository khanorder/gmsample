// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_RpgRoomEnd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_RpgRoomEnd GetRootAsCQ_RpgRoomEnd(ByteBuffer _bb) { return GetRootAsCQ_RpgRoomEnd(_bb, new CQ_RpgRoomEnd()); }
  public static CQ_RpgRoomEnd GetRootAsCQ_RpgRoomEnd(ByteBuffer _bb, CQ_RpgRoomEnd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_RpgRoomEnd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LevelID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterLevel { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FragmentCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.MonsterData? MonsterList(int j) { int o = __p.__offset(10); return o != 0 ? (Lobby.MonsterData?)(new Lobby.MonsterData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int MonsterListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int WeaponIDList(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int WeaponIDListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetWeaponIDListBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetWeaponIDListBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetWeaponIDListArray() { return __p.__vector_as_array<int>(12); }
  public int ArtifactIDList(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArtifactIDListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetArtifactIDListBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetArtifactIDListBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetArtifactIDListArray() { return __p.__vector_as_array<int>(14); }
  public Lobby.ItemData? ItemList(int j) { int o = __p.__offset(16); return o != 0 ? (Lobby.ItemData?)(new Lobby.ItemData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ItemListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Lobby.AssetData? AssetList(int j) { int o = __p.__offset(18); return o != 0 ? (Lobby.AssetData?)(new Lobby.AssetData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int AssetListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Lobby.AssetData? ConsumeAssetList(int j) { int o = __p.__offset(20); return o != 0 ? (Lobby.AssetData?)(new Lobby.AssetData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int ConsumeAssetListLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int LevelupBuffList(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LevelupBuffListLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLevelupBuffListBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetLevelupBuffListBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetLevelupBuffListArray() { return __p.__vector_as_array<int>(22); }
  public bool IsRoomClear { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Lobby.CQ_RpgRoomEnd> CreateCQ_RpgRoomEnd(FlatBufferBuilder builder,
      int LevelID = 0,
      int CharacterLevel = 0,
      int FragmentCount = 0,
      VectorOffset MonsterListOffset = default(VectorOffset),
      VectorOffset WeaponIDListOffset = default(VectorOffset),
      VectorOffset ArtifactIDListOffset = default(VectorOffset),
      VectorOffset ItemListOffset = default(VectorOffset),
      VectorOffset AssetListOffset = default(VectorOffset),
      VectorOffset ConsumeAssetListOffset = default(VectorOffset),
      VectorOffset LevelupBuffListOffset = default(VectorOffset),
      bool IsRoomClear = false) {
    builder.StartTable(11);
    CQ_RpgRoomEnd.AddLevelupBuffList(builder, LevelupBuffListOffset);
    CQ_RpgRoomEnd.AddConsumeAssetList(builder, ConsumeAssetListOffset);
    CQ_RpgRoomEnd.AddAssetList(builder, AssetListOffset);
    CQ_RpgRoomEnd.AddItemList(builder, ItemListOffset);
    CQ_RpgRoomEnd.AddArtifactIDList(builder, ArtifactIDListOffset);
    CQ_RpgRoomEnd.AddWeaponIDList(builder, WeaponIDListOffset);
    CQ_RpgRoomEnd.AddMonsterList(builder, MonsterListOffset);
    CQ_RpgRoomEnd.AddFragmentCount(builder, FragmentCount);
    CQ_RpgRoomEnd.AddCharacterLevel(builder, CharacterLevel);
    CQ_RpgRoomEnd.AddLevelID(builder, LevelID);
    CQ_RpgRoomEnd.AddIsRoomClear(builder, IsRoomClear);
    return CQ_RpgRoomEnd.EndCQ_RpgRoomEnd(builder);
  }

  public static void StartCQ_RpgRoomEnd(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddLevelID(FlatBufferBuilder builder, int LevelID) { builder.AddInt(0, LevelID, 0); }
  public static void AddCharacterLevel(FlatBufferBuilder builder, int CharacterLevel) { builder.AddInt(1, CharacterLevel, 0); }
  public static void AddFragmentCount(FlatBufferBuilder builder, int FragmentCount) { builder.AddInt(2, FragmentCount, 0); }
  public static void AddMonsterList(FlatBufferBuilder builder, VectorOffset MonsterListOffset) { builder.AddOffset(3, MonsterListOffset.Value, 0); }
  public static void StartMonsterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddWeaponIDList(FlatBufferBuilder builder, VectorOffset WeaponIDListOffset) { builder.AddOffset(4, WeaponIDListOffset.Value, 0); }
  public static VectorOffset CreateWeaponIDListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateWeaponIDListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddArtifactIDList(FlatBufferBuilder builder, VectorOffset ArtifactIDListOffset) { builder.AddOffset(5, ArtifactIDListOffset.Value, 0); }
  public static VectorOffset CreateArtifactIDListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArtifactIDListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArtifactIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArtifactIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartArtifactIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItemList(FlatBufferBuilder builder, VectorOffset ItemListOffset) { builder.AddOffset(6, ItemListOffset.Value, 0); }
  public static void StartItemListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddAssetList(FlatBufferBuilder builder, VectorOffset AssetListOffset) { builder.AddOffset(7, AssetListOffset.Value, 0); }
  public static void StartAssetListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddConsumeAssetList(FlatBufferBuilder builder, VectorOffset ConsumeAssetListOffset) { builder.AddOffset(8, ConsumeAssetListOffset.Value, 0); }
  public static void StartConsumeAssetListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddLevelupBuffList(FlatBufferBuilder builder, VectorOffset LevelupBuffListOffset) { builder.AddOffset(9, LevelupBuffListOffset.Value, 0); }
  public static VectorOffset CreateLevelupBuffListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLevelupBuffListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelupBuffListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLevelupBuffListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLevelupBuffListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsRoomClear(FlatBufferBuilder builder, bool IsRoomClear) { builder.AddBool(10, IsRoomClear, false); }
  public static Offset<Lobby.CQ_RpgRoomEnd> EndCQ_RpgRoomEnd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_RpgRoomEnd>(o);
  }
  public CQ_RpgRoomEndT UnPack() {
    var _o = new CQ_RpgRoomEndT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_RpgRoomEndT _o) {
    _o.LevelID = this.LevelID;
    _o.CharacterLevel = this.CharacterLevel;
    _o.FragmentCount = this.FragmentCount;
    _o.MonsterList = new List<Lobby.MonsterDataT>();
    for (var _j = 0; _j < this.MonsterListLength; ++_j) {_o.MonsterList.Add(this.MonsterList(_j).HasValue ? this.MonsterList(_j).Value.UnPack() : null);}
    _o.WeaponIDList = new List<int>();
    for (var _j = 0; _j < this.WeaponIDListLength; ++_j) {_o.WeaponIDList.Add(this.WeaponIDList(_j));}
    _o.ArtifactIDList = new List<int>();
    for (var _j = 0; _j < this.ArtifactIDListLength; ++_j) {_o.ArtifactIDList.Add(this.ArtifactIDList(_j));}
    _o.ItemList = new List<Lobby.ItemDataT>();
    for (var _j = 0; _j < this.ItemListLength; ++_j) {_o.ItemList.Add(this.ItemList(_j).HasValue ? this.ItemList(_j).Value.UnPack() : null);}
    _o.AssetList = new List<Lobby.AssetDataT>();
    for (var _j = 0; _j < this.AssetListLength; ++_j) {_o.AssetList.Add(this.AssetList(_j).HasValue ? this.AssetList(_j).Value.UnPack() : null);}
    _o.ConsumeAssetList = new List<Lobby.AssetDataT>();
    for (var _j = 0; _j < this.ConsumeAssetListLength; ++_j) {_o.ConsumeAssetList.Add(this.ConsumeAssetList(_j).HasValue ? this.ConsumeAssetList(_j).Value.UnPack() : null);}
    _o.LevelupBuffList = new List<int>();
    for (var _j = 0; _j < this.LevelupBuffListLength; ++_j) {_o.LevelupBuffList.Add(this.LevelupBuffList(_j));}
    _o.IsRoomClear = this.IsRoomClear;
  }
  public static Offset<Lobby.CQ_RpgRoomEnd> Pack(FlatBufferBuilder builder, CQ_RpgRoomEndT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_RpgRoomEnd>);
    var _MonsterList = default(VectorOffset);
    if (_o.MonsterList != null) {
      StartMonsterListVector(builder, _o.MonsterList.Count);
      for (var _j = _o.MonsterList.Count - 1; _j >= 0; --_j) { Lobby.MonsterData.Pack(builder, _o.MonsterList[_j]); }
      _MonsterList = builder.EndVector();
    }
    var _WeaponIDList = default(VectorOffset);
    if (_o.WeaponIDList != null) {
      var __WeaponIDList = _o.WeaponIDList.ToArray();
      _WeaponIDList = CreateWeaponIDListVector(builder, __WeaponIDList);
    }
    var _ArtifactIDList = default(VectorOffset);
    if (_o.ArtifactIDList != null) {
      var __ArtifactIDList = _o.ArtifactIDList.ToArray();
      _ArtifactIDList = CreateArtifactIDListVector(builder, __ArtifactIDList);
    }
    var _ItemList = default(VectorOffset);
    if (_o.ItemList != null) {
      StartItemListVector(builder, _o.ItemList.Count);
      for (var _j = _o.ItemList.Count - 1; _j >= 0; --_j) { Lobby.ItemData.Pack(builder, _o.ItemList[_j]); }
      _ItemList = builder.EndVector();
    }
    var _AssetList = default(VectorOffset);
    if (_o.AssetList != null) {
      StartAssetListVector(builder, _o.AssetList.Count);
      for (var _j = _o.AssetList.Count - 1; _j >= 0; --_j) { Lobby.AssetData.Pack(builder, _o.AssetList[_j]); }
      _AssetList = builder.EndVector();
    }
    var _ConsumeAssetList = default(VectorOffset);
    if (_o.ConsumeAssetList != null) {
      StartConsumeAssetListVector(builder, _o.ConsumeAssetList.Count);
      for (var _j = _o.ConsumeAssetList.Count - 1; _j >= 0; --_j) { Lobby.AssetData.Pack(builder, _o.ConsumeAssetList[_j]); }
      _ConsumeAssetList = builder.EndVector();
    }
    var _LevelupBuffList = default(VectorOffset);
    if (_o.LevelupBuffList != null) {
      var __LevelupBuffList = _o.LevelupBuffList.ToArray();
      _LevelupBuffList = CreateLevelupBuffListVector(builder, __LevelupBuffList);
    }
    return CreateCQ_RpgRoomEnd(
      builder,
      _o.LevelID,
      _o.CharacterLevel,
      _o.FragmentCount,
      _MonsterList,
      _WeaponIDList,
      _ArtifactIDList,
      _ItemList,
      _AssetList,
      _ConsumeAssetList,
      _LevelupBuffList,
      _o.IsRoomClear);
  }
}

public class CQ_RpgRoomEndT
{
  public int LevelID { get; set; }
  public int CharacterLevel { get; set; }
  public int FragmentCount { get; set; }
  public List<Lobby.MonsterDataT> MonsterList { get; set; }
  public List<int> WeaponIDList { get; set; }
  public List<int> ArtifactIDList { get; set; }
  public List<Lobby.ItemDataT> ItemList { get; set; }
  public List<Lobby.AssetDataT> AssetList { get; set; }
  public List<Lobby.AssetDataT> ConsumeAssetList { get; set; }
  public List<int> LevelupBuffList { get; set; }
  public bool IsRoomClear { get; set; }

  public CQ_RpgRoomEndT() {
    this.LevelID = 0;
    this.CharacterLevel = 0;
    this.FragmentCount = 0;
    this.MonsterList = null;
    this.WeaponIDList = null;
    this.ArtifactIDList = null;
    this.ItemList = null;
    this.AssetList = null;
    this.ConsumeAssetList = null;
    this.LevelupBuffList = null;
    this.IsRoomClear = false;
  }
}


}
