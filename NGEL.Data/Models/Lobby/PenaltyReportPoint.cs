// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PenaltyReportPoint : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public PenaltyReportPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.EPenaltyReportState ReportState { get { return (Lobby.EPenaltyReportState)__p.bb.Get(__p.bb_pos + 0); } }
  public int PenaltyPoint { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<Lobby.PenaltyReportPoint> CreatePenaltyReportPoint(FlatBufferBuilder builder, Lobby.EPenaltyReportState ReportState, int PenaltyPoint) {
    builder.Prep(4, 8);
    builder.PutInt(PenaltyPoint);
    builder.Pad(3);
    builder.PutByte((byte)ReportState);
    return new Offset<Lobby.PenaltyReportPoint>(builder.Offset);
  }
  public PenaltyReportPointT UnPack() {
    var _o = new PenaltyReportPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PenaltyReportPointT _o) {
    _o.ReportState = this.ReportState;
    _o.PenaltyPoint = this.PenaltyPoint;
  }
  public static Offset<Lobby.PenaltyReportPoint> Pack(FlatBufferBuilder builder, PenaltyReportPointT _o) {
    if (_o == null) return default(Offset<Lobby.PenaltyReportPoint>);
    return CreatePenaltyReportPoint(
      builder,
      _o.ReportState,
      _o.PenaltyPoint);
  }
}

public class PenaltyReportPointT
{
  public Lobby.EPenaltyReportState ReportState { get; set; }
  public int PenaltyPoint { get; set; }

  public PenaltyReportPointT() {
    this.ReportState = Lobby.EPenaltyReportState.None;
    this.PenaltyPoint = 0;
  }
}


}
