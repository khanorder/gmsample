// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_SeasonPassList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_SeasonPassList GetRootAsSA_SeasonPassList(ByteBuffer _bb) { return GetRootAsSA_SeasonPassList(_bb, new SA_SeasonPassList()); }
  public static SA_SeasonPassList GetRootAsSA_SeasonPassList(ByteBuffer _bb, SA_SeasonPassList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_SeasonPassList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.SeasonPassData? SeasonPass(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.SeasonPassData?)(new Lobby.SeasonPassData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SeasonPassLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool ReqDirection { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Lobby.SA_SeasonPassList> CreateSA_SeasonPassList(FlatBufferBuilder builder,
      VectorOffset SeasonPassOffset = default(VectorOffset),
      bool ReqDirection = false) {
    builder.StartTable(2);
    SA_SeasonPassList.AddSeasonPass(builder, SeasonPassOffset);
    SA_SeasonPassList.AddReqDirection(builder, ReqDirection);
    return SA_SeasonPassList.EndSA_SeasonPassList(builder);
  }

  public static void StartSA_SeasonPassList(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddSeasonPass(FlatBufferBuilder builder, VectorOffset SeasonPassOffset) { builder.AddOffset(0, SeasonPassOffset.Value, 0); }
  public static VectorOffset CreateSeasonPassVector(FlatBufferBuilder builder, Offset<Lobby.SeasonPassData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSeasonPassVectorBlock(FlatBufferBuilder builder, Offset<Lobby.SeasonPassData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeasonPassVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.SeasonPassData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeasonPassVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.SeasonPassData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSeasonPassVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReqDirection(FlatBufferBuilder builder, bool ReqDirection) { builder.AddBool(1, ReqDirection, false); }
  public static Offset<Lobby.SA_SeasonPassList> EndSA_SeasonPassList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_SeasonPassList>(o);
  }
  public SA_SeasonPassListT UnPack() {
    var _o = new SA_SeasonPassListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_SeasonPassListT _o) {
    _o.SeasonPass = new List<Lobby.SeasonPassDataT>();
    for (var _j = 0; _j < this.SeasonPassLength; ++_j) {_o.SeasonPass.Add(this.SeasonPass(_j).HasValue ? this.SeasonPass(_j).Value.UnPack() : null);}
    _o.ReqDirection = this.ReqDirection;
  }
  public static Offset<Lobby.SA_SeasonPassList> Pack(FlatBufferBuilder builder, SA_SeasonPassListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_SeasonPassList>);
    var _SeasonPass = default(VectorOffset);
    if (_o.SeasonPass != null) {
      var __SeasonPass = new Offset<Lobby.SeasonPassData>[_o.SeasonPass.Count];
      for (var _j = 0; _j < __SeasonPass.Length; ++_j) { __SeasonPass[_j] = Lobby.SeasonPassData.Pack(builder, _o.SeasonPass[_j]); }
      _SeasonPass = CreateSeasonPassVector(builder, __SeasonPass);
    }
    return CreateSA_SeasonPassList(
      builder,
      _SeasonPass,
      _o.ReqDirection);
  }
}

public class SA_SeasonPassListT
{
  public List<Lobby.SeasonPassDataT> SeasonPass { get; set; }
  public bool ReqDirection { get; set; }

  public SA_SeasonPassListT() {
    this.SeasonPass = null;
    this.ReqDirection = false;
  }
}


}
