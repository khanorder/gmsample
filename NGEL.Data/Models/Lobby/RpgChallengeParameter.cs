// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RpgChallengeParameter : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public RpgChallengeParameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Index { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<Lobby.RpgChallengeParameter> CreateRpgChallengeParameter(FlatBufferBuilder builder, int ID, int Index) {
    builder.Prep(4, 8);
    builder.PutInt(Index);
    builder.PutInt(ID);
    return new Offset<Lobby.RpgChallengeParameter>(builder.Offset);
  }
  public RpgChallengeParameterT UnPack() {
    var _o = new RpgChallengeParameterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RpgChallengeParameterT _o) {
    _o.ID = this.ID;
    _o.Index = this.Index;
  }
  public static Offset<Lobby.RpgChallengeParameter> Pack(FlatBufferBuilder builder, RpgChallengeParameterT _o) {
    if (_o == null) return default(Offset<Lobby.RpgChallengeParameter>);
    return CreateRpgChallengeParameter(
      builder,
      _o.ID,
      _o.Index);
  }
}

public class RpgChallengeParameterT
{
  public int ID { get; set; }
  public int Index { get; set; }

  public RpgChallengeParameterT() {
    this.ID = 0;
    this.Index = 0;
  }
}


}
