// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RaidFinishInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static RaidFinishInfo GetRootAsRaidFinishInfo(ByteBuffer _bb) { return GetRootAsRaidFinishInfo(_bb, new RaidFinishInfo()); }
  public static RaidFinishInfo GetRootAsRaidFinishInfo(ByteBuffer _bb, RaidFinishInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RaidFinishInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HeroID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RaidMapID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRaidMapIDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRaidMapIDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRaidMapIDArray() { return __p.__vector_as_array<byte>(8); }
  public bool IsSuccess { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsDie { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public sbyte DieReason { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public int AttackerID { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AttackerName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttackerNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetAttackerNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetAttackerNameArray() { return __p.__vector_as_array<byte>(18); }
  public int ItemID { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemCount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankingPoint { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.BiskitLog? LogList(int j) { int o = __p.__offset(26); return o != 0 ? (Lobby.BiskitLog?)(new Lobby.BiskitLog()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LogListLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.RaidFinishInfo> CreateRaidFinishInfo(FlatBufferBuilder builder,
      int UID = 0,
      int HeroID = 0,
      StringOffset RaidMapIDOffset = default(StringOffset),
      bool IsSuccess = false,
      bool IsDie = false,
      sbyte DieReason = 0,
      int AttackerID = 0,
      StringOffset AttackerNameOffset = default(StringOffset),
      int ItemID = 0,
      int ItemCount = 0,
      int RankingPoint = 0,
      VectorOffset LogListOffset = default(VectorOffset)) {
    builder.StartTable(12);
    RaidFinishInfo.AddLogList(builder, LogListOffset);
    RaidFinishInfo.AddRankingPoint(builder, RankingPoint);
    RaidFinishInfo.AddItemCount(builder, ItemCount);
    RaidFinishInfo.AddItemID(builder, ItemID);
    RaidFinishInfo.AddAttackerName(builder, AttackerNameOffset);
    RaidFinishInfo.AddAttackerID(builder, AttackerID);
    RaidFinishInfo.AddRaidMapID(builder, RaidMapIDOffset);
    RaidFinishInfo.AddHeroID(builder, HeroID);
    RaidFinishInfo.AddUID(builder, UID);
    RaidFinishInfo.AddDieReason(builder, DieReason);
    RaidFinishInfo.AddIsDie(builder, IsDie);
    RaidFinishInfo.AddIsSuccess(builder, IsSuccess);
    return RaidFinishInfo.EndRaidFinishInfo(builder);
  }

  public static void StartRaidFinishInfo(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddUID(FlatBufferBuilder builder, int UID) { builder.AddInt(0, UID, 0); }
  public static void AddHeroID(FlatBufferBuilder builder, int HeroID) { builder.AddInt(1, HeroID, 0); }
  public static void AddRaidMapID(FlatBufferBuilder builder, StringOffset RaidMapIDOffset) { builder.AddOffset(2, RaidMapIDOffset.Value, 0); }
  public static void AddIsSuccess(FlatBufferBuilder builder, bool IsSuccess) { builder.AddBool(3, IsSuccess, false); }
  public static void AddIsDie(FlatBufferBuilder builder, bool IsDie) { builder.AddBool(4, IsDie, false); }
  public static void AddDieReason(FlatBufferBuilder builder, sbyte DieReason) { builder.AddSbyte(5, DieReason, 0); }
  public static void AddAttackerID(FlatBufferBuilder builder, int AttackerID) { builder.AddInt(6, AttackerID, 0); }
  public static void AddAttackerName(FlatBufferBuilder builder, StringOffset AttackerNameOffset) { builder.AddOffset(7, AttackerNameOffset.Value, 0); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(8, ItemID, 0); }
  public static void AddItemCount(FlatBufferBuilder builder, int ItemCount) { builder.AddInt(9, ItemCount, 0); }
  public static void AddRankingPoint(FlatBufferBuilder builder, int RankingPoint) { builder.AddInt(10, RankingPoint, 0); }
  public static void AddLogList(FlatBufferBuilder builder, VectorOffset LogListOffset) { builder.AddOffset(11, LogListOffset.Value, 0); }
  public static VectorOffset CreateLogListVector(FlatBufferBuilder builder, Offset<Lobby.BiskitLog>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLogListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.BiskitLog>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.BiskitLog>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.BiskitLog>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLogListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.RaidFinishInfo> EndRaidFinishInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.RaidFinishInfo>(o);
  }
  public RaidFinishInfoT UnPack() {
    var _o = new RaidFinishInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RaidFinishInfoT _o) {
    _o.UID = this.UID;
    _o.HeroID = this.HeroID;
    _o.RaidMapID = this.RaidMapID;
    _o.IsSuccess = this.IsSuccess;
    _o.IsDie = this.IsDie;
    _o.DieReason = this.DieReason;
    _o.AttackerID = this.AttackerID;
    _o.AttackerName = this.AttackerName;
    _o.ItemID = this.ItemID;
    _o.ItemCount = this.ItemCount;
    _o.RankingPoint = this.RankingPoint;
    _o.LogList = new List<Lobby.BiskitLogT>();
    for (var _j = 0; _j < this.LogListLength; ++_j) {_o.LogList.Add(this.LogList(_j).HasValue ? this.LogList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.RaidFinishInfo> Pack(FlatBufferBuilder builder, RaidFinishInfoT _o) {
    if (_o == null) return default(Offset<Lobby.RaidFinishInfo>);
    var _RaidMapID = _o.RaidMapID == null ? default(StringOffset) : builder.CreateString(_o.RaidMapID);
    var _AttackerName = _o.AttackerName == null ? default(StringOffset) : builder.CreateString(_o.AttackerName);
    var _LogList = default(VectorOffset);
    if (_o.LogList != null) {
      var __LogList = new Offset<Lobby.BiskitLog>[_o.LogList.Count];
      for (var _j = 0; _j < __LogList.Length; ++_j) { __LogList[_j] = Lobby.BiskitLog.Pack(builder, _o.LogList[_j]); }
      _LogList = CreateLogListVector(builder, __LogList);
    }
    return CreateRaidFinishInfo(
      builder,
      _o.UID,
      _o.HeroID,
      _RaidMapID,
      _o.IsSuccess,
      _o.IsDie,
      _o.DieReason,
      _o.AttackerID,
      _AttackerName,
      _o.ItemID,
      _o.ItemCount,
      _o.RankingPoint,
      _LogList);
  }
}

public class RaidFinishInfoT
{
  public int UID { get; set; }
  public int HeroID { get; set; }
  public string RaidMapID { get; set; }
  public bool IsSuccess { get; set; }
  public bool IsDie { get; set; }
  public sbyte DieReason { get; set; }
  public int AttackerID { get; set; }
  public string AttackerName { get; set; }
  public int ItemID { get; set; }
  public int ItemCount { get; set; }
  public int RankingPoint { get; set; }
  public List<Lobby.BiskitLogT> LogList { get; set; }

  public RaidFinishInfoT() {
    this.UID = 0;
    this.HeroID = 0;
    this.RaidMapID = null;
    this.IsSuccess = false;
    this.IsDie = false;
    this.DieReason = 0;
    this.AttackerID = 0;
    this.AttackerName = null;
    this.ItemID = 0;
    this.ItemCount = 0;
    this.RankingPoint = 0;
    this.LogList = null;
  }
}


}
