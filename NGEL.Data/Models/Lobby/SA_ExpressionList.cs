// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_ExpressionList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_ExpressionList GetRootAsSA_ExpressionList(ByteBuffer _bb) { return GetRootAsSA_ExpressionList(_bb, new SA_ExpressionList()); }
  public static SA_ExpressionList GetRootAsSA_ExpressionList(ByteBuffer _bb, SA_ExpressionList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_ExpressionList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.ExpressionData? ExpressionList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.ExpressionData?)(new Lobby.ExpressionData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ExpressionListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_ExpressionList> CreateSA_ExpressionList(FlatBufferBuilder builder,
      VectorOffset ExpressionListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_ExpressionList.AddExpressionList(builder, ExpressionListOffset);
    return SA_ExpressionList.EndSA_ExpressionList(builder);
  }

  public static void StartSA_ExpressionList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddExpressionList(FlatBufferBuilder builder, VectorOffset ExpressionListOffset) { builder.AddOffset(0, ExpressionListOffset.Value, 0); }
  public static void StartExpressionListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.SA_ExpressionList> EndSA_ExpressionList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_ExpressionList>(o);
  }
  public SA_ExpressionListT UnPack() {
    var _o = new SA_ExpressionListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_ExpressionListT _o) {
    _o.ExpressionList = new List<Lobby.ExpressionDataT>();
    for (var _j = 0; _j < this.ExpressionListLength; ++_j) {_o.ExpressionList.Add(this.ExpressionList(_j).HasValue ? this.ExpressionList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_ExpressionList> Pack(FlatBufferBuilder builder, SA_ExpressionListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_ExpressionList>);
    var _ExpressionList = default(VectorOffset);
    if (_o.ExpressionList != null) {
      StartExpressionListVector(builder, _o.ExpressionList.Count);
      for (var _j = _o.ExpressionList.Count - 1; _j >= 0; --_j) { Lobby.ExpressionData.Pack(builder, _o.ExpressionList[_j]); }
      _ExpressionList = builder.EndVector();
    }
    return CreateSA_ExpressionList(
      builder,
      _ExpressionList);
  }
}

public class SA_ExpressionListT
{
  public List<Lobby.ExpressionDataT> ExpressionList { get; set; }

  public SA_ExpressionListT() {
    this.ExpressionList = null;
  }
}


}
