// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LobbyToLobby_PenaltyReport : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static LobbyToLobby_PenaltyReport GetRootAsLobbyToLobby_PenaltyReport(ByteBuffer _bb) { return GetRootAsLobbyToLobby_PenaltyReport(_bb, new LobbyToLobby_PenaltyReport()); }
  public static LobbyToLobby_PenaltyReport GetRootAsLobbyToLobby_PenaltyReport(ByteBuffer _bb, LobbyToLobby_PenaltyReport obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LobbyToLobby_PenaltyReport __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.PenaltyReportPoint? ReportStateList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.PenaltyReportPoint?)(new Lobby.PenaltyReportPoint()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ReportStateListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.LobbyToLobby_PenaltyReport> CreateLobbyToLobby_PenaltyReport(FlatBufferBuilder builder,
      VectorOffset ReportStateListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LobbyToLobby_PenaltyReport.AddReportStateList(builder, ReportStateListOffset);
    return LobbyToLobby_PenaltyReport.EndLobbyToLobby_PenaltyReport(builder);
  }

  public static void StartLobbyToLobby_PenaltyReport(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddReportStateList(FlatBufferBuilder builder, VectorOffset ReportStateListOffset) { builder.AddOffset(0, ReportStateListOffset.Value, 0); }
  public static void StartReportStateListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.LobbyToLobby_PenaltyReport> EndLobbyToLobby_PenaltyReport(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.LobbyToLobby_PenaltyReport>(o);
  }
  public LobbyToLobby_PenaltyReportT UnPack() {
    var _o = new LobbyToLobby_PenaltyReportT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LobbyToLobby_PenaltyReportT _o) {
    _o.ReportStateList = new List<Lobby.PenaltyReportPointT>();
    for (var _j = 0; _j < this.ReportStateListLength; ++_j) {_o.ReportStateList.Add(this.ReportStateList(_j).HasValue ? this.ReportStateList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.LobbyToLobby_PenaltyReport> Pack(FlatBufferBuilder builder, LobbyToLobby_PenaltyReportT _o) {
    if (_o == null) return default(Offset<Lobby.LobbyToLobby_PenaltyReport>);
    var _ReportStateList = default(VectorOffset);
    if (_o.ReportStateList != null) {
      StartReportStateListVector(builder, _o.ReportStateList.Count);
      for (var _j = _o.ReportStateList.Count - 1; _j >= 0; --_j) { Lobby.PenaltyReportPoint.Pack(builder, _o.ReportStateList[_j]); }
      _ReportStateList = builder.EndVector();
    }
    return CreateLobbyToLobby_PenaltyReport(
      builder,
      _ReportStateList);
  }
}

public class LobbyToLobby_PenaltyReportT
{
  public List<Lobby.PenaltyReportPointT> ReportStateList { get; set; }

  public LobbyToLobby_PenaltyReportT() {
    this.ReportStateList = null;
  }
}


}
