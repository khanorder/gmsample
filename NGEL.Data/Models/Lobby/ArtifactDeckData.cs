// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ArtifactDeckData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static ArtifactDeckData GetRootAsArtifactDeckData(ByteBuffer _bb) { return GetRootAsArtifactDeckData(_bb, new ArtifactDeckData()); }
  public static ArtifactDeckData GetRootAsArtifactDeckData(ByteBuffer _bb, ArtifactDeckData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ArtifactDeckData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte SlotID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public string DeckName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDeckNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDeckNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDeckNameArray() { return __p.__vector_as_array<byte>(6); }
  public int ArtifactIDList(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArtifactIDListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetArtifactIDListBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetArtifactIDListBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetArtifactIDListArray() { return __p.__vector_as_array<int>(8); }

  public static Offset<Lobby.ArtifactDeckData> CreateArtifactDeckData(FlatBufferBuilder builder,
      byte SlotID = 0,
      StringOffset DeckNameOffset = default(StringOffset),
      VectorOffset ArtifactIDListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ArtifactDeckData.AddArtifactIDList(builder, ArtifactIDListOffset);
    ArtifactDeckData.AddDeckName(builder, DeckNameOffset);
    ArtifactDeckData.AddSlotID(builder, SlotID);
    return ArtifactDeckData.EndArtifactDeckData(builder);
  }

  public static void StartArtifactDeckData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSlotID(FlatBufferBuilder builder, byte SlotID) { builder.AddByte(0, SlotID, 0); }
  public static void AddDeckName(FlatBufferBuilder builder, StringOffset DeckNameOffset) { builder.AddOffset(1, DeckNameOffset.Value, 0); }
  public static void AddArtifactIDList(FlatBufferBuilder builder, VectorOffset ArtifactIDListOffset) { builder.AddOffset(2, ArtifactIDListOffset.Value, 0); }
  public static VectorOffset CreateArtifactIDListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArtifactIDListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArtifactIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArtifactIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartArtifactIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.ArtifactDeckData> EndArtifactDeckData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.ArtifactDeckData>(o);
  }
  public ArtifactDeckDataT UnPack() {
    var _o = new ArtifactDeckDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ArtifactDeckDataT _o) {
    _o.SlotID = this.SlotID;
    _o.DeckName = this.DeckName;
    _o.ArtifactIDList = new List<int>();
    for (var _j = 0; _j < this.ArtifactIDListLength; ++_j) {_o.ArtifactIDList.Add(this.ArtifactIDList(_j));}
  }
  public static Offset<Lobby.ArtifactDeckData> Pack(FlatBufferBuilder builder, ArtifactDeckDataT _o) {
    if (_o == null) return default(Offset<Lobby.ArtifactDeckData>);
    var _DeckName = _o.DeckName == null ? default(StringOffset) : builder.CreateString(_o.DeckName);
    var _ArtifactIDList = default(VectorOffset);
    if (_o.ArtifactIDList != null) {
      var __ArtifactIDList = _o.ArtifactIDList.ToArray();
      _ArtifactIDList = CreateArtifactIDListVector(builder, __ArtifactIDList);
    }
    return CreateArtifactDeckData(
      builder,
      _o.SlotID,
      _DeckName,
      _ArtifactIDList);
  }
}

public class ArtifactDeckDataT
{
  public byte SlotID { get; set; }
  public string DeckName { get; set; }
  public List<int> ArtifactIDList { get; set; }

  public ArtifactDeckDataT() {
    this.SlotID = 0;
    this.DeckName = null;
    this.ArtifactIDList = null;
  }
}


}
