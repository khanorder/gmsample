// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_GuideMissionComplete : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_GuideMissionComplete GetRootAsSA_GuideMissionComplete(ByteBuffer _bb) { return GetRootAsSA_GuideMissionComplete(_bb, new SA_GuideMissionComplete()); }
  public static SA_GuideMissionComplete GetRootAsSA_GuideMissionComplete(ByteBuffer _bb, SA_GuideMissionComplete obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_GuideMissionComplete __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.GuideMissionData? Mission { get { int o = __p.__offset(4); return o != 0 ? (Lobby.GuideMissionData?)(new Lobby.GuideMissionData()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartSA_GuideMissionComplete(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMission(FlatBufferBuilder builder, Offset<Lobby.GuideMissionData> MissionOffset) { builder.AddStruct(0, MissionOffset.Value, 0); }
  public static Offset<Lobby.SA_GuideMissionComplete> EndSA_GuideMissionComplete(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_GuideMissionComplete>(o);
  }
  public SA_GuideMissionCompleteT UnPack() {
    var _o = new SA_GuideMissionCompleteT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_GuideMissionCompleteT _o) {
    _o.Mission = this.Mission.HasValue ? this.Mission.Value.UnPack() : null;
  }
  public static Offset<Lobby.SA_GuideMissionComplete> Pack(FlatBufferBuilder builder, SA_GuideMissionCompleteT _o) {
    if (_o == null) return default(Offset<Lobby.SA_GuideMissionComplete>);
    StartSA_GuideMissionComplete(builder);
    AddMission(builder, Lobby.GuideMissionData.Pack(builder, _o.Mission));
    return EndSA_GuideMissionComplete(builder);
  }
}

public class SA_GuideMissionCompleteT
{
  public Lobby.GuideMissionDataT Mission { get; set; }

  public SA_GuideMissionCompleteT() {
    this.Mission = new Lobby.GuideMissionDataT();
  }
}


}
