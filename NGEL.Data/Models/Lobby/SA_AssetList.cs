// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_AssetList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_AssetList GetRootAsSA_AssetList(ByteBuffer _bb) { return GetRootAsSA_AssetList(_bb, new SA_AssetList()); }
  public static SA_AssetList GetRootAsSA_AssetList(ByteBuffer _bb, SA_AssetList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_AssetList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.AssetData? AssetList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.AssetData?)(new Lobby.AssetData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int AssetListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_AssetList> CreateSA_AssetList(FlatBufferBuilder builder,
      VectorOffset AssetListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_AssetList.AddAssetList(builder, AssetListOffset);
    return SA_AssetList.EndSA_AssetList(builder);
  }

  public static void StartSA_AssetList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddAssetList(FlatBufferBuilder builder, VectorOffset AssetListOffset) { builder.AddOffset(0, AssetListOffset.Value, 0); }
  public static void StartAssetListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Lobby.SA_AssetList> EndSA_AssetList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_AssetList>(o);
  }
  public SA_AssetListT UnPack() {
    var _o = new SA_AssetListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_AssetListT _o) {
    _o.AssetList = new List<Lobby.AssetDataT>();
    for (var _j = 0; _j < this.AssetListLength; ++_j) {_o.AssetList.Add(this.AssetList(_j).HasValue ? this.AssetList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_AssetList> Pack(FlatBufferBuilder builder, SA_AssetListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_AssetList>);
    var _AssetList = default(VectorOffset);
    if (_o.AssetList != null) {
      StartAssetListVector(builder, _o.AssetList.Count);
      for (var _j = _o.AssetList.Count - 1; _j >= 0; --_j) { Lobby.AssetData.Pack(builder, _o.AssetList[_j]); }
      _AssetList = builder.EndVector();
    }
    return CreateSA_AssetList(
      builder,
      _AssetList);
  }
}

public class SA_AssetListT
{
  public List<Lobby.AssetDataT> AssetList { get; set; }

  public SA_AssetListT() {
    this.AssetList = null;
  }
}


}
