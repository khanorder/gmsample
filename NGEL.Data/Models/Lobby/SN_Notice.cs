// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SN_Notice : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SN_Notice GetRootAsSN_Notice(ByteBuffer _bb) { return GetRootAsSN_Notice(_bb, new SN_Notice()); }
  public static SN_Notice GetRootAsSN_Notice(ByteBuffer _bb, SN_Notice obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SN_Notice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string NoticeMessage { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNoticeMessageBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNoticeMessageBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNoticeMessageArray() { return __p.__vector_as_array<byte>(4); }
  public Lobby.ENoticeType NoticeType { get { int o = __p.__offset(6); return o != 0 ? (Lobby.ENoticeType)__p.bb.Get(o + __p.bb_pos) : Lobby.ENoticeType.None; } }
  public float VisibleTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int VisibleCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.SN_Notice> CreateSN_Notice(FlatBufferBuilder builder,
      StringOffset NoticeMessageOffset = default(StringOffset),
      Lobby.ENoticeType NoticeType = Lobby.ENoticeType.None,
      float VisibleTime = 0.0f,
      int VisibleCount = 0) {
    builder.StartTable(4);
    SN_Notice.AddVisibleCount(builder, VisibleCount);
    SN_Notice.AddVisibleTime(builder, VisibleTime);
    SN_Notice.AddNoticeMessage(builder, NoticeMessageOffset);
    SN_Notice.AddNoticeType(builder, NoticeType);
    return SN_Notice.EndSN_Notice(builder);
  }

  public static void StartSN_Notice(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddNoticeMessage(FlatBufferBuilder builder, StringOffset NoticeMessageOffset) { builder.AddOffset(0, NoticeMessageOffset.Value, 0); }
  public static void AddNoticeType(FlatBufferBuilder builder, Lobby.ENoticeType NoticeType) { builder.AddByte(1, (byte)NoticeType, 0); }
  public static void AddVisibleTime(FlatBufferBuilder builder, float VisibleTime) { builder.AddFloat(2, VisibleTime, 0.0f); }
  public static void AddVisibleCount(FlatBufferBuilder builder, int VisibleCount) { builder.AddInt(3, VisibleCount, 0); }
  public static Offset<Lobby.SN_Notice> EndSN_Notice(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SN_Notice>(o);
  }
  public SN_NoticeT UnPack() {
    var _o = new SN_NoticeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SN_NoticeT _o) {
    _o.NoticeMessage = this.NoticeMessage;
    _o.NoticeType = this.NoticeType;
    _o.VisibleTime = this.VisibleTime;
    _o.VisibleCount = this.VisibleCount;
  }
  public static Offset<Lobby.SN_Notice> Pack(FlatBufferBuilder builder, SN_NoticeT _o) {
    if (_o == null) return default(Offset<Lobby.SN_Notice>);
    var _NoticeMessage = _o.NoticeMessage == null ? default(StringOffset) : builder.CreateString(_o.NoticeMessage);
    return CreateSN_Notice(
      builder,
      _NoticeMessage,
      _o.NoticeType,
      _o.VisibleTime,
      _o.VisibleCount);
  }
}

public class SN_NoticeT
{
  public string NoticeMessage { get; set; }
  public Lobby.ENoticeType NoticeType { get; set; }
  public float VisibleTime { get; set; }
  public int VisibleCount { get; set; }

  public SN_NoticeT() {
    this.NoticeMessage = null;
    this.NoticeType = Lobby.ENoticeType.None;
    this.VisibleTime = 0.0f;
    this.VisibleCount = 0;
  }
}


}
