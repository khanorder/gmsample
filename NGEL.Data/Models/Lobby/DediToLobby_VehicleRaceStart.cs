// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DediToLobby_VehicleRaceStart : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static DediToLobby_VehicleRaceStart GetRootAsDediToLobby_VehicleRaceStart(ByteBuffer _bb) { return GetRootAsDediToLobby_VehicleRaceStart(_bb, new DediToLobby_VehicleRaceStart()); }
  public static DediToLobby_VehicleRaceStart GetRootAsDediToLobby_VehicleRaceStart(ByteBuffer _bb, DediToLobby_VehicleRaceStart obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DediToLobby_VehicleRaceStart __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UIDList(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UIDListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetUIDListBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetUIDListBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetUIDListArray() { return __p.__vector_as_array<int>(4); }
  public string DedicatedID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDedicatedIDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDedicatedIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDedicatedIDArray() { return __p.__vector_as_array<byte>(6); }
  public string RaceUniqueID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRaceUniqueIDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRaceUniqueIDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRaceUniqueIDArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<Lobby.DediToLobby_VehicleRaceStart> CreateDediToLobby_VehicleRaceStart(FlatBufferBuilder builder,
      VectorOffset UIDListOffset = default(VectorOffset),
      StringOffset DedicatedIDOffset = default(StringOffset),
      StringOffset RaceUniqueIDOffset = default(StringOffset)) {
    builder.StartTable(3);
    DediToLobby_VehicleRaceStart.AddRaceUniqueID(builder, RaceUniqueIDOffset);
    DediToLobby_VehicleRaceStart.AddDedicatedID(builder, DedicatedIDOffset);
    DediToLobby_VehicleRaceStart.AddUIDList(builder, UIDListOffset);
    return DediToLobby_VehicleRaceStart.EndDediToLobby_VehicleRaceStart(builder);
  }

  public static void StartDediToLobby_VehicleRaceStart(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddUIDList(FlatBufferBuilder builder, VectorOffset UIDListOffset) { builder.AddOffset(0, UIDListOffset.Value, 0); }
  public static VectorOffset CreateUIDListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUIDListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDedicatedID(FlatBufferBuilder builder, StringOffset DedicatedIDOffset) { builder.AddOffset(1, DedicatedIDOffset.Value, 0); }
  public static void AddRaceUniqueID(FlatBufferBuilder builder, StringOffset RaceUniqueIDOffset) { builder.AddOffset(2, RaceUniqueIDOffset.Value, 0); }
  public static Offset<Lobby.DediToLobby_VehicleRaceStart> EndDediToLobby_VehicleRaceStart(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.DediToLobby_VehicleRaceStart>(o);
  }
  public DediToLobby_VehicleRaceStartT UnPack() {
    var _o = new DediToLobby_VehicleRaceStartT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DediToLobby_VehicleRaceStartT _o) {
    _o.UIDList = new List<int>();
    for (var _j = 0; _j < this.UIDListLength; ++_j) {_o.UIDList.Add(this.UIDList(_j));}
    _o.DedicatedID = this.DedicatedID;
    _o.RaceUniqueID = this.RaceUniqueID;
  }
  public static Offset<Lobby.DediToLobby_VehicleRaceStart> Pack(FlatBufferBuilder builder, DediToLobby_VehicleRaceStartT _o) {
    if (_o == null) return default(Offset<Lobby.DediToLobby_VehicleRaceStart>);
    var _UIDList = default(VectorOffset);
    if (_o.UIDList != null) {
      var __UIDList = _o.UIDList.ToArray();
      _UIDList = CreateUIDListVector(builder, __UIDList);
    }
    var _DedicatedID = _o.DedicatedID == null ? default(StringOffset) : builder.CreateString(_o.DedicatedID);
    var _RaceUniqueID = _o.RaceUniqueID == null ? default(StringOffset) : builder.CreateString(_o.RaceUniqueID);
    return CreateDediToLobby_VehicleRaceStart(
      builder,
      _UIDList,
      _DedicatedID,
      _RaceUniqueID);
  }
}

public class DediToLobby_VehicleRaceStartT
{
  public List<int> UIDList { get; set; }
  public string DedicatedID { get; set; }
  public string RaceUniqueID { get; set; }

  public DediToLobby_VehicleRaceStartT() {
    this.UIDList = null;
    this.DedicatedID = null;
    this.RaceUniqueID = null;
  }
}


}
