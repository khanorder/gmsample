// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BiskitLog : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static BiskitLog GetRootAsBiskitLog(ByteBuffer _bb) { return GetRootAsBiskitLog(_bb, new BiskitLog()); }
  public static BiskitLog GetRootAsBiskitLog(ByteBuffer _bb, BiskitLog obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BiskitLog __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetEventIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetEventIDArray() { return __p.__vector_as_array<byte>(4); }
  public string LogData(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LogDataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.BiskitLog> CreateBiskitLog(FlatBufferBuilder builder,
      StringOffset EventIDOffset = default(StringOffset),
      VectorOffset LogDataOffset = default(VectorOffset)) {
    builder.StartTable(2);
    BiskitLog.AddLogData(builder, LogDataOffset);
    BiskitLog.AddEventID(builder, EventIDOffset);
    return BiskitLog.EndBiskitLog(builder);
  }

  public static void StartBiskitLog(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddEventID(FlatBufferBuilder builder, StringOffset EventIDOffset) { builder.AddOffset(0, EventIDOffset.Value, 0); }
  public static void AddLogData(FlatBufferBuilder builder, VectorOffset LogDataOffset) { builder.AddOffset(1, LogDataOffset.Value, 0); }
  public static VectorOffset CreateLogDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLogDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogDataVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLogDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.BiskitLog> EndBiskitLog(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.BiskitLog>(o);
  }
  public BiskitLogT UnPack() {
    var _o = new BiskitLogT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BiskitLogT _o) {
    _o.EventID = this.EventID;
    _o.LogData = new List<string>();
    for (var _j = 0; _j < this.LogDataLength; ++_j) {_o.LogData.Add(this.LogData(_j));}
  }
  public static Offset<Lobby.BiskitLog> Pack(FlatBufferBuilder builder, BiskitLogT _o) {
    if (_o == null) return default(Offset<Lobby.BiskitLog>);
    var _EventID = _o.EventID == null ? default(StringOffset) : builder.CreateString(_o.EventID);
    var _LogData = default(VectorOffset);
    if (_o.LogData != null) {
      var __LogData = new StringOffset[_o.LogData.Count];
      for (var _j = 0; _j < __LogData.Length; ++_j) { __LogData[_j] = builder.CreateString(_o.LogData[_j]); }
      _LogData = CreateLogDataVector(builder, __LogData);
    }
    return CreateBiskitLog(
      builder,
      _EventID,
      _LogData);
  }
}

public class BiskitLogT
{
  public string EventID { get; set; }
  public List<string> LogData { get; set; }

  public BiskitLogT() {
    this.EventID = null;
    this.LogData = null;
  }
}


}
