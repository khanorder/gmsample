// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_PenaltyReport : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_PenaltyReport GetRootAsCQ_PenaltyReport(ByteBuffer _bb) { return GetRootAsCQ_PenaltyReport(_bb, new CQ_PenaltyReport()); }
  public static CQ_PenaltyReport GetRootAsCQ_PenaltyReport(ByteBuffer _bb, CQ_PenaltyReport obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_PenaltyReport __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TargetUID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.EPenaltyReportState ReportStateList(int j) { int o = __p.__offset(6); return o != 0 ? (Lobby.EPenaltyReportState)__p.bb.Get(__p.__vector(o) + j * 1) : (Lobby.EPenaltyReportState)0; }
  public int ReportStateListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Lobby.EPenaltyReportState> GetReportStateListBytes() { return __p.__vector_as_span<Lobby.EPenaltyReportState>(6, 1); }
#else
  public ArraySegment<byte>? GetReportStateListBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public Lobby.EPenaltyReportState[] GetReportStateListArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Lobby.EPenaltyReportState[] a = new Lobby.EPenaltyReportState[l]; for (int i = 0; i < l; i++) { a[i] = (Lobby.EPenaltyReportState)__p.bb.Get(p + i * 1); } return a; }

  public static Offset<Lobby.CQ_PenaltyReport> CreateCQ_PenaltyReport(FlatBufferBuilder builder,
      int TargetUID = 0,
      VectorOffset ReportStateListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CQ_PenaltyReport.AddReportStateList(builder, ReportStateListOffset);
    CQ_PenaltyReport.AddTargetUID(builder, TargetUID);
    return CQ_PenaltyReport.EndCQ_PenaltyReport(builder);
  }

  public static void StartCQ_PenaltyReport(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTargetUID(FlatBufferBuilder builder, int TargetUID) { builder.AddInt(0, TargetUID, 0); }
  public static void AddReportStateList(FlatBufferBuilder builder, VectorOffset ReportStateListOffset) { builder.AddOffset(1, ReportStateListOffset.Value, 0); }
  public static VectorOffset CreateReportStateListVector(FlatBufferBuilder builder, Lobby.EPenaltyReportState[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReportStateListVectorBlock(FlatBufferBuilder builder, Lobby.EPenaltyReportState[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReportStateListVectorBlock(FlatBufferBuilder builder, ArraySegment<Lobby.EPenaltyReportState> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReportStateListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Lobby.EPenaltyReportState>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartReportStateListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Lobby.CQ_PenaltyReport> EndCQ_PenaltyReport(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_PenaltyReport>(o);
  }
  public CQ_PenaltyReportT UnPack() {
    var _o = new CQ_PenaltyReportT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_PenaltyReportT _o) {
    _o.TargetUID = this.TargetUID;
    _o.ReportStateList = new List<Lobby.EPenaltyReportState>();
    for (var _j = 0; _j < this.ReportStateListLength; ++_j) {_o.ReportStateList.Add(this.ReportStateList(_j));}
  }
  public static Offset<Lobby.CQ_PenaltyReport> Pack(FlatBufferBuilder builder, CQ_PenaltyReportT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_PenaltyReport>);
    var _ReportStateList = default(VectorOffset);
    if (_o.ReportStateList != null) {
      var __ReportStateList = _o.ReportStateList.ToArray();
      _ReportStateList = CreateReportStateListVector(builder, __ReportStateList);
    }
    return CreateCQ_PenaltyReport(
      builder,
      _o.TargetUID,
      _ReportStateList);
  }
}

public class CQ_PenaltyReportT
{
  public int TargetUID { get; set; }
  public List<Lobby.EPenaltyReportState> ReportStateList { get; set; }

  public CQ_PenaltyReportT() {
    this.TargetUID = 0;
    this.ReportStateList = null;
  }
}


}
