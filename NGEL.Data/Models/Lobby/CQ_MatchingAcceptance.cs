// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_MatchingAcceptance : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_MatchingAcceptance GetRootAsCQ_MatchingAcceptance(ByteBuffer _bb) { return GetRootAsCQ_MatchingAcceptance(_bb, new CQ_MatchingAcceptance()); }
  public static CQ_MatchingAcceptance GetRootAsCQ_MatchingAcceptance(ByteBuffer _bb, CQ_MatchingAcceptance obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_MatchingAcceptance __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MatchID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMatchIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMatchIDArray() { return __p.__vector_as_array<byte>(4); }
  public bool IsAccept { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Lobby.CQ_MatchingAcceptance> CreateCQ_MatchingAcceptance(FlatBufferBuilder builder,
      StringOffset MatchIDOffset = default(StringOffset),
      bool IsAccept = false) {
    builder.StartTable(2);
    CQ_MatchingAcceptance.AddMatchID(builder, MatchIDOffset);
    CQ_MatchingAcceptance.AddIsAccept(builder, IsAccept);
    return CQ_MatchingAcceptance.EndCQ_MatchingAcceptance(builder);
  }

  public static void StartCQ_MatchingAcceptance(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMatchID(FlatBufferBuilder builder, StringOffset MatchIDOffset) { builder.AddOffset(0, MatchIDOffset.Value, 0); }
  public static void AddIsAccept(FlatBufferBuilder builder, bool IsAccept) { builder.AddBool(1, IsAccept, false); }
  public static Offset<Lobby.CQ_MatchingAcceptance> EndCQ_MatchingAcceptance(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_MatchingAcceptance>(o);
  }
  public CQ_MatchingAcceptanceT UnPack() {
    var _o = new CQ_MatchingAcceptanceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_MatchingAcceptanceT _o) {
    _o.MatchID = this.MatchID;
    _o.IsAccept = this.IsAccept;
  }
  public static Offset<Lobby.CQ_MatchingAcceptance> Pack(FlatBufferBuilder builder, CQ_MatchingAcceptanceT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_MatchingAcceptance>);
    var _MatchID = _o.MatchID == null ? default(StringOffset) : builder.CreateString(_o.MatchID);
    return CreateCQ_MatchingAcceptance(
      builder,
      _MatchID,
      _o.IsAccept);
  }
}

public class CQ_MatchingAcceptanceT
{
  public string MatchID { get; set; }
  public bool IsAccept { get; set; }

  public CQ_MatchingAcceptanceT() {
    this.MatchID = null;
    this.IsAccept = false;
  }
}


}
