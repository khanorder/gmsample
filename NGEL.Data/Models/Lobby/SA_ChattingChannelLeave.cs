// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_ChattingChannelLeave : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_ChattingChannelLeave GetRootAsSA_ChattingChannelLeave(ByteBuffer _bb) { return GetRootAsSA_ChattingChannelLeave(_bb, new SA_ChattingChannelLeave()); }
  public static SA_ChattingChannelLeave GetRootAsSA_ChattingChannelLeave(ByteBuffer _bb, SA_ChattingChannelLeave obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_ChattingChannelLeave __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ChannelID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChannelIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetChannelIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetChannelIDArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Lobby.SA_ChattingChannelLeave> CreateSA_ChattingChannelLeave(FlatBufferBuilder builder,
      StringOffset ChannelIDOffset = default(StringOffset)) {
    builder.StartTable(1);
    SA_ChattingChannelLeave.AddChannelID(builder, ChannelIDOffset);
    return SA_ChattingChannelLeave.EndSA_ChattingChannelLeave(builder);
  }

  public static void StartSA_ChattingChannelLeave(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddChannelID(FlatBufferBuilder builder, StringOffset ChannelIDOffset) { builder.AddOffset(0, ChannelIDOffset.Value, 0); }
  public static Offset<Lobby.SA_ChattingChannelLeave> EndSA_ChattingChannelLeave(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_ChattingChannelLeave>(o);
  }
  public SA_ChattingChannelLeaveT UnPack() {
    var _o = new SA_ChattingChannelLeaveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_ChattingChannelLeaveT _o) {
    _o.ChannelID = this.ChannelID;
  }
  public static Offset<Lobby.SA_ChattingChannelLeave> Pack(FlatBufferBuilder builder, SA_ChattingChannelLeaveT _o) {
    if (_o == null) return default(Offset<Lobby.SA_ChattingChannelLeave>);
    var _ChannelID = _o.ChannelID == null ? default(StringOffset) : builder.CreateString(_o.ChannelID);
    return CreateSA_ChattingChannelLeave(
      builder,
      _ChannelID);
  }
}

public class SA_ChattingChannelLeaveT
{
  public string ChannelID { get; set; }

  public SA_ChattingChannelLeaveT() {
    this.ChannelID = null;
  }
}


}
