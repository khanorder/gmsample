// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SN_MatchingAccepted : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SN_MatchingAccepted GetRootAsSN_MatchingAccepted(ByteBuffer _bb) { return GetRootAsSN_MatchingAccepted(_bb, new SN_MatchingAccepted()); }
  public static SN_MatchingAccepted GetRootAsSN_MatchingAccepted(ByteBuffer _bb, SN_MatchingAccepted obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SN_MatchingAccepted __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MatchID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMatchIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMatchIDArray() { return __p.__vector_as_array<byte>(4); }
  public int AcceptedUIDList(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AcceptedUIDListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAcceptedUIDListBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetAcceptedUIDListBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetAcceptedUIDListArray() { return __p.__vector_as_array<int>(6); }

  public static Offset<Lobby.SN_MatchingAccepted> CreateSN_MatchingAccepted(FlatBufferBuilder builder,
      StringOffset MatchIDOffset = default(StringOffset),
      VectorOffset AcceptedUIDListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SN_MatchingAccepted.AddAcceptedUIDList(builder, AcceptedUIDListOffset);
    SN_MatchingAccepted.AddMatchID(builder, MatchIDOffset);
    return SN_MatchingAccepted.EndSN_MatchingAccepted(builder);
  }

  public static void StartSN_MatchingAccepted(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMatchID(FlatBufferBuilder builder, StringOffset MatchIDOffset) { builder.AddOffset(0, MatchIDOffset.Value, 0); }
  public static void AddAcceptedUIDList(FlatBufferBuilder builder, VectorOffset AcceptedUIDListOffset) { builder.AddOffset(1, AcceptedUIDListOffset.Value, 0); }
  public static VectorOffset CreateAcceptedUIDListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAcceptedUIDListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAcceptedUIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAcceptedUIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAcceptedUIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.SN_MatchingAccepted> EndSN_MatchingAccepted(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SN_MatchingAccepted>(o);
  }
  public SN_MatchingAcceptedT UnPack() {
    var _o = new SN_MatchingAcceptedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SN_MatchingAcceptedT _o) {
    _o.MatchID = this.MatchID;
    _o.AcceptedUIDList = new List<int>();
    for (var _j = 0; _j < this.AcceptedUIDListLength; ++_j) {_o.AcceptedUIDList.Add(this.AcceptedUIDList(_j));}
  }
  public static Offset<Lobby.SN_MatchingAccepted> Pack(FlatBufferBuilder builder, SN_MatchingAcceptedT _o) {
    if (_o == null) return default(Offset<Lobby.SN_MatchingAccepted>);
    var _MatchID = _o.MatchID == null ? default(StringOffset) : builder.CreateString(_o.MatchID);
    var _AcceptedUIDList = default(VectorOffset);
    if (_o.AcceptedUIDList != null) {
      var __AcceptedUIDList = _o.AcceptedUIDList.ToArray();
      _AcceptedUIDList = CreateAcceptedUIDListVector(builder, __AcceptedUIDList);
    }
    return CreateSN_MatchingAccepted(
      builder,
      _MatchID,
      _AcceptedUIDList);
  }
}

public class SN_MatchingAcceptedT
{
  public string MatchID { get; set; }
  public List<int> AcceptedUIDList { get; set; }

  public SN_MatchingAcceptedT() {
    this.MatchID = null;
    this.AcceptedUIDList = null;
  }
}


}
