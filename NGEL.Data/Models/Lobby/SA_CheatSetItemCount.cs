// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_CheatSetItemCount : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_CheatSetItemCount GetRootAsSA_CheatSetItemCount(ByteBuffer _bb) { return GetRootAsSA_CheatSetItemCount(_bb, new SA_CheatSetItemCount()); }
  public static SA_CheatSetItemCount GetRootAsSA_CheatSetItemCount(ByteBuffer _bb, SA_CheatSetItemCount obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_CheatSetItemCount __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.ItemData? ChangeItemList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.ItemData?)(new Lobby.ItemData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ChangeItemListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_CheatSetItemCount> CreateSA_CheatSetItemCount(FlatBufferBuilder builder,
      VectorOffset ChangeItemListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_CheatSetItemCount.AddChangeItemList(builder, ChangeItemListOffset);
    return SA_CheatSetItemCount.EndSA_CheatSetItemCount(builder);
  }

  public static void StartSA_CheatSetItemCount(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddChangeItemList(FlatBufferBuilder builder, VectorOffset ChangeItemListOffset) { builder.AddOffset(0, ChangeItemListOffset.Value, 0); }
  public static void StartChangeItemListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.SA_CheatSetItemCount> EndSA_CheatSetItemCount(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_CheatSetItemCount>(o);
  }
  public SA_CheatSetItemCountT UnPack() {
    var _o = new SA_CheatSetItemCountT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_CheatSetItemCountT _o) {
    _o.ChangeItemList = new List<Lobby.ItemDataT>();
    for (var _j = 0; _j < this.ChangeItemListLength; ++_j) {_o.ChangeItemList.Add(this.ChangeItemList(_j).HasValue ? this.ChangeItemList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_CheatSetItemCount> Pack(FlatBufferBuilder builder, SA_CheatSetItemCountT _o) {
    if (_o == null) return default(Offset<Lobby.SA_CheatSetItemCount>);
    var _ChangeItemList = default(VectorOffset);
    if (_o.ChangeItemList != null) {
      StartChangeItemListVector(builder, _o.ChangeItemList.Count);
      for (var _j = _o.ChangeItemList.Count - 1; _j >= 0; --_j) { Lobby.ItemData.Pack(builder, _o.ChangeItemList[_j]); }
      _ChangeItemList = builder.EndVector();
    }
    return CreateSA_CheatSetItemCount(
      builder,
      _ChangeItemList);
  }
}

public class SA_CheatSetItemCountT
{
  public List<Lobby.ItemDataT> ChangeItemList { get; set; }

  public SA_CheatSetItemCountT() {
    this.ChangeItemList = null;
  }
}


}
