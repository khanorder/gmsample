// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_UncheaterHackDetect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_UncheaterHackDetect GetRootAsSA_UncheaterHackDetect(ByteBuffer _bb) { return GetRootAsSA_UncheaterHackDetect(_bb, new SA_UncheaterHackDetect()); }
  public static SA_UncheaterHackDetect GetRootAsSA_UncheaterHackDetect(ByteBuffer _bb, SA_UncheaterHackDetect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_UncheaterHackDetect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool ShouldExitClient { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Lobby.EUncheaterReportType Type { get { int o = __p.__offset(6); return o != 0 ? (Lobby.EUncheaterReportType)__p.bb.Get(o + __p.bb_pos) : Lobby.EUncheaterReportType.None; } }
  public uint MajorCode { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint MinorCode { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Log { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLogBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLogBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLogArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<Lobby.SA_UncheaterHackDetect> CreateSA_UncheaterHackDetect(FlatBufferBuilder builder,
      bool shouldExitClient = false,
      Lobby.EUncheaterReportType Type = Lobby.EUncheaterReportType.None,
      uint MajorCode = 0,
      uint MinorCode = 0,
      StringOffset LogOffset = default(StringOffset)) {
    builder.StartTable(5);
    SA_UncheaterHackDetect.AddLog(builder, LogOffset);
    SA_UncheaterHackDetect.AddMinorCode(builder, MinorCode);
    SA_UncheaterHackDetect.AddMajorCode(builder, MajorCode);
    SA_UncheaterHackDetect.AddType(builder, Type);
    SA_UncheaterHackDetect.AddShouldExitClient(builder, shouldExitClient);
    return SA_UncheaterHackDetect.EndSA_UncheaterHackDetect(builder);
  }

  public static void StartSA_UncheaterHackDetect(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddShouldExitClient(FlatBufferBuilder builder, bool shouldExitClient) { builder.AddBool(0, shouldExitClient, false); }
  public static void AddType(FlatBufferBuilder builder, Lobby.EUncheaterReportType Type) { builder.AddByte(1, (byte)Type, 0); }
  public static void AddMajorCode(FlatBufferBuilder builder, uint MajorCode) { builder.AddUint(2, MajorCode, 0); }
  public static void AddMinorCode(FlatBufferBuilder builder, uint MinorCode) { builder.AddUint(3, MinorCode, 0); }
  public static void AddLog(FlatBufferBuilder builder, StringOffset LogOffset) { builder.AddOffset(4, LogOffset.Value, 0); }
  public static Offset<Lobby.SA_UncheaterHackDetect> EndSA_UncheaterHackDetect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_UncheaterHackDetect>(o);
  }
  public SA_UncheaterHackDetectT UnPack() {
    var _o = new SA_UncheaterHackDetectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_UncheaterHackDetectT _o) {
    _o.ShouldExitClient = this.ShouldExitClient;
    _o.Type = this.Type;
    _o.MajorCode = this.MajorCode;
    _o.MinorCode = this.MinorCode;
    _o.Log = this.Log;
  }
  public static Offset<Lobby.SA_UncheaterHackDetect> Pack(FlatBufferBuilder builder, SA_UncheaterHackDetectT _o) {
    if (_o == null) return default(Offset<Lobby.SA_UncheaterHackDetect>);
    var _Log = _o.Log == null ? default(StringOffset) : builder.CreateString(_o.Log);
    return CreateSA_UncheaterHackDetect(
      builder,
      _o.ShouldExitClient,
      _o.Type,
      _o.MajorCode,
      _o.MinorCode,
      _Log);
  }
}

public class SA_UncheaterHackDetectT
{
  public bool ShouldExitClient { get; set; }
  public Lobby.EUncheaterReportType Type { get; set; }
  public uint MajorCode { get; set; }
  public uint MinorCode { get; set; }
  public string Log { get; set; }

  public SA_UncheaterHackDetectT() {
    this.ShouldExitClient = false;
    this.Type = Lobby.EUncheaterReportType.None;
    this.MajorCode = 0;
    this.MinorCode = 0;
    this.Log = null;
  }
}


}
