// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CollectionData : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public CollectionData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CollectionID { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public bool IsRewarded { get { return 0!=__p.bb.Get(__p.bb_pos + 4); } }

  public static Offset<Lobby.CollectionData> CreateCollectionData(FlatBufferBuilder builder, int CollectionID, bool IsRewarded) {
    builder.Prep(4, 8);
    builder.Pad(3);
    builder.PutBool(IsRewarded);
    builder.PutInt(CollectionID);
    return new Offset<Lobby.CollectionData>(builder.Offset);
  }
  public CollectionDataT UnPack() {
    var _o = new CollectionDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CollectionDataT _o) {
    _o.CollectionID = this.CollectionID;
    _o.IsRewarded = this.IsRewarded;
  }
  public static Offset<Lobby.CollectionData> Pack(FlatBufferBuilder builder, CollectionDataT _o) {
    if (_o == null) return default(Offset<Lobby.CollectionData>);
    return CreateCollectionData(
      builder,
      _o.CollectionID,
      _o.IsRewarded);
  }
}

public class CollectionDataT
{
  public int CollectionID { get; set; }
  public bool IsRewarded { get; set; }

  public CollectionDataT() {
    this.CollectionID = 0;
    this.IsRewarded = false;
  }
}


}
