// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SN_FriendAccept : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SN_FriendAccept GetRootAsSN_FriendAccept(ByteBuffer _bb) { return GetRootAsSN_FriendAccept(_bb, new SN_FriendAccept()); }
  public static SN_FriendAccept GetRootAsSN_FriendAccept(ByteBuffer _bb, SN_FriendAccept obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SN_FriendAccept __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.FriendData? FriendInfo { get { int o = __p.__offset(4); return o != 0 ? (Lobby.FriendData?)(new Lobby.FriendData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Lobby.SN_FriendAccept> CreateSN_FriendAccept(FlatBufferBuilder builder,
      Offset<Lobby.FriendData> FriendInfoOffset = default(Offset<Lobby.FriendData>)) {
    builder.StartTable(1);
    SN_FriendAccept.AddFriendInfo(builder, FriendInfoOffset);
    return SN_FriendAccept.EndSN_FriendAccept(builder);
  }

  public static void StartSN_FriendAccept(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFriendInfo(FlatBufferBuilder builder, Offset<Lobby.FriendData> FriendInfoOffset) { builder.AddOffset(0, FriendInfoOffset.Value, 0); }
  public static Offset<Lobby.SN_FriendAccept> EndSN_FriendAccept(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SN_FriendAccept>(o);
  }
  public SN_FriendAcceptT UnPack() {
    var _o = new SN_FriendAcceptT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SN_FriendAcceptT _o) {
    _o.FriendInfo = this.FriendInfo.HasValue ? this.FriendInfo.Value.UnPack() : null;
  }
  public static Offset<Lobby.SN_FriendAccept> Pack(FlatBufferBuilder builder, SN_FriendAcceptT _o) {
    if (_o == null) return default(Offset<Lobby.SN_FriendAccept>);
    var _FriendInfo = _o.FriendInfo == null ? default(Offset<Lobby.FriendData>) : Lobby.FriendData.Pack(builder, _o.FriendInfo);
    return CreateSN_FriendAccept(
      builder,
      _FriendInfo);
  }
}

public class SN_FriendAcceptT
{
  public Lobby.FriendDataT FriendInfo { get; set; }

  public SN_FriendAcceptT() {
    this.FriendInfo = null;
  }
}


}
