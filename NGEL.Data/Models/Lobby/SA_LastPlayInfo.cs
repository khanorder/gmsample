// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_LastPlayInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_LastPlayInfo GetRootAsSA_LastPlayInfo(ByteBuffer _bb) { return GetRootAsSA_LastPlayInfo(_bb, new SA_LastPlayInfo()); }
  public static SA_LastPlayInfo GetRootAsSA_LastPlayInfo(ByteBuffer _bb, SA_LastPlayInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_LastPlayInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.EContentsType ContentsType { get { int o = __p.__offset(4); return o != 0 ? (Lobby.EContentsType)__p.bb.Get(o + __p.bb_pos) : Lobby.EContentsType.None; } }
  public string ServerUrl { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetServerUrlBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetServerUrlBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetServerUrlArray() { return __p.__vector_as_array<byte>(6); }
  public string MatchID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchIDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMatchIDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMatchIDArray() { return __p.__vector_as_array<byte>(8); }
  public string TeamID { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamIDBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTeamIDBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTeamIDArray() { return __p.__vector_as_array<byte>(10); }
  public bool IsForceReconnect { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Lobby.SA_LastPlayInfo> CreateSA_LastPlayInfo(FlatBufferBuilder builder,
      Lobby.EContentsType ContentsType = Lobby.EContentsType.None,
      StringOffset ServerUrlOffset = default(StringOffset),
      StringOffset MatchIDOffset = default(StringOffset),
      StringOffset TeamIDOffset = default(StringOffset),
      bool IsForceReconnect = false) {
    builder.StartTable(5);
    SA_LastPlayInfo.AddTeamID(builder, TeamIDOffset);
    SA_LastPlayInfo.AddMatchID(builder, MatchIDOffset);
    SA_LastPlayInfo.AddServerUrl(builder, ServerUrlOffset);
    SA_LastPlayInfo.AddIsForceReconnect(builder, IsForceReconnect);
    SA_LastPlayInfo.AddContentsType(builder, ContentsType);
    return SA_LastPlayInfo.EndSA_LastPlayInfo(builder);
  }

  public static void StartSA_LastPlayInfo(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddContentsType(FlatBufferBuilder builder, Lobby.EContentsType ContentsType) { builder.AddByte(0, (byte)ContentsType, 0); }
  public static void AddServerUrl(FlatBufferBuilder builder, StringOffset ServerUrlOffset) { builder.AddOffset(1, ServerUrlOffset.Value, 0); }
  public static void AddMatchID(FlatBufferBuilder builder, StringOffset MatchIDOffset) { builder.AddOffset(2, MatchIDOffset.Value, 0); }
  public static void AddTeamID(FlatBufferBuilder builder, StringOffset TeamIDOffset) { builder.AddOffset(3, TeamIDOffset.Value, 0); }
  public static void AddIsForceReconnect(FlatBufferBuilder builder, bool IsForceReconnect) { builder.AddBool(4, IsForceReconnect, false); }
  public static Offset<Lobby.SA_LastPlayInfo> EndSA_LastPlayInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_LastPlayInfo>(o);
  }
  public SA_LastPlayInfoT UnPack() {
    var _o = new SA_LastPlayInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_LastPlayInfoT _o) {
    _o.ContentsType = this.ContentsType;
    _o.ServerUrl = this.ServerUrl;
    _o.MatchID = this.MatchID;
    _o.TeamID = this.TeamID;
    _o.IsForceReconnect = this.IsForceReconnect;
  }
  public static Offset<Lobby.SA_LastPlayInfo> Pack(FlatBufferBuilder builder, SA_LastPlayInfoT _o) {
    if (_o == null) return default(Offset<Lobby.SA_LastPlayInfo>);
    var _ServerUrl = _o.ServerUrl == null ? default(StringOffset) : builder.CreateString(_o.ServerUrl);
    var _MatchID = _o.MatchID == null ? default(StringOffset) : builder.CreateString(_o.MatchID);
    var _TeamID = _o.TeamID == null ? default(StringOffset) : builder.CreateString(_o.TeamID);
    return CreateSA_LastPlayInfo(
      builder,
      _o.ContentsType,
      _ServerUrl,
      _MatchID,
      _TeamID,
      _o.IsForceReconnect);
  }
}

public class SA_LastPlayInfoT
{
  public Lobby.EContentsType ContentsType { get; set; }
  public string ServerUrl { get; set; }
  public string MatchID { get; set; }
  public string TeamID { get; set; }
  public bool IsForceReconnect { get; set; }

  public SA_LastPlayInfoT() {
    this.ContentsType = Lobby.EContentsType.None;
    this.ServerUrl = null;
    this.MatchID = null;
    this.TeamID = null;
    this.IsForceReconnect = false;
  }
}


}
