// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LobbyToLobby_EnterMultiMode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static LobbyToLobby_EnterMultiMode GetRootAsLobbyToLobby_EnterMultiMode(ByteBuffer _bb) { return GetRootAsLobbyToLobby_EnterMultiMode(_bb, new LobbyToLobby_EnterMultiMode()); }
  public static LobbyToLobby_EnterMultiMode GetRootAsLobbyToLobby_EnterMultiMode(ByteBuffer _bb, LobbyToLobby_EnterMultiMode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LobbyToLobby_EnterMultiMode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MatchingTableID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MatchID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchIDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMatchIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMatchIDArray() { return __p.__vector_as_array<byte>(6); }
  public Lobby.EContentsType ContentsType { get { int o = __p.__offset(8); return o != 0 ? (Lobby.EContentsType)__p.bb.Get(o + __p.bb_pos) : Lobby.EContentsType.None; } }
  public string TeamID { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamIDBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTeamIDBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTeamIDArray() { return __p.__vector_as_array<byte>(10); }
  public string ServerUrl { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetServerUrlBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetServerUrlBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetServerUrlArray() { return __p.__vector_as_array<byte>(12); }
  public string DedicatedID { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDedicatedIDBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDedicatedIDBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDedicatedIDArray() { return __p.__vector_as_array<byte>(14); }
  public string PlayerSessionID { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerSessionIDBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetPlayerSessionIDBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetPlayerSessionIDArray() { return __p.__vector_as_array<byte>(16); }
  public string GameSessionID { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameSessionIDBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetGameSessionIDBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetGameSessionIDArray() { return __p.__vector_as_array<byte>(18); }
  public bool IsCustomGame { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Lobby.LobbyToLobby_EnterMultiMode> CreateLobbyToLobby_EnterMultiMode(FlatBufferBuilder builder,
      int MatchingTableID = 0,
      StringOffset MatchIDOffset = default(StringOffset),
      Lobby.EContentsType ContentsType = Lobby.EContentsType.None,
      StringOffset TeamIDOffset = default(StringOffset),
      StringOffset ServerUrlOffset = default(StringOffset),
      StringOffset DedicatedIDOffset = default(StringOffset),
      StringOffset PlayerSessionIDOffset = default(StringOffset),
      StringOffset GameSessionIDOffset = default(StringOffset),
      bool IsCustomGame = false) {
    builder.StartTable(9);
    LobbyToLobby_EnterMultiMode.AddGameSessionID(builder, GameSessionIDOffset);
    LobbyToLobby_EnterMultiMode.AddPlayerSessionID(builder, PlayerSessionIDOffset);
    LobbyToLobby_EnterMultiMode.AddDedicatedID(builder, DedicatedIDOffset);
    LobbyToLobby_EnterMultiMode.AddServerUrl(builder, ServerUrlOffset);
    LobbyToLobby_EnterMultiMode.AddTeamID(builder, TeamIDOffset);
    LobbyToLobby_EnterMultiMode.AddMatchID(builder, MatchIDOffset);
    LobbyToLobby_EnterMultiMode.AddMatchingTableID(builder, MatchingTableID);
    LobbyToLobby_EnterMultiMode.AddIsCustomGame(builder, IsCustomGame);
    LobbyToLobby_EnterMultiMode.AddContentsType(builder, ContentsType);
    return LobbyToLobby_EnterMultiMode.EndLobbyToLobby_EnterMultiMode(builder);
  }

  public static void StartLobbyToLobby_EnterMultiMode(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddMatchingTableID(FlatBufferBuilder builder, int MatchingTableID) { builder.AddInt(0, MatchingTableID, 0); }
  public static void AddMatchID(FlatBufferBuilder builder, StringOffset MatchIDOffset) { builder.AddOffset(1, MatchIDOffset.Value, 0); }
  public static void AddContentsType(FlatBufferBuilder builder, Lobby.EContentsType ContentsType) { builder.AddByte(2, (byte)ContentsType, 0); }
  public static void AddTeamID(FlatBufferBuilder builder, StringOffset TeamIDOffset) { builder.AddOffset(3, TeamIDOffset.Value, 0); }
  public static void AddServerUrl(FlatBufferBuilder builder, StringOffset ServerUrlOffset) { builder.AddOffset(4, ServerUrlOffset.Value, 0); }
  public static void AddDedicatedID(FlatBufferBuilder builder, StringOffset DedicatedIDOffset) { builder.AddOffset(5, DedicatedIDOffset.Value, 0); }
  public static void AddPlayerSessionID(FlatBufferBuilder builder, StringOffset PlayerSessionIDOffset) { builder.AddOffset(6, PlayerSessionIDOffset.Value, 0); }
  public static void AddGameSessionID(FlatBufferBuilder builder, StringOffset GameSessionIDOffset) { builder.AddOffset(7, GameSessionIDOffset.Value, 0); }
  public static void AddIsCustomGame(FlatBufferBuilder builder, bool IsCustomGame) { builder.AddBool(8, IsCustomGame, false); }
  public static Offset<Lobby.LobbyToLobby_EnterMultiMode> EndLobbyToLobby_EnterMultiMode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.LobbyToLobby_EnterMultiMode>(o);
  }
  public LobbyToLobby_EnterMultiModeT UnPack() {
    var _o = new LobbyToLobby_EnterMultiModeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LobbyToLobby_EnterMultiModeT _o) {
    _o.MatchingTableID = this.MatchingTableID;
    _o.MatchID = this.MatchID;
    _o.ContentsType = this.ContentsType;
    _o.TeamID = this.TeamID;
    _o.ServerUrl = this.ServerUrl;
    _o.DedicatedID = this.DedicatedID;
    _o.PlayerSessionID = this.PlayerSessionID;
    _o.GameSessionID = this.GameSessionID;
    _o.IsCustomGame = this.IsCustomGame;
  }
  public static Offset<Lobby.LobbyToLobby_EnterMultiMode> Pack(FlatBufferBuilder builder, LobbyToLobby_EnterMultiModeT _o) {
    if (_o == null) return default(Offset<Lobby.LobbyToLobby_EnterMultiMode>);
    var _MatchID = _o.MatchID == null ? default(StringOffset) : builder.CreateString(_o.MatchID);
    var _TeamID = _o.TeamID == null ? default(StringOffset) : builder.CreateString(_o.TeamID);
    var _ServerUrl = _o.ServerUrl == null ? default(StringOffset) : builder.CreateString(_o.ServerUrl);
    var _DedicatedID = _o.DedicatedID == null ? default(StringOffset) : builder.CreateString(_o.DedicatedID);
    var _PlayerSessionID = _o.PlayerSessionID == null ? default(StringOffset) : builder.CreateString(_o.PlayerSessionID);
    var _GameSessionID = _o.GameSessionID == null ? default(StringOffset) : builder.CreateString(_o.GameSessionID);
    return CreateLobbyToLobby_EnterMultiMode(
      builder,
      _o.MatchingTableID,
      _MatchID,
      _o.ContentsType,
      _TeamID,
      _ServerUrl,
      _DedicatedID,
      _PlayerSessionID,
      _GameSessionID,
      _o.IsCustomGame);
  }
}

public class LobbyToLobby_EnterMultiModeT
{
  public int MatchingTableID { get; set; }
  public string MatchID { get; set; }
  public Lobby.EContentsType ContentsType { get; set; }
  public string TeamID { get; set; }
  public string ServerUrl { get; set; }
  public string DedicatedID { get; set; }
  public string PlayerSessionID { get; set; }
  public string GameSessionID { get; set; }
  public bool IsCustomGame { get; set; }

  public LobbyToLobby_EnterMultiModeT() {
    this.MatchingTableID = 0;
    this.MatchID = null;
    this.ContentsType = Lobby.EContentsType.None;
    this.TeamID = null;
    this.ServerUrl = null;
    this.DedicatedID = null;
    this.PlayerSessionID = null;
    this.GameSessionID = null;
    this.IsCustomGame = false;
  }
}


}
