// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_CheatKey : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_CheatKey GetRootAsCQ_CheatKey(ByteBuffer _bb) { return GetRootAsCQ_CheatKey(_bb, new CQ_CheatKey()); }
  public static CQ_CheatKey GetRootAsCQ_CheatKey(ByteBuffer _bb, CQ_CheatKey obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_CheatKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CheatKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCheatKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCheatKeyArray() { return __p.__vector_as_array<byte>(4); }
  public string CheatValues(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CheatValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.CQ_CheatKey> CreateCQ_CheatKey(FlatBufferBuilder builder,
      StringOffset CheatKeyOffset = default(StringOffset),
      VectorOffset CheatValuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CQ_CheatKey.AddCheatValues(builder, CheatValuesOffset);
    CQ_CheatKey.AddCheatKey(builder, CheatKeyOffset);
    return CQ_CheatKey.EndCQ_CheatKey(builder);
  }

  public static void StartCQ_CheatKey(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCheatKey(FlatBufferBuilder builder, StringOffset CheatKeyOffset) { builder.AddOffset(0, CheatKeyOffset.Value, 0); }
  public static void AddCheatValues(FlatBufferBuilder builder, VectorOffset CheatValuesOffset) { builder.AddOffset(1, CheatValuesOffset.Value, 0); }
  public static VectorOffset CreateCheatValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCheatValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCheatValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCheatValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCheatValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.CQ_CheatKey> EndCQ_CheatKey(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_CheatKey>(o);
  }
  public CQ_CheatKeyT UnPack() {
    var _o = new CQ_CheatKeyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_CheatKeyT _o) {
    _o.CheatKey = this.CheatKey;
    _o.CheatValues = new List<string>();
    for (var _j = 0; _j < this.CheatValuesLength; ++_j) {_o.CheatValues.Add(this.CheatValues(_j));}
  }
  public static Offset<Lobby.CQ_CheatKey> Pack(FlatBufferBuilder builder, CQ_CheatKeyT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_CheatKey>);
    var _CheatKey = _o.CheatKey == null ? default(StringOffset) : builder.CreateString(_o.CheatKey);
    var _CheatValues = default(VectorOffset);
    if (_o.CheatValues != null) {
      var __CheatValues = new StringOffset[_o.CheatValues.Count];
      for (var _j = 0; _j < __CheatValues.Length; ++_j) { __CheatValues[_j] = builder.CreateString(_o.CheatValues[_j]); }
      _CheatValues = CreateCheatValuesVector(builder, __CheatValues);
    }
    return CreateCQ_CheatKey(
      builder,
      _CheatKey,
      _CheatValues);
  }
}

public class CQ_CheatKeyT
{
  public string CheatKey { get; set; }
  public List<string> CheatValues { get; set; }

  public CQ_CheatKeyT() {
    this.CheatKey = null;
    this.CheatValues = null;
  }
}


}
