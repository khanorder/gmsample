// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DediToLobby_VehicleRaceFinish : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static DediToLobby_VehicleRaceFinish GetRootAsDediToLobby_VehicleRaceFinish(ByteBuffer _bb) { return GetRootAsDediToLobby_VehicleRaceFinish(_bb, new DediToLobby_VehicleRaceFinish()); }
  public static DediToLobby_VehicleRaceFinish GetRootAsDediToLobby_VehicleRaceFinish(ByteBuffer _bb, DediToLobby_VehicleRaceFinish obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DediToLobby_VehicleRaceFinish __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.ERaceFinishState RaceFinishState { get { int o = __p.__offset(6); return o != 0 ? (Lobby.ERaceFinishState)__p.bb.Get(o + __p.bb_pos) : Lobby.ERaceFinishState.None; } }
  public string DedicatedID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDedicatedIDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDedicatedIDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDedicatedIDArray() { return __p.__vector_as_array<byte>(8); }
  public string RaceUniqueID { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRaceUniqueIDBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRaceUniqueIDBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRaceUniqueIDArray() { return __p.__vector_as_array<byte>(10); }
  public float RaceTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int RaceRanking { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RaceScore { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.DediToLobby_VehicleRaceFinish> CreateDediToLobby_VehicleRaceFinish(FlatBufferBuilder builder,
      int UID = 0,
      Lobby.ERaceFinishState RaceFinishState = Lobby.ERaceFinishState.None,
      StringOffset DedicatedIDOffset = default(StringOffset),
      StringOffset RaceUniqueIDOffset = default(StringOffset),
      float RaceTime = 0.0f,
      int RaceRanking = 0,
      int RaceScore = 0) {
    builder.StartTable(7);
    DediToLobby_VehicleRaceFinish.AddRaceScore(builder, RaceScore);
    DediToLobby_VehicleRaceFinish.AddRaceRanking(builder, RaceRanking);
    DediToLobby_VehicleRaceFinish.AddRaceTime(builder, RaceTime);
    DediToLobby_VehicleRaceFinish.AddRaceUniqueID(builder, RaceUniqueIDOffset);
    DediToLobby_VehicleRaceFinish.AddDedicatedID(builder, DedicatedIDOffset);
    DediToLobby_VehicleRaceFinish.AddUID(builder, UID);
    DediToLobby_VehicleRaceFinish.AddRaceFinishState(builder, RaceFinishState);
    return DediToLobby_VehicleRaceFinish.EndDediToLobby_VehicleRaceFinish(builder);
  }

  public static void StartDediToLobby_VehicleRaceFinish(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddUID(FlatBufferBuilder builder, int UID) { builder.AddInt(0, UID, 0); }
  public static void AddRaceFinishState(FlatBufferBuilder builder, Lobby.ERaceFinishState RaceFinishState) { builder.AddByte(1, (byte)RaceFinishState, 0); }
  public static void AddDedicatedID(FlatBufferBuilder builder, StringOffset DedicatedIDOffset) { builder.AddOffset(2, DedicatedIDOffset.Value, 0); }
  public static void AddRaceUniqueID(FlatBufferBuilder builder, StringOffset RaceUniqueIDOffset) { builder.AddOffset(3, RaceUniqueIDOffset.Value, 0); }
  public static void AddRaceTime(FlatBufferBuilder builder, float RaceTime) { builder.AddFloat(4, RaceTime, 0.0f); }
  public static void AddRaceRanking(FlatBufferBuilder builder, int RaceRanking) { builder.AddInt(5, RaceRanking, 0); }
  public static void AddRaceScore(FlatBufferBuilder builder, int RaceScore) { builder.AddInt(6, RaceScore, 0); }
  public static Offset<Lobby.DediToLobby_VehicleRaceFinish> EndDediToLobby_VehicleRaceFinish(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.DediToLobby_VehicleRaceFinish>(o);
  }
  public DediToLobby_VehicleRaceFinishT UnPack() {
    var _o = new DediToLobby_VehicleRaceFinishT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DediToLobby_VehicleRaceFinishT _o) {
    _o.UID = this.UID;
    _o.RaceFinishState = this.RaceFinishState;
    _o.DedicatedID = this.DedicatedID;
    _o.RaceUniqueID = this.RaceUniqueID;
    _o.RaceTime = this.RaceTime;
    _o.RaceRanking = this.RaceRanking;
    _o.RaceScore = this.RaceScore;
  }
  public static Offset<Lobby.DediToLobby_VehicleRaceFinish> Pack(FlatBufferBuilder builder, DediToLobby_VehicleRaceFinishT _o) {
    if (_o == null) return default(Offset<Lobby.DediToLobby_VehicleRaceFinish>);
    var _DedicatedID = _o.DedicatedID == null ? default(StringOffset) : builder.CreateString(_o.DedicatedID);
    var _RaceUniqueID = _o.RaceUniqueID == null ? default(StringOffset) : builder.CreateString(_o.RaceUniqueID);
    return CreateDediToLobby_VehicleRaceFinish(
      builder,
      _o.UID,
      _o.RaceFinishState,
      _DedicatedID,
      _RaceUniqueID,
      _o.RaceTime,
      _o.RaceRanking,
      _o.RaceScore);
  }
}

public class DediToLobby_VehicleRaceFinishT
{
  public int UID { get; set; }
  public Lobby.ERaceFinishState RaceFinishState { get; set; }
  public string DedicatedID { get; set; }
  public string RaceUniqueID { get; set; }
  public float RaceTime { get; set; }
  public int RaceRanking { get; set; }
  public int RaceScore { get; set; }

  public DediToLobby_VehicleRaceFinishT() {
    this.UID = 0;
    this.RaceFinishState = Lobby.ERaceFinishState.None;
    this.DedicatedID = null;
    this.RaceUniqueID = null;
    this.RaceTime = 0.0f;
    this.RaceRanking = 0;
    this.RaceScore = 0;
  }
}


}
