// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_MissionAddCount : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_MissionAddCount GetRootAsCQ_MissionAddCount(ByteBuffer _bb) { return GetRootAsCQ_MissionAddCount(_bb, new CQ_MissionAddCount()); }
  public static CQ_MissionAddCount GetRootAsCQ_MissionAddCount(ByteBuffer _bb, CQ_MissionAddCount obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_MissionAddCount __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.MissionAddCountData? AddList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.MissionAddCountData?)(new Lobby.MissionAddCountData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int AddListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.CQ_MissionAddCount> CreateCQ_MissionAddCount(FlatBufferBuilder builder,
      VectorOffset AddListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CQ_MissionAddCount.AddAddList(builder, AddListOffset);
    return CQ_MissionAddCount.EndCQ_MissionAddCount(builder);
  }

  public static void StartCQ_MissionAddCount(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddAddList(FlatBufferBuilder builder, VectorOffset AddListOffset) { builder.AddOffset(0, AddListOffset.Value, 0); }
  public static void StartAddListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Lobby.CQ_MissionAddCount> EndCQ_MissionAddCount(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_MissionAddCount>(o);
  }
  public CQ_MissionAddCountT UnPack() {
    var _o = new CQ_MissionAddCountT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_MissionAddCountT _o) {
    _o.AddList = new List<Lobby.MissionAddCountDataT>();
    for (var _j = 0; _j < this.AddListLength; ++_j) {_o.AddList.Add(this.AddList(_j).HasValue ? this.AddList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.CQ_MissionAddCount> Pack(FlatBufferBuilder builder, CQ_MissionAddCountT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_MissionAddCount>);
    var _AddList = default(VectorOffset);
    if (_o.AddList != null) {
      StartAddListVector(builder, _o.AddList.Count);
      for (var _j = _o.AddList.Count - 1; _j >= 0; --_j) { Lobby.MissionAddCountData.Pack(builder, _o.AddList[_j]); }
      _AddList = builder.EndVector();
    }
    return CreateCQ_MissionAddCount(
      builder,
      _AddList);
  }
}

public class CQ_MissionAddCountT
{
  public List<Lobby.MissionAddCountDataT> AddList { get; set; }

  public CQ_MissionAddCountT() {
    this.AddList = null;
  }
}


}
