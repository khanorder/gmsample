// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_OpenWorldZoneChange : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_OpenWorldZoneChange GetRootAsSA_OpenWorldZoneChange(ByteBuffer _bb) { return GetRootAsSA_OpenWorldZoneChange(_bb, new SA_OpenWorldZoneChange()); }
  public static SA_OpenWorldZoneChange GetRootAsSA_OpenWorldZoneChange(ByteBuffer _bb, SA_OpenWorldZoneChange obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_OpenWorldZoneChange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LastZoneID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.SA_OpenWorldZoneChange> CreateSA_OpenWorldZoneChange(FlatBufferBuilder builder,
      int LastZoneID = 0) {
    builder.StartTable(1);
    SA_OpenWorldZoneChange.AddLastZoneID(builder, LastZoneID);
    return SA_OpenWorldZoneChange.EndSA_OpenWorldZoneChange(builder);
  }

  public static void StartSA_OpenWorldZoneChange(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLastZoneID(FlatBufferBuilder builder, int LastZoneID) { builder.AddInt(0, LastZoneID, 0); }
  public static Offset<Lobby.SA_OpenWorldZoneChange> EndSA_OpenWorldZoneChange(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_OpenWorldZoneChange>(o);
  }
  public SA_OpenWorldZoneChangeT UnPack() {
    var _o = new SA_OpenWorldZoneChangeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_OpenWorldZoneChangeT _o) {
    _o.LastZoneID = this.LastZoneID;
  }
  public static Offset<Lobby.SA_OpenWorldZoneChange> Pack(FlatBufferBuilder builder, SA_OpenWorldZoneChangeT _o) {
    if (_o == null) return default(Offset<Lobby.SA_OpenWorldZoneChange>);
    return CreateSA_OpenWorldZoneChange(
      builder,
      _o.LastZoneID);
  }
}

public class SA_OpenWorldZoneChangeT
{
  public int LastZoneID { get; set; }

  public SA_OpenWorldZoneChangeT() {
    this.LastZoneID = 0;
  }
}


}
