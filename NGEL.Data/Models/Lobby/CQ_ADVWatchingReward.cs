// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_ADVWatchingReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_ADVWatchingReward GetRootAsCQ_ADVWatchingReward(ByteBuffer _bb) { return GetRootAsCQ_ADVWatchingReward(_bb, new CQ_ADVWatchingReward()); }
  public static CQ_ADVWatchingReward GetRootAsCQ_ADVWatchingReward(ByteBuffer _bb, CQ_ADVWatchingReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_ADVWatchingReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ADVIDList(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ADVIDListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetADVIDListBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetADVIDListBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetADVIDListArray() { return __p.__vector_as_array<int>(4); }

  public static Offset<Lobby.CQ_ADVWatchingReward> CreateCQ_ADVWatchingReward(FlatBufferBuilder builder,
      VectorOffset ADVIDListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CQ_ADVWatchingReward.AddADVIDList(builder, ADVIDListOffset);
    return CQ_ADVWatchingReward.EndCQ_ADVWatchingReward(builder);
  }

  public static void StartCQ_ADVWatchingReward(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddADVIDList(FlatBufferBuilder builder, VectorOffset ADVIDListOffset) { builder.AddOffset(0, ADVIDListOffset.Value, 0); }
  public static VectorOffset CreateADVIDListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateADVIDListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateADVIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateADVIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartADVIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.CQ_ADVWatchingReward> EndCQ_ADVWatchingReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_ADVWatchingReward>(o);
  }
  public CQ_ADVWatchingRewardT UnPack() {
    var _o = new CQ_ADVWatchingRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_ADVWatchingRewardT _o) {
    _o.ADVIDList = new List<int>();
    for (var _j = 0; _j < this.ADVIDListLength; ++_j) {_o.ADVIDList.Add(this.ADVIDList(_j));}
  }
  public static Offset<Lobby.CQ_ADVWatchingReward> Pack(FlatBufferBuilder builder, CQ_ADVWatchingRewardT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_ADVWatchingReward>);
    var _ADVIDList = default(VectorOffset);
    if (_o.ADVIDList != null) {
      var __ADVIDList = _o.ADVIDList.ToArray();
      _ADVIDList = CreateADVIDListVector(builder, __ADVIDList);
    }
    return CreateCQ_ADVWatchingReward(
      builder,
      _ADVIDList);
  }
}

public class CQ_ADVWatchingRewardT
{
  public List<int> ADVIDList { get; set; }

  public CQ_ADVWatchingRewardT() {
    this.ADVIDList = null;
  }
}


}
