// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ExpressionData : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ExpressionData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.EExpressionType ExpressionType { get { return (Lobby.EExpressionType)__p.bb.Get(__p.bb_pos + 0); } }
  public int ExpressionID { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<Lobby.ExpressionData> CreateExpressionData(FlatBufferBuilder builder, Lobby.EExpressionType ExpressionType, int ExpressionID) {
    builder.Prep(4, 8);
    builder.PutInt(ExpressionID);
    builder.Pad(3);
    builder.PutByte((byte)ExpressionType);
    return new Offset<Lobby.ExpressionData>(builder.Offset);
  }
  public ExpressionDataT UnPack() {
    var _o = new ExpressionDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ExpressionDataT _o) {
    _o.ExpressionType = this.ExpressionType;
    _o.ExpressionID = this.ExpressionID;
  }
  public static Offset<Lobby.ExpressionData> Pack(FlatBufferBuilder builder, ExpressionDataT _o) {
    if (_o == null) return default(Offset<Lobby.ExpressionData>);
    return CreateExpressionData(
      builder,
      _o.ExpressionType,
      _o.ExpressionID);
  }
}

public class ExpressionDataT
{
  public Lobby.EExpressionType ExpressionType { get; set; }
  public int ExpressionID { get; set; }

  public ExpressionDataT() {
    this.ExpressionType = Lobby.EExpressionType.None;
    this.ExpressionID = 0;
  }
}


}
