// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_RpgTutorialComplete : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_RpgTutorialComplete GetRootAsSA_RpgTutorialComplete(ByteBuffer _bb) { return GetRootAsSA_RpgTutorialComplete(_bb, new SA_RpgTutorialComplete()); }
  public static SA_RpgTutorialComplete GetRootAsSA_RpgTutorialComplete(ByteBuffer _bb, SA_RpgTutorialComplete obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_RpgTutorialComplete __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsGlitchTutorialComplete { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int LastClearChapterID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.SA_RpgTutorialComplete> CreateSA_RpgTutorialComplete(FlatBufferBuilder builder,
      bool IsGlitchTutorialComplete = false,
      int LastClearChapterID = 0) {
    builder.StartTable(2);
    SA_RpgTutorialComplete.AddLastClearChapterID(builder, LastClearChapterID);
    SA_RpgTutorialComplete.AddIsGlitchTutorialComplete(builder, IsGlitchTutorialComplete);
    return SA_RpgTutorialComplete.EndSA_RpgTutorialComplete(builder);
  }

  public static void StartSA_RpgTutorialComplete(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddIsGlitchTutorialComplete(FlatBufferBuilder builder, bool IsGlitchTutorialComplete) { builder.AddBool(0, IsGlitchTutorialComplete, false); }
  public static void AddLastClearChapterID(FlatBufferBuilder builder, int LastClearChapterID) { builder.AddInt(1, LastClearChapterID, 0); }
  public static Offset<Lobby.SA_RpgTutorialComplete> EndSA_RpgTutorialComplete(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_RpgTutorialComplete>(o);
  }
  public SA_RpgTutorialCompleteT UnPack() {
    var _o = new SA_RpgTutorialCompleteT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_RpgTutorialCompleteT _o) {
    _o.IsGlitchTutorialComplete = this.IsGlitchTutorialComplete;
    _o.LastClearChapterID = this.LastClearChapterID;
  }
  public static Offset<Lobby.SA_RpgTutorialComplete> Pack(FlatBufferBuilder builder, SA_RpgTutorialCompleteT _o) {
    if (_o == null) return default(Offset<Lobby.SA_RpgTutorialComplete>);
    return CreateSA_RpgTutorialComplete(
      builder,
      _o.IsGlitchTutorialComplete,
      _o.LastClearChapterID);
  }
}

public class SA_RpgTutorialCompleteT
{
  public bool IsGlitchTutorialComplete { get; set; }
  public int LastClearChapterID { get; set; }

  public SA_RpgTutorialCompleteT() {
    this.IsGlitchTutorialComplete = false;
    this.LastClearChapterID = 0;
  }
}


}
