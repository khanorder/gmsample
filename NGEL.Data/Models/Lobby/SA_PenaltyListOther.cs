// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_PenaltyListOther : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_PenaltyListOther GetRootAsSA_PenaltyListOther(ByteBuffer _bb) { return GetRootAsSA_PenaltyListOther(_bb, new SA_PenaltyListOther()); }
  public static SA_PenaltyListOther GetRootAsSA_PenaltyListOther(ByteBuffer _bb, SA_PenaltyListOther obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_PenaltyListOther __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TargetUID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.PenaltyInfo? PenaltyList(int j) { int o = __p.__offset(6); return o != 0 ? (Lobby.PenaltyInfo?)(new Lobby.PenaltyInfo()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int PenaltyListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_PenaltyListOther> CreateSA_PenaltyListOther(FlatBufferBuilder builder,
      int TargetUID = 0,
      VectorOffset PenaltyListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SA_PenaltyListOther.AddPenaltyList(builder, PenaltyListOffset);
    SA_PenaltyListOther.AddTargetUID(builder, TargetUID);
    return SA_PenaltyListOther.EndSA_PenaltyListOther(builder);
  }

  public static void StartSA_PenaltyListOther(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTargetUID(FlatBufferBuilder builder, int TargetUID) { builder.AddInt(0, TargetUID, 0); }
  public static void AddPenaltyList(FlatBufferBuilder builder, VectorOffset PenaltyListOffset) { builder.AddOffset(1, PenaltyListOffset.Value, 0); }
  public static void StartPenaltyListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 4); }
  public static Offset<Lobby.SA_PenaltyListOther> EndSA_PenaltyListOther(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_PenaltyListOther>(o);
  }
  public SA_PenaltyListOtherT UnPack() {
    var _o = new SA_PenaltyListOtherT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_PenaltyListOtherT _o) {
    _o.TargetUID = this.TargetUID;
    _o.PenaltyList = new List<Lobby.PenaltyInfoT>();
    for (var _j = 0; _j < this.PenaltyListLength; ++_j) {_o.PenaltyList.Add(this.PenaltyList(_j).HasValue ? this.PenaltyList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_PenaltyListOther> Pack(FlatBufferBuilder builder, SA_PenaltyListOtherT _o) {
    if (_o == null) return default(Offset<Lobby.SA_PenaltyListOther>);
    var _PenaltyList = default(VectorOffset);
    if (_o.PenaltyList != null) {
      StartPenaltyListVector(builder, _o.PenaltyList.Count);
      for (var _j = _o.PenaltyList.Count - 1; _j >= 0; --_j) { Lobby.PenaltyInfo.Pack(builder, _o.PenaltyList[_j]); }
      _PenaltyList = builder.EndVector();
    }
    return CreateSA_PenaltyListOther(
      builder,
      _o.TargetUID,
      _PenaltyList);
  }
}

public class SA_PenaltyListOtherT
{
  public int TargetUID { get; set; }
  public List<Lobby.PenaltyInfoT> PenaltyList { get; set; }

  public SA_PenaltyListOtherT() {
    this.TargetUID = 0;
    this.PenaltyList = null;
  }
}


}
