// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_RpgEnd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_RpgEnd GetRootAsSA_RpgEnd(ByteBuffer _bb) { return GetRootAsSA_RpgEnd(_bb, new SA_RpgEnd()); }
  public static SA_RpgEnd GetRootAsSA_RpgEnd(ByteBuffer _bb, SA_RpgEnd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_RpgEnd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.AssetData? ChangeAssetList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.AssetData?)(new Lobby.AssetData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int ChangeAssetListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Lobby.ItemData? ChangeItemList(int j) { int o = __p.__offset(6); return o != 0 ? (Lobby.ItemData?)(new Lobby.ItemData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ChangeItemListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int LastClearChapterID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsClear { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Lobby.WonderCubeData? ChangeWonderCube { get { int o = __p.__offset(12); return o != 0 ? (Lobby.WonderCubeData?)(new Lobby.WonderCubeData()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<Lobby.SA_RpgEnd> CreateSA_RpgEnd(FlatBufferBuilder builder,
      VectorOffset ChangeAssetListOffset = default(VectorOffset),
      VectorOffset ChangeItemListOffset = default(VectorOffset),
      int LastClearChapterID = 0,
      bool IsClear = false,
      Lobby.WonderCubeDataT ChangeWonderCube = null) {
    builder.StartTable(5);
    SA_RpgEnd.AddChangeWonderCube(builder, Lobby.WonderCubeData.Pack(builder, ChangeWonderCube));
    SA_RpgEnd.AddLastClearChapterID(builder, LastClearChapterID);
    SA_RpgEnd.AddChangeItemList(builder, ChangeItemListOffset);
    SA_RpgEnd.AddChangeAssetList(builder, ChangeAssetListOffset);
    SA_RpgEnd.AddIsClear(builder, IsClear);
    return SA_RpgEnd.EndSA_RpgEnd(builder);
  }

  public static void StartSA_RpgEnd(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddChangeAssetList(FlatBufferBuilder builder, VectorOffset ChangeAssetListOffset) { builder.AddOffset(0, ChangeAssetListOffset.Value, 0); }
  public static void StartChangeAssetListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddChangeItemList(FlatBufferBuilder builder, VectorOffset ChangeItemListOffset) { builder.AddOffset(1, ChangeItemListOffset.Value, 0); }
  public static void StartChangeItemListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddLastClearChapterID(FlatBufferBuilder builder, int LastClearChapterID) { builder.AddInt(2, LastClearChapterID, 0); }
  public static void AddIsClear(FlatBufferBuilder builder, bool IsClear) { builder.AddBool(3, IsClear, false); }
  public static void AddChangeWonderCube(FlatBufferBuilder builder, Offset<Lobby.WonderCubeData> ChangeWonderCubeOffset) { builder.AddStruct(4, ChangeWonderCubeOffset.Value, 0); }
  public static Offset<Lobby.SA_RpgEnd> EndSA_RpgEnd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_RpgEnd>(o);
  }
  public SA_RpgEndT UnPack() {
    var _o = new SA_RpgEndT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_RpgEndT _o) {
    _o.ChangeAssetList = new List<Lobby.AssetDataT>();
    for (var _j = 0; _j < this.ChangeAssetListLength; ++_j) {_o.ChangeAssetList.Add(this.ChangeAssetList(_j).HasValue ? this.ChangeAssetList(_j).Value.UnPack() : null);}
    _o.ChangeItemList = new List<Lobby.ItemDataT>();
    for (var _j = 0; _j < this.ChangeItemListLength; ++_j) {_o.ChangeItemList.Add(this.ChangeItemList(_j).HasValue ? this.ChangeItemList(_j).Value.UnPack() : null);}
    _o.LastClearChapterID = this.LastClearChapterID;
    _o.IsClear = this.IsClear;
    _o.ChangeWonderCube = this.ChangeWonderCube.HasValue ? this.ChangeWonderCube.Value.UnPack() : null;
  }
  public static Offset<Lobby.SA_RpgEnd> Pack(FlatBufferBuilder builder, SA_RpgEndT _o) {
    if (_o == null) return default(Offset<Lobby.SA_RpgEnd>);
    var _ChangeAssetList = default(VectorOffset);
    if (_o.ChangeAssetList != null) {
      StartChangeAssetListVector(builder, _o.ChangeAssetList.Count);
      for (var _j = _o.ChangeAssetList.Count - 1; _j >= 0; --_j) { Lobby.AssetData.Pack(builder, _o.ChangeAssetList[_j]); }
      _ChangeAssetList = builder.EndVector();
    }
    var _ChangeItemList = default(VectorOffset);
    if (_o.ChangeItemList != null) {
      StartChangeItemListVector(builder, _o.ChangeItemList.Count);
      for (var _j = _o.ChangeItemList.Count - 1; _j >= 0; --_j) { Lobby.ItemData.Pack(builder, _o.ChangeItemList[_j]); }
      _ChangeItemList = builder.EndVector();
    }
    return CreateSA_RpgEnd(
      builder,
      _ChangeAssetList,
      _ChangeItemList,
      _o.LastClearChapterID,
      _o.IsClear,
      _o.ChangeWonderCube);
  }
}

public class SA_RpgEndT
{
  public List<Lobby.AssetDataT> ChangeAssetList { get; set; }
  public List<Lobby.ItemDataT> ChangeItemList { get; set; }
  public int LastClearChapterID { get; set; }
  public bool IsClear { get; set; }
  public Lobby.WonderCubeDataT ChangeWonderCube { get; set; }

  public SA_RpgEndT() {
    this.ChangeAssetList = null;
    this.ChangeItemList = null;
    this.LastClearChapterID = 0;
    this.IsClear = false;
    this.ChangeWonderCube = new Lobby.WonderCubeDataT();
  }
}


}
