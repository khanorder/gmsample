// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SN_ProductionStart : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SN_ProductionStart GetRootAsSN_ProductionStart(ByteBuffer _bb) { return GetRootAsSN_ProductionStart(_bb, new SN_ProductionStart()); }
  public static SN_ProductionStart GetRootAsSN_ProductionStart(ByteBuffer _bb, SN_ProductionStart obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SN_ProductionStart __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.ProductionData? StartProduction { get { int o = __p.__offset(4); return o != 0 ? (Lobby.ProductionData?)(new Lobby.ProductionData()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartSN_ProductionStart(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddStartProduction(FlatBufferBuilder builder, Offset<Lobby.ProductionData> StartProductionOffset) { builder.AddStruct(0, StartProductionOffset.Value, 0); }
  public static Offset<Lobby.SN_ProductionStart> EndSN_ProductionStart(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SN_ProductionStart>(o);
  }
  public SN_ProductionStartT UnPack() {
    var _o = new SN_ProductionStartT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SN_ProductionStartT _o) {
    _o.StartProduction = this.StartProduction.HasValue ? this.StartProduction.Value.UnPack() : null;
  }
  public static Offset<Lobby.SN_ProductionStart> Pack(FlatBufferBuilder builder, SN_ProductionStartT _o) {
    if (_o == null) return default(Offset<Lobby.SN_ProductionStart>);
    StartSN_ProductionStart(builder);
    AddStartProduction(builder, Lobby.ProductionData.Pack(builder, _o.StartProduction));
    return EndSN_ProductionStart(builder);
  }
}

public class SN_ProductionStartT
{
  public Lobby.ProductionDataT StartProduction { get; set; }

  public SN_ProductionStartT() {
    this.StartProduction = new Lobby.ProductionDataT();
  }
}


}
