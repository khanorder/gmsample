// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SN_WonderCubeNew : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SN_WonderCubeNew GetRootAsSN_WonderCubeNew(ByteBuffer _bb) { return GetRootAsSN_WonderCubeNew(_bb, new SN_WonderCubeNew()); }
  public static SN_WonderCubeNew GetRootAsSN_WonderCubeNew(ByteBuffer _bb, SN_WonderCubeNew obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SN_WonderCubeNew __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.WonderCubeData? ChangeWonderCube { get { int o = __p.__offset(4); return o != 0 ? (Lobby.WonderCubeData?)(new Lobby.WonderCubeData()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartSN_WonderCubeNew(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddChangeWonderCube(FlatBufferBuilder builder, Offset<Lobby.WonderCubeData> ChangeWonderCubeOffset) { builder.AddStruct(0, ChangeWonderCubeOffset.Value, 0); }
  public static Offset<Lobby.SN_WonderCubeNew> EndSN_WonderCubeNew(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SN_WonderCubeNew>(o);
  }
  public SN_WonderCubeNewT UnPack() {
    var _o = new SN_WonderCubeNewT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SN_WonderCubeNewT _o) {
    _o.ChangeWonderCube = this.ChangeWonderCube.HasValue ? this.ChangeWonderCube.Value.UnPack() : null;
  }
  public static Offset<Lobby.SN_WonderCubeNew> Pack(FlatBufferBuilder builder, SN_WonderCubeNewT _o) {
    if (_o == null) return default(Offset<Lobby.SN_WonderCubeNew>);
    StartSN_WonderCubeNew(builder);
    AddChangeWonderCube(builder, Lobby.WonderCubeData.Pack(builder, _o.ChangeWonderCube));
    return EndSN_WonderCubeNew(builder);
  }
}

public class SN_WonderCubeNewT
{
  public Lobby.WonderCubeDataT ChangeWonderCube { get; set; }

  public SN_WonderCubeNewT() {
    this.ChangeWonderCube = new Lobby.WonderCubeDataT();
  }
}


}
