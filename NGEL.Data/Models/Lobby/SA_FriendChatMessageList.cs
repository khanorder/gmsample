// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_FriendChatMessageList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_FriendChatMessageList GetRootAsSA_FriendChatMessageList(ByteBuffer _bb) { return GetRootAsSA_FriendChatMessageList(_bb, new SA_FriendChatMessageList()); }
  public static SA_FriendChatMessageList GetRootAsSA_FriendChatMessageList(ByteBuffer _bb, SA_FriendChatMessageList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_FriendChatMessageList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int FriendUID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.FriendChatData? ChatList(int j) { int o = __p.__offset(6); return o != 0 ? (Lobby.FriendChatData?)(new Lobby.FriendChatData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChatListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_FriendChatMessageList> CreateSA_FriendChatMessageList(FlatBufferBuilder builder,
      int FriendUID = 0,
      VectorOffset ChatListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SA_FriendChatMessageList.AddChatList(builder, ChatListOffset);
    SA_FriendChatMessageList.AddFriendUID(builder, FriendUID);
    return SA_FriendChatMessageList.EndSA_FriendChatMessageList(builder);
  }

  public static void StartSA_FriendChatMessageList(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFriendUID(FlatBufferBuilder builder, int FriendUID) { builder.AddInt(0, FriendUID, 0); }
  public static void AddChatList(FlatBufferBuilder builder, VectorOffset ChatListOffset) { builder.AddOffset(1, ChatListOffset.Value, 0); }
  public static VectorOffset CreateChatListVector(FlatBufferBuilder builder, Offset<Lobby.FriendChatData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChatListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.FriendChatData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChatListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.FriendChatData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChatListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.FriendChatData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartChatListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.SA_FriendChatMessageList> EndSA_FriendChatMessageList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_FriendChatMessageList>(o);
  }
  public SA_FriendChatMessageListT UnPack() {
    var _o = new SA_FriendChatMessageListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_FriendChatMessageListT _o) {
    _o.FriendUID = this.FriendUID;
    _o.ChatList = new List<Lobby.FriendChatDataT>();
    for (var _j = 0; _j < this.ChatListLength; ++_j) {_o.ChatList.Add(this.ChatList(_j).HasValue ? this.ChatList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_FriendChatMessageList> Pack(FlatBufferBuilder builder, SA_FriendChatMessageListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_FriendChatMessageList>);
    var _ChatList = default(VectorOffset);
    if (_o.ChatList != null) {
      var __ChatList = new Offset<Lobby.FriendChatData>[_o.ChatList.Count];
      for (var _j = 0; _j < __ChatList.Length; ++_j) { __ChatList[_j] = Lobby.FriendChatData.Pack(builder, _o.ChatList[_j]); }
      _ChatList = CreateChatListVector(builder, __ChatList);
    }
    return CreateSA_FriendChatMessageList(
      builder,
      _o.FriendUID,
      _ChatList);
  }
}

public class SA_FriendChatMessageListT
{
  public int FriendUID { get; set; }
  public List<Lobby.FriendChatDataT> ChatList { get; set; }

  public SA_FriendChatMessageListT() {
    this.FriendUID = 0;
    this.ChatList = null;
  }
}


}
