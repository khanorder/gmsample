// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ItemData : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ItemData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemID { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Count { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<Lobby.ItemData> CreateItemData(FlatBufferBuilder builder, int ItemID, int Count) {
    builder.Prep(4, 8);
    builder.PutInt(Count);
    builder.PutInt(ItemID);
    return new Offset<Lobby.ItemData>(builder.Offset);
  }
  public ItemDataT UnPack() {
    var _o = new ItemDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemDataT _o) {
    _o.ItemID = this.ItemID;
    _o.Count = this.Count;
  }
  public static Offset<Lobby.ItemData> Pack(FlatBufferBuilder builder, ItemDataT _o) {
    if (_o == null) return default(Offset<Lobby.ItemData>);
    return CreateItemData(
      builder,
      _o.ItemID,
      _o.Count);
  }
}

public class ItemDataT
{
  public int ItemID { get; set; }
  public int Count { get; set; }

  public ItemDataT() {
    this.ItemID = 0;
    this.Count = 0;
  }
}


}
