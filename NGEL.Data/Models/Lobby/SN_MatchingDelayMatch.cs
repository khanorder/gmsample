// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SN_MatchingDelayMatch : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SN_MatchingDelayMatch GetRootAsSN_MatchingDelayMatch(ByteBuffer _bb) { return GetRootAsSN_MatchingDelayMatch(_bb, new SN_MatchingDelayMatch()); }
  public static SN_MatchingDelayMatch GetRootAsSN_MatchingDelayMatch(ByteBuffer _bb, SN_MatchingDelayMatch obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SN_MatchingDelayMatch __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PenaltyExpireAt { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.SN_MatchingDelayMatch> CreateSN_MatchingDelayMatch(FlatBufferBuilder builder,
      int PenaltyExpireAt = 0) {
    builder.StartTable(1);
    SN_MatchingDelayMatch.AddPenaltyExpireAt(builder, PenaltyExpireAt);
    return SN_MatchingDelayMatch.EndSN_MatchingDelayMatch(builder);
  }

  public static void StartSN_MatchingDelayMatch(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPenaltyExpireAt(FlatBufferBuilder builder, int PenaltyExpireAt) { builder.AddInt(0, PenaltyExpireAt, 0); }
  public static Offset<Lobby.SN_MatchingDelayMatch> EndSN_MatchingDelayMatch(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SN_MatchingDelayMatch>(o);
  }
  public SN_MatchingDelayMatchT UnPack() {
    var _o = new SN_MatchingDelayMatchT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SN_MatchingDelayMatchT _o) {
    _o.PenaltyExpireAt = this.PenaltyExpireAt;
  }
  public static Offset<Lobby.SN_MatchingDelayMatch> Pack(FlatBufferBuilder builder, SN_MatchingDelayMatchT _o) {
    if (_o == null) return default(Offset<Lobby.SN_MatchingDelayMatch>);
    return CreateSN_MatchingDelayMatch(
      builder,
      _o.PenaltyExpireAt);
  }
}

public class SN_MatchingDelayMatchT
{
  public int PenaltyExpireAt { get; set; }

  public SN_MatchingDelayMatchT() {
    this.PenaltyExpireAt = 0;
  }
}


}
