// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_CheatSendOpMail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_CheatSendOpMail GetRootAsCQ_CheatSendOpMail(ByteBuffer _bb) { return GetRootAsCQ_CheatSendOpMail(_bb, new CQ_CheatSendOpMail()); }
  public static CQ_CheatSendOpMail GetRootAsCQ_CheatSendOpMail(ByteBuffer _bb, CQ_CheatSendOpMail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_CheatSendOpMail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TargetUID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Title { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(6); }
  public string Message { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMessageBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMessageArray() { return __p.__vector_as_array<byte>(8); }
  public bool IsBM { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ExpireTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.MailRewardInfo? RewardList(int j) { int o = __p.__offset(14); return o != 0 ? (Lobby.MailRewardInfo?)(new Lobby.MailRewardInfo()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int RewardListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.CQ_CheatSendOpMail> CreateCQ_CheatSendOpMail(FlatBufferBuilder builder,
      int TargetUID = 0,
      StringOffset TitleOffset = default(StringOffset),
      StringOffset MessageOffset = default(StringOffset),
      bool IsBM = false,
      int ExpireTime = 0,
      VectorOffset RewardListOffset = default(VectorOffset)) {
    builder.StartTable(6);
    CQ_CheatSendOpMail.AddRewardList(builder, RewardListOffset);
    CQ_CheatSendOpMail.AddExpireTime(builder, ExpireTime);
    CQ_CheatSendOpMail.AddMessage(builder, MessageOffset);
    CQ_CheatSendOpMail.AddTitle(builder, TitleOffset);
    CQ_CheatSendOpMail.AddTargetUID(builder, TargetUID);
    CQ_CheatSendOpMail.AddIsBM(builder, IsBM);
    return CQ_CheatSendOpMail.EndCQ_CheatSendOpMail(builder);
  }

  public static void StartCQ_CheatSendOpMail(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddTargetUID(FlatBufferBuilder builder, int TargetUID) { builder.AddInt(0, TargetUID, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset TitleOffset) { builder.AddOffset(1, TitleOffset.Value, 0); }
  public static void AddMessage(FlatBufferBuilder builder, StringOffset MessageOffset) { builder.AddOffset(2, MessageOffset.Value, 0); }
  public static void AddIsBM(FlatBufferBuilder builder, bool IsBM) { builder.AddBool(3, IsBM, false); }
  public static void AddExpireTime(FlatBufferBuilder builder, int ExpireTime) { builder.AddInt(4, ExpireTime, 0); }
  public static void AddRewardList(FlatBufferBuilder builder, VectorOffset RewardListOffset) { builder.AddOffset(5, RewardListOffset.Value, 0); }
  public static void StartRewardListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Lobby.CQ_CheatSendOpMail> EndCQ_CheatSendOpMail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_CheatSendOpMail>(o);
  }
  public CQ_CheatSendOpMailT UnPack() {
    var _o = new CQ_CheatSendOpMailT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_CheatSendOpMailT _o) {
    _o.TargetUID = this.TargetUID;
    _o.Title = this.Title;
    _o.Message = this.Message;
    _o.IsBM = this.IsBM;
    _o.ExpireTime = this.ExpireTime;
    _o.RewardList = new List<Lobby.MailRewardInfoT>();
    for (var _j = 0; _j < this.RewardListLength; ++_j) {_o.RewardList.Add(this.RewardList(_j).HasValue ? this.RewardList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.CQ_CheatSendOpMail> Pack(FlatBufferBuilder builder, CQ_CheatSendOpMailT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_CheatSendOpMail>);
    var _Title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _Message = _o.Message == null ? default(StringOffset) : builder.CreateString(_o.Message);
    var _RewardList = default(VectorOffset);
    if (_o.RewardList != null) {
      StartRewardListVector(builder, _o.RewardList.Count);
      for (var _j = _o.RewardList.Count - 1; _j >= 0; --_j) { Lobby.MailRewardInfo.Pack(builder, _o.RewardList[_j]); }
      _RewardList = builder.EndVector();
    }
    return CreateCQ_CheatSendOpMail(
      builder,
      _o.TargetUID,
      _Title,
      _Message,
      _o.IsBM,
      _o.ExpireTime,
      _RewardList);
  }
}

public class CQ_CheatSendOpMailT
{
  public int TargetUID { get; set; }
  public string Title { get; set; }
  public string Message { get; set; }
  public bool IsBM { get; set; }
  public int ExpireTime { get; set; }
  public List<Lobby.MailRewardInfoT> RewardList { get; set; }

  public CQ_CheatSendOpMailT() {
    this.TargetUID = 0;
    this.Title = null;
    this.Message = null;
    this.IsBM = false;
    this.ExpireTime = 0;
    this.RewardList = null;
  }
}


}
