// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_ProfileList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_ProfileList GetRootAsSA_ProfileList(ByteBuffer _bb) { return GetRootAsSA_ProfileList(_bb, new SA_ProfileList()); }
  public static SA_ProfileList GetRootAsSA_ProfileList(ByteBuffer _bb, SA_ProfileList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_ProfileList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.ProfileData? ProfileList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.ProfileData?)(new Lobby.ProfileData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ProfileListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_ProfileList> CreateSA_ProfileList(FlatBufferBuilder builder,
      VectorOffset ProfileListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_ProfileList.AddProfileList(builder, ProfileListOffset);
    return SA_ProfileList.EndSA_ProfileList(builder);
  }

  public static void StartSA_ProfileList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddProfileList(FlatBufferBuilder builder, VectorOffset ProfileListOffset) { builder.AddOffset(0, ProfileListOffset.Value, 0); }
  public static void StartProfileListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.SA_ProfileList> EndSA_ProfileList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_ProfileList>(o);
  }
  public SA_ProfileListT UnPack() {
    var _o = new SA_ProfileListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_ProfileListT _o) {
    _o.ProfileList = new List<Lobby.ProfileDataT>();
    for (var _j = 0; _j < this.ProfileListLength; ++_j) {_o.ProfileList.Add(this.ProfileList(_j).HasValue ? this.ProfileList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_ProfileList> Pack(FlatBufferBuilder builder, SA_ProfileListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_ProfileList>);
    var _ProfileList = default(VectorOffset);
    if (_o.ProfileList != null) {
      StartProfileListVector(builder, _o.ProfileList.Count);
      for (var _j = _o.ProfileList.Count - 1; _j >= 0; --_j) { Lobby.ProfileData.Pack(builder, _o.ProfileList[_j]); }
      _ProfileList = builder.EndVector();
    }
    return CreateSA_ProfileList(
      builder,
      _ProfileList);
  }
}

public class SA_ProfileListT
{
  public List<Lobby.ProfileDataT> ProfileList { get; set; }

  public SA_ProfileListT() {
    this.ProfileList = null;
  }
}


}
