// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_NicePlayerOther : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_NicePlayerOther GetRootAsCQ_NicePlayerOther(ByteBuffer _bb) { return GetRootAsCQ_NicePlayerOther(_bb, new CQ_NicePlayerOther()); }
  public static CQ_NicePlayerOther GetRootAsCQ_NicePlayerOther(ByteBuffer _bb, CQ_NicePlayerOther obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_NicePlayerOther __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TargetUID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.CQ_NicePlayerOther> CreateCQ_NicePlayerOther(FlatBufferBuilder builder,
      int TargetUID = 0) {
    builder.StartTable(1);
    CQ_NicePlayerOther.AddTargetUID(builder, TargetUID);
    return CQ_NicePlayerOther.EndCQ_NicePlayerOther(builder);
  }

  public static void StartCQ_NicePlayerOther(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTargetUID(FlatBufferBuilder builder, int TargetUID) { builder.AddInt(0, TargetUID, 0); }
  public static Offset<Lobby.CQ_NicePlayerOther> EndCQ_NicePlayerOther(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_NicePlayerOther>(o);
  }
  public CQ_NicePlayerOtherT UnPack() {
    var _o = new CQ_NicePlayerOtherT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_NicePlayerOtherT _o) {
    _o.TargetUID = this.TargetUID;
  }
  public static Offset<Lobby.CQ_NicePlayerOther> Pack(FlatBufferBuilder builder, CQ_NicePlayerOtherT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_NicePlayerOther>);
    return CreateCQ_NicePlayerOther(
      builder,
      _o.TargetUID);
  }
}

public class CQ_NicePlayerOtherT
{
  public int TargetUID { get; set; }

  public CQ_NicePlayerOtherT() {
    this.TargetUID = 0;
  }
}


}
