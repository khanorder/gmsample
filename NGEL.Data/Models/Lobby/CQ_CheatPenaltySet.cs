// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_CheatPenaltySet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_CheatPenaltySet GetRootAsCQ_CheatPenaltySet(ByteBuffer _bb) { return GetRootAsCQ_CheatPenaltySet(_bb, new CQ_CheatPenaltySet()); }
  public static CQ_CheatPenaltySet GetRootAsCQ_CheatPenaltySet(ByteBuffer _bb, CQ_CheatPenaltySet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_CheatPenaltySet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.EPenaltyReportState ReportState { get { int o = __p.__offset(4); return o != 0 ? (Lobby.EPenaltyReportState)__p.bb.Get(o + __p.bb_pos) : Lobby.EPenaltyReportState.None; } }
  public sbyte PenaltyGrade { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

  public static Offset<Lobby.CQ_CheatPenaltySet> CreateCQ_CheatPenaltySet(FlatBufferBuilder builder,
      Lobby.EPenaltyReportState ReportState = Lobby.EPenaltyReportState.None,
      sbyte PenaltyGrade = 0) {
    builder.StartTable(2);
    CQ_CheatPenaltySet.AddPenaltyGrade(builder, PenaltyGrade);
    CQ_CheatPenaltySet.AddReportState(builder, ReportState);
    return CQ_CheatPenaltySet.EndCQ_CheatPenaltySet(builder);
  }

  public static void StartCQ_CheatPenaltySet(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddReportState(FlatBufferBuilder builder, Lobby.EPenaltyReportState ReportState) { builder.AddByte(0, (byte)ReportState, 0); }
  public static void AddPenaltyGrade(FlatBufferBuilder builder, sbyte PenaltyGrade) { builder.AddSbyte(1, PenaltyGrade, 0); }
  public static Offset<Lobby.CQ_CheatPenaltySet> EndCQ_CheatPenaltySet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_CheatPenaltySet>(o);
  }
  public CQ_CheatPenaltySetT UnPack() {
    var _o = new CQ_CheatPenaltySetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_CheatPenaltySetT _o) {
    _o.ReportState = this.ReportState;
    _o.PenaltyGrade = this.PenaltyGrade;
  }
  public static Offset<Lobby.CQ_CheatPenaltySet> Pack(FlatBufferBuilder builder, CQ_CheatPenaltySetT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_CheatPenaltySet>);
    return CreateCQ_CheatPenaltySet(
      builder,
      _o.ReportState,
      _o.PenaltyGrade);
  }
}

public class CQ_CheatPenaltySetT
{
  public Lobby.EPenaltyReportState ReportState { get; set; }
  public sbyte PenaltyGrade { get; set; }

  public CQ_CheatPenaltySetT() {
    this.ReportState = Lobby.EPenaltyReportState.None;
    this.PenaltyGrade = 0;
  }
}


}
