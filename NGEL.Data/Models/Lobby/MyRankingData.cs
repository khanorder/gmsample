// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MyRankingData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static MyRankingData GetRootAsMyRankingData(ByteBuffer _bb) { return GetRootAsMyRankingData(_bb, new MyRankingData()); }
  public static MyRankingData GetRootAsMyRankingData(ByteBuffer _bb, MyRankingData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MyRankingData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.EContentsType ContentsType { get { int o = __p.__offset(4); return o != 0 ? (Lobby.EContentsType)__p.bb.Get(o + __p.bb_pos) : Lobby.EContentsType.None; } }
  public Lobby.RankingScoreData? RankingData { get { int o = __p.__offset(6); return o != 0 ? (Lobby.RankingScoreData?)(new Lobby.RankingScoreData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Lobby.MyRankingData> CreateMyRankingData(FlatBufferBuilder builder,
      Lobby.EContentsType ContentsType = Lobby.EContentsType.None,
      Offset<Lobby.RankingScoreData> RankingDataOffset = default(Offset<Lobby.RankingScoreData>)) {
    builder.StartTable(2);
    MyRankingData.AddRankingData(builder, RankingDataOffset);
    MyRankingData.AddContentsType(builder, ContentsType);
    return MyRankingData.EndMyRankingData(builder);
  }

  public static void StartMyRankingData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddContentsType(FlatBufferBuilder builder, Lobby.EContentsType ContentsType) { builder.AddByte(0, (byte)ContentsType, 0); }
  public static void AddRankingData(FlatBufferBuilder builder, Offset<Lobby.RankingScoreData> RankingDataOffset) { builder.AddOffset(1, RankingDataOffset.Value, 0); }
  public static Offset<Lobby.MyRankingData> EndMyRankingData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.MyRankingData>(o);
  }
  public MyRankingDataT UnPack() {
    var _o = new MyRankingDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MyRankingDataT _o) {
    _o.ContentsType = this.ContentsType;
    _o.RankingData = this.RankingData.HasValue ? this.RankingData.Value.UnPack() : null;
  }
  public static Offset<Lobby.MyRankingData> Pack(FlatBufferBuilder builder, MyRankingDataT _o) {
    if (_o == null) return default(Offset<Lobby.MyRankingData>);
    var _RankingData = _o.RankingData == null ? default(Offset<Lobby.RankingScoreData>) : Lobby.RankingScoreData.Pack(builder, _o.RankingData);
    return CreateMyRankingData(
      builder,
      _o.ContentsType,
      _RankingData);
  }
}

public class MyRankingDataT
{
  public Lobby.EContentsType ContentsType { get; set; }
  public Lobby.RankingScoreDataT RankingData { get; set; }

  public MyRankingDataT() {
    this.ContentsType = Lobby.EContentsType.None;
    this.RankingData = null;
  }
}


}
