// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GoldClashFinishInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static GoldClashFinishInfo GetRootAsGoldClashFinishInfo(ByteBuffer _bb) { return GetRootAsGoldClashFinishInfo(_bb, new GoldClashFinishInfo()); }
  public static GoldClashFinishInfo GetRootAsGoldClashFinishInfo(ByteBuffer _bb, GoldClashFinishInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GoldClashFinishInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HeroID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsWinTeam { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RankingPoint { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.EGuideMissionType GuideMissionCompleteList(int j) { int o = __p.__offset(12); return o != 0 ? (Lobby.EGuideMissionType)__p.bb.GetUshort(__p.__vector(o) + j * 2) : (Lobby.EGuideMissionType)0; }
  public int GuideMissionCompleteListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Lobby.EGuideMissionType> GetGuideMissionCompleteListBytes() { return __p.__vector_as_span<Lobby.EGuideMissionType>(12, 2); }
#else
  public ArraySegment<byte>? GetGuideMissionCompleteListBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public Lobby.EGuideMissionType[] GetGuideMissionCompleteListArray() { int o = __p.__offset(12); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Lobby.EGuideMissionType[] a = new Lobby.EGuideMissionType[l]; for (int i = 0; i < l; i++) { a[i] = (Lobby.EGuideMissionType)__p.bb.GetUshort(p + i * 2); } return a; }
  public Lobby.MissionAddCountData? MissionList(int j) { int o = __p.__offset(14); return o != 0 ? (Lobby.MissionAddCountData?)(new Lobby.MissionAddCountData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int MissionListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Lobby.BiskitLog? LogList(int j) { int o = __p.__offset(16); return o != 0 ? (Lobby.BiskitLog?)(new Lobby.BiskitLog()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LogListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsCustomGame { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsDodge { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int Kill { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Death { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Gold { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Deal { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Heal { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Damage { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsMvp { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public sbyte Ranking { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

  public static Offset<Lobby.GoldClashFinishInfo> CreateGoldClashFinishInfo(FlatBufferBuilder builder,
      int UID = 0,
      int HeroID = 0,
      bool IsWinTeam = false,
      int RankingPoint = 0,
      VectorOffset GuideMissionCompleteListOffset = default(VectorOffset),
      VectorOffset MissionListOffset = default(VectorOffset),
      VectorOffset LogListOffset = default(VectorOffset),
      bool IsCustomGame = false,
      bool IsDodge = false,
      int Kill = 0,
      int Death = 0,
      int Gold = 0,
      int Deal = 0,
      int Heal = 0,
      int Damage = 0,
      bool IsMvp = false,
      sbyte Ranking = 0) {
    builder.StartTable(17);
    GoldClashFinishInfo.AddDamage(builder, Damage);
    GoldClashFinishInfo.AddHeal(builder, Heal);
    GoldClashFinishInfo.AddDeal(builder, Deal);
    GoldClashFinishInfo.AddGold(builder, Gold);
    GoldClashFinishInfo.AddDeath(builder, Death);
    GoldClashFinishInfo.AddKill(builder, Kill);
    GoldClashFinishInfo.AddLogList(builder, LogListOffset);
    GoldClashFinishInfo.AddMissionList(builder, MissionListOffset);
    GoldClashFinishInfo.AddGuideMissionCompleteList(builder, GuideMissionCompleteListOffset);
    GoldClashFinishInfo.AddRankingPoint(builder, RankingPoint);
    GoldClashFinishInfo.AddHeroID(builder, HeroID);
    GoldClashFinishInfo.AddUID(builder, UID);
    GoldClashFinishInfo.AddRanking(builder, Ranking);
    GoldClashFinishInfo.AddIsMvp(builder, IsMvp);
    GoldClashFinishInfo.AddIsDodge(builder, IsDodge);
    GoldClashFinishInfo.AddIsCustomGame(builder, IsCustomGame);
    GoldClashFinishInfo.AddIsWinTeam(builder, IsWinTeam);
    return GoldClashFinishInfo.EndGoldClashFinishInfo(builder);
  }

  public static void StartGoldClashFinishInfo(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddUID(FlatBufferBuilder builder, int UID) { builder.AddInt(0, UID, 0); }
  public static void AddHeroID(FlatBufferBuilder builder, int HeroID) { builder.AddInt(1, HeroID, 0); }
  public static void AddIsWinTeam(FlatBufferBuilder builder, bool IsWinTeam) { builder.AddBool(2, IsWinTeam, false); }
  public static void AddRankingPoint(FlatBufferBuilder builder, int RankingPoint) { builder.AddInt(3, RankingPoint, 0); }
  public static void AddGuideMissionCompleteList(FlatBufferBuilder builder, VectorOffset GuideMissionCompleteListOffset) { builder.AddOffset(4, GuideMissionCompleteListOffset.Value, 0); }
  public static VectorOffset CreateGuideMissionCompleteListVector(FlatBufferBuilder builder, Lobby.EGuideMissionType[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddUshort((ushort)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGuideMissionCompleteListVectorBlock(FlatBufferBuilder builder, Lobby.EGuideMissionType[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuideMissionCompleteListVectorBlock(FlatBufferBuilder builder, ArraySegment<Lobby.EGuideMissionType> data) { builder.StartVector(2, data.Count, 2); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuideMissionCompleteListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Lobby.EGuideMissionType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGuideMissionCompleteListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static void AddMissionList(FlatBufferBuilder builder, VectorOffset MissionListOffset) { builder.AddOffset(5, MissionListOffset.Value, 0); }
  public static void StartMissionListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddLogList(FlatBufferBuilder builder, VectorOffset LogListOffset) { builder.AddOffset(6, LogListOffset.Value, 0); }
  public static VectorOffset CreateLogListVector(FlatBufferBuilder builder, Offset<Lobby.BiskitLog>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLogListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.BiskitLog>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.BiskitLog>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.BiskitLog>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLogListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsCustomGame(FlatBufferBuilder builder, bool IsCustomGame) { builder.AddBool(7, IsCustomGame, false); }
  public static void AddIsDodge(FlatBufferBuilder builder, bool IsDodge) { builder.AddBool(8, IsDodge, false); }
  public static void AddKill(FlatBufferBuilder builder, int Kill) { builder.AddInt(9, Kill, 0); }
  public static void AddDeath(FlatBufferBuilder builder, int Death) { builder.AddInt(10, Death, 0); }
  public static void AddGold(FlatBufferBuilder builder, int Gold) { builder.AddInt(11, Gold, 0); }
  public static void AddDeal(FlatBufferBuilder builder, int Deal) { builder.AddInt(12, Deal, 0); }
  public static void AddHeal(FlatBufferBuilder builder, int Heal) { builder.AddInt(13, Heal, 0); }
  public static void AddDamage(FlatBufferBuilder builder, int Damage) { builder.AddInt(14, Damage, 0); }
  public static void AddIsMvp(FlatBufferBuilder builder, bool IsMvp) { builder.AddBool(15, IsMvp, false); }
  public static void AddRanking(FlatBufferBuilder builder, sbyte Ranking) { builder.AddSbyte(16, Ranking, 0); }
  public static Offset<Lobby.GoldClashFinishInfo> EndGoldClashFinishInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.GoldClashFinishInfo>(o);
  }
  public GoldClashFinishInfoT UnPack() {
    var _o = new GoldClashFinishInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GoldClashFinishInfoT _o) {
    _o.UID = this.UID;
    _o.HeroID = this.HeroID;
    _o.IsWinTeam = this.IsWinTeam;
    _o.RankingPoint = this.RankingPoint;
    _o.GuideMissionCompleteList = new List<Lobby.EGuideMissionType>();
    for (var _j = 0; _j < this.GuideMissionCompleteListLength; ++_j) {_o.GuideMissionCompleteList.Add(this.GuideMissionCompleteList(_j));}
    _o.MissionList = new List<Lobby.MissionAddCountDataT>();
    for (var _j = 0; _j < this.MissionListLength; ++_j) {_o.MissionList.Add(this.MissionList(_j).HasValue ? this.MissionList(_j).Value.UnPack() : null);}
    _o.LogList = new List<Lobby.BiskitLogT>();
    for (var _j = 0; _j < this.LogListLength; ++_j) {_o.LogList.Add(this.LogList(_j).HasValue ? this.LogList(_j).Value.UnPack() : null);}
    _o.IsCustomGame = this.IsCustomGame;
    _o.IsDodge = this.IsDodge;
    _o.Kill = this.Kill;
    _o.Death = this.Death;
    _o.Gold = this.Gold;
    _o.Deal = this.Deal;
    _o.Heal = this.Heal;
    _o.Damage = this.Damage;
    _o.IsMvp = this.IsMvp;
    _o.Ranking = this.Ranking;
  }
  public static Offset<Lobby.GoldClashFinishInfo> Pack(FlatBufferBuilder builder, GoldClashFinishInfoT _o) {
    if (_o == null) return default(Offset<Lobby.GoldClashFinishInfo>);
    var _GuideMissionCompleteList = default(VectorOffset);
    if (_o.GuideMissionCompleteList != null) {
      var __GuideMissionCompleteList = _o.GuideMissionCompleteList.ToArray();
      _GuideMissionCompleteList = CreateGuideMissionCompleteListVector(builder, __GuideMissionCompleteList);
    }
    var _MissionList = default(VectorOffset);
    if (_o.MissionList != null) {
      StartMissionListVector(builder, _o.MissionList.Count);
      for (var _j = _o.MissionList.Count - 1; _j >= 0; --_j) { Lobby.MissionAddCountData.Pack(builder, _o.MissionList[_j]); }
      _MissionList = builder.EndVector();
    }
    var _LogList = default(VectorOffset);
    if (_o.LogList != null) {
      var __LogList = new Offset<Lobby.BiskitLog>[_o.LogList.Count];
      for (var _j = 0; _j < __LogList.Length; ++_j) { __LogList[_j] = Lobby.BiskitLog.Pack(builder, _o.LogList[_j]); }
      _LogList = CreateLogListVector(builder, __LogList);
    }
    return CreateGoldClashFinishInfo(
      builder,
      _o.UID,
      _o.HeroID,
      _o.IsWinTeam,
      _o.RankingPoint,
      _GuideMissionCompleteList,
      _MissionList,
      _LogList,
      _o.IsCustomGame,
      _o.IsDodge,
      _o.Kill,
      _o.Death,
      _o.Gold,
      _o.Deal,
      _o.Heal,
      _o.Damage,
      _o.IsMvp,
      _o.Ranking);
  }
}

public class GoldClashFinishInfoT
{
  public int UID { get; set; }
  public int HeroID { get; set; }
  public bool IsWinTeam { get; set; }
  public int RankingPoint { get; set; }
  public List<Lobby.EGuideMissionType> GuideMissionCompleteList { get; set; }
  public List<Lobby.MissionAddCountDataT> MissionList { get; set; }
  public List<Lobby.BiskitLogT> LogList { get; set; }
  public bool IsCustomGame { get; set; }
  public bool IsDodge { get; set; }
  public int Kill { get; set; }
  public int Death { get; set; }
  public int Gold { get; set; }
  public int Deal { get; set; }
  public int Heal { get; set; }
  public int Damage { get; set; }
  public bool IsMvp { get; set; }
  public sbyte Ranking { get; set; }

  public GoldClashFinishInfoT() {
    this.UID = 0;
    this.HeroID = 0;
    this.IsWinTeam = false;
    this.RankingPoint = 0;
    this.GuideMissionCompleteList = null;
    this.MissionList = null;
    this.LogList = null;
    this.IsCustomGame = false;
    this.IsDodge = false;
    this.Kill = 0;
    this.Death = 0;
    this.Gold = 0;
    this.Deal = 0;
    this.Heal = 0;
    this.Damage = 0;
    this.IsMvp = false;
    this.Ranking = 0;
  }
}


}
