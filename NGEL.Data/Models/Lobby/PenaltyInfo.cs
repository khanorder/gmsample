// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PenaltyInfo : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public PenaltyInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.EPenaltyReportState ReportState { get { return (Lobby.EPenaltyReportState)__p.bb.Get(__p.bb_pos + 0); } }
  public bool IsActive { get { return 0!=__p.bb.Get(__p.bb_pos + 1); } }
  public sbyte PenaltyGrade { get { return __p.bb.GetSbyte(__p.bb_pos + 2); } }
  public int PenaltyPoint { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public sbyte PenaltyCount { get { return __p.bb.GetSbyte(__p.bb_pos + 8); } }
  public int PenaltyEndAt { get { return __p.bb.GetInt(__p.bb_pos + 12); } }
  public int ClearPenaltyAt { get { return __p.bb.GetInt(__p.bb_pos + 16); } }
  public int ID { get { return __p.bb.GetInt(__p.bb_pos + 20); } }

  public static Offset<Lobby.PenaltyInfo> CreatePenaltyInfo(FlatBufferBuilder builder, Lobby.EPenaltyReportState ReportState, bool IsActive, sbyte PenaltyGrade, int PenaltyPoint, sbyte PenaltyCount, int PenaltyEndAt, int ClearPenaltyAt, int ID) {
    builder.Prep(4, 24);
    builder.PutInt(ID);
    builder.PutInt(ClearPenaltyAt);
    builder.PutInt(PenaltyEndAt);
    builder.Pad(3);
    builder.PutSbyte(PenaltyCount);
    builder.PutInt(PenaltyPoint);
    builder.Pad(1);
    builder.PutSbyte(PenaltyGrade);
    builder.PutBool(IsActive);
    builder.PutByte((byte)ReportState);
    return new Offset<Lobby.PenaltyInfo>(builder.Offset);
  }
  public PenaltyInfoT UnPack() {
    var _o = new PenaltyInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PenaltyInfoT _o) {
    _o.ReportState = this.ReportState;
    _o.IsActive = this.IsActive;
    _o.PenaltyGrade = this.PenaltyGrade;
    _o.PenaltyPoint = this.PenaltyPoint;
    _o.PenaltyCount = this.PenaltyCount;
    _o.PenaltyEndAt = this.PenaltyEndAt;
    _o.ClearPenaltyAt = this.ClearPenaltyAt;
    _o.ID = this.ID;
  }
  public static Offset<Lobby.PenaltyInfo> Pack(FlatBufferBuilder builder, PenaltyInfoT _o) {
    if (_o == null) return default(Offset<Lobby.PenaltyInfo>);
    return CreatePenaltyInfo(
      builder,
      _o.ReportState,
      _o.IsActive,
      _o.PenaltyGrade,
      _o.PenaltyPoint,
      _o.PenaltyCount,
      _o.PenaltyEndAt,
      _o.ClearPenaltyAt,
      _o.ID);
  }
}

public class PenaltyInfoT
{
  public Lobby.EPenaltyReportState ReportState { get; set; }
  public bool IsActive { get; set; }
  public sbyte PenaltyGrade { get; set; }
  public int PenaltyPoint { get; set; }
  public sbyte PenaltyCount { get; set; }
  public int PenaltyEndAt { get; set; }
  public int ClearPenaltyAt { get; set; }
  public int ID { get; set; }

  public PenaltyInfoT() {
    this.ReportState = Lobby.EPenaltyReportState.None;
    this.IsActive = false;
    this.PenaltyGrade = 0;
    this.PenaltyPoint = 0;
    this.PenaltyCount = 0;
    this.PenaltyEndAt = 0;
    this.ClearPenaltyAt = 0;
    this.ID = 0;
  }
}


}
