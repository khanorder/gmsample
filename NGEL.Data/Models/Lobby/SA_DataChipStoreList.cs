// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_DataChipStoreList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_DataChipStoreList GetRootAsSA_DataChipStoreList(ByteBuffer _bb) { return GetRootAsSA_DataChipStoreList(_bb, new SA_DataChipStoreList()); }
  public static SA_DataChipStoreList GetRootAsSA_DataChipStoreList(ByteBuffer _bb, SA_DataChipStoreList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_DataChipStoreList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MaxStoreCount { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NextResetTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.DataChipStore? DataChipStoreList(int j) { int o = __p.__offset(8); return o != 0 ? (Lobby.DataChipStore?)(new Lobby.DataChipStore()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int DataChipStoreListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_DataChipStoreList> CreateSA_DataChipStoreList(FlatBufferBuilder builder,
      int MaxStoreCount = 0,
      int NextResetTime = 0,
      VectorOffset DataChipStoreListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    SA_DataChipStoreList.AddDataChipStoreList(builder, DataChipStoreListOffset);
    SA_DataChipStoreList.AddNextResetTime(builder, NextResetTime);
    SA_DataChipStoreList.AddMaxStoreCount(builder, MaxStoreCount);
    return SA_DataChipStoreList.EndSA_DataChipStoreList(builder);
  }

  public static void StartSA_DataChipStoreList(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMaxStoreCount(FlatBufferBuilder builder, int MaxStoreCount) { builder.AddInt(0, MaxStoreCount, 0); }
  public static void AddNextResetTime(FlatBufferBuilder builder, int NextResetTime) { builder.AddInt(1, NextResetTime, 0); }
  public static void AddDataChipStoreList(FlatBufferBuilder builder, VectorOffset DataChipStoreListOffset) { builder.AddOffset(2, DataChipStoreListOffset.Value, 0); }
  public static void StartDataChipStoreListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.SA_DataChipStoreList> EndSA_DataChipStoreList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_DataChipStoreList>(o);
  }
  public SA_DataChipStoreListT UnPack() {
    var _o = new SA_DataChipStoreListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_DataChipStoreListT _o) {
    _o.MaxStoreCount = this.MaxStoreCount;
    _o.NextResetTime = this.NextResetTime;
    _o.DataChipStoreList = new List<Lobby.DataChipStoreT>();
    for (var _j = 0; _j < this.DataChipStoreListLength; ++_j) {_o.DataChipStoreList.Add(this.DataChipStoreList(_j).HasValue ? this.DataChipStoreList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_DataChipStoreList> Pack(FlatBufferBuilder builder, SA_DataChipStoreListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_DataChipStoreList>);
    var _DataChipStoreList = default(VectorOffset);
    if (_o.DataChipStoreList != null) {
      StartDataChipStoreListVector(builder, _o.DataChipStoreList.Count);
      for (var _j = _o.DataChipStoreList.Count - 1; _j >= 0; --_j) { Lobby.DataChipStore.Pack(builder, _o.DataChipStoreList[_j]); }
      _DataChipStoreList = builder.EndVector();
    }
    return CreateSA_DataChipStoreList(
      builder,
      _o.MaxStoreCount,
      _o.NextResetTime,
      _DataChipStoreList);
  }
}

public class SA_DataChipStoreListT
{
  public int MaxStoreCount { get; set; }
  public int NextResetTime { get; set; }
  public List<Lobby.DataChipStoreT> DataChipStoreList { get; set; }

  public SA_DataChipStoreListT() {
    this.MaxStoreCount = 0;
    this.NextResetTime = 0;
    this.DataChipStoreList = null;
  }
}


}
