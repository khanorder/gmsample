// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SimpleWorkerTeamInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SimpleWorkerTeamInfo GetRootAsSimpleWorkerTeamInfo(ByteBuffer _bb) { return GetRootAsSimpleWorkerTeamInfo(_bb, new SimpleWorkerTeamInfo()); }
  public static SimpleWorkerTeamInfo GetRootAsSimpleWorkerTeamInfo(ByteBuffer _bb, SimpleWorkerTeamInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SimpleWorkerTeamInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TeamID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTeamIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTeamIDArray() { return __p.__vector_as_array<byte>(4); }
  public int UID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Nick { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNickBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNickBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNickArray() { return __p.__vector_as_array<byte>(8); }
  public int HeroSkinID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LobbyID { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLobbyIDBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLobbyIDBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLobbyIDArray() { return __p.__vector_as_array<byte>(12); }
  public string MatchTicket { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchTicketBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMatchTicketBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMatchTicketArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<Lobby.SimpleWorkerTeamInfo> CreateSimpleWorkerTeamInfo(FlatBufferBuilder builder,
      StringOffset TeamIDOffset = default(StringOffset),
      int UID = 0,
      StringOffset NickOffset = default(StringOffset),
      int HeroSkinID = 0,
      StringOffset LobbyIDOffset = default(StringOffset),
      StringOffset MatchTicketOffset = default(StringOffset)) {
    builder.StartTable(6);
    SimpleWorkerTeamInfo.AddMatchTicket(builder, MatchTicketOffset);
    SimpleWorkerTeamInfo.AddLobbyID(builder, LobbyIDOffset);
    SimpleWorkerTeamInfo.AddHeroSkinID(builder, HeroSkinID);
    SimpleWorkerTeamInfo.AddNick(builder, NickOffset);
    SimpleWorkerTeamInfo.AddUID(builder, UID);
    SimpleWorkerTeamInfo.AddTeamID(builder, TeamIDOffset);
    return SimpleWorkerTeamInfo.EndSimpleWorkerTeamInfo(builder);
  }

  public static void StartSimpleWorkerTeamInfo(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddTeamID(FlatBufferBuilder builder, StringOffset TeamIDOffset) { builder.AddOffset(0, TeamIDOffset.Value, 0); }
  public static void AddUID(FlatBufferBuilder builder, int UID) { builder.AddInt(1, UID, 0); }
  public static void AddNick(FlatBufferBuilder builder, StringOffset NickOffset) { builder.AddOffset(2, NickOffset.Value, 0); }
  public static void AddHeroSkinID(FlatBufferBuilder builder, int HeroSkinID) { builder.AddInt(3, HeroSkinID, 0); }
  public static void AddLobbyID(FlatBufferBuilder builder, StringOffset LobbyIDOffset) { builder.AddOffset(4, LobbyIDOffset.Value, 0); }
  public static void AddMatchTicket(FlatBufferBuilder builder, StringOffset MatchTicketOffset) { builder.AddOffset(5, MatchTicketOffset.Value, 0); }
  public static Offset<Lobby.SimpleWorkerTeamInfo> EndSimpleWorkerTeamInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SimpleWorkerTeamInfo>(o);
  }
  public SimpleWorkerTeamInfoT UnPack() {
    var _o = new SimpleWorkerTeamInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SimpleWorkerTeamInfoT _o) {
    _o.TeamID = this.TeamID;
    _o.UID = this.UID;
    _o.Nick = this.Nick;
    _o.HeroSkinID = this.HeroSkinID;
    _o.LobbyID = this.LobbyID;
    _o.MatchTicket = this.MatchTicket;
  }
  public static Offset<Lobby.SimpleWorkerTeamInfo> Pack(FlatBufferBuilder builder, SimpleWorkerTeamInfoT _o) {
    if (_o == null) return default(Offset<Lobby.SimpleWorkerTeamInfo>);
    var _TeamID = _o.TeamID == null ? default(StringOffset) : builder.CreateString(_o.TeamID);
    var _Nick = _o.Nick == null ? default(StringOffset) : builder.CreateString(_o.Nick);
    var _LobbyID = _o.LobbyID == null ? default(StringOffset) : builder.CreateString(_o.LobbyID);
    var _MatchTicket = _o.MatchTicket == null ? default(StringOffset) : builder.CreateString(_o.MatchTicket);
    return CreateSimpleWorkerTeamInfo(
      builder,
      _TeamID,
      _o.UID,
      _Nick,
      _o.HeroSkinID,
      _LobbyID,
      _MatchTicket);
  }
}

public class SimpleWorkerTeamInfoT
{
  public string TeamID { get; set; }
  public int UID { get; set; }
  public string Nick { get; set; }
  public int HeroSkinID { get; set; }
  public string LobbyID { get; set; }
  public string MatchTicket { get; set; }

  public SimpleWorkerTeamInfoT() {
    this.TeamID = null;
    this.UID = 0;
    this.Nick = null;
    this.HeroSkinID = 0;
    this.LobbyID = null;
    this.MatchTicket = null;
  }
}


}
