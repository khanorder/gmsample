// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_ArtifactList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_ArtifactList GetRootAsSA_ArtifactList(ByteBuffer _bb) { return GetRootAsSA_ArtifactList(_bb, new SA_ArtifactList()); }
  public static SA_ArtifactList GetRootAsSA_ArtifactList(ByteBuffer _bb, SA_ArtifactList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_ArtifactList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.ArtifactData? ArtifactList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.ArtifactData?)(new Lobby.ArtifactData()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int ArtifactListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_ArtifactList> CreateSA_ArtifactList(FlatBufferBuilder builder,
      VectorOffset ArtifactListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_ArtifactList.AddArtifactList(builder, ArtifactListOffset);
    return SA_ArtifactList.EndSA_ArtifactList(builder);
  }

  public static void StartSA_ArtifactList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddArtifactList(FlatBufferBuilder builder, VectorOffset ArtifactListOffset) { builder.AddOffset(0, ArtifactListOffset.Value, 0); }
  public static void StartArtifactListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static Offset<Lobby.SA_ArtifactList> EndSA_ArtifactList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_ArtifactList>(o);
  }
  public SA_ArtifactListT UnPack() {
    var _o = new SA_ArtifactListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_ArtifactListT _o) {
    _o.ArtifactList = new List<Lobby.ArtifactDataT>();
    for (var _j = 0; _j < this.ArtifactListLength; ++_j) {_o.ArtifactList.Add(this.ArtifactList(_j).HasValue ? this.ArtifactList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_ArtifactList> Pack(FlatBufferBuilder builder, SA_ArtifactListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_ArtifactList>);
    var _ArtifactList = default(VectorOffset);
    if (_o.ArtifactList != null) {
      StartArtifactListVector(builder, _o.ArtifactList.Count);
      for (var _j = _o.ArtifactList.Count - 1; _j >= 0; --_j) { Lobby.ArtifactData.Pack(builder, _o.ArtifactList[_j]); }
      _ArtifactList = builder.EndVector();
    }
    return CreateSA_ArtifactList(
      builder,
      _ArtifactList);
  }
}

public class SA_ArtifactListT
{
  public List<Lobby.ArtifactDataT> ArtifactList { get; set; }

  public SA_ArtifactListT() {
    this.ArtifactList = null;
  }
}


}
