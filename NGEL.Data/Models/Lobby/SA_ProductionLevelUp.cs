// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_ProductionLevelUp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_ProductionLevelUp GetRootAsSA_ProductionLevelUp(ByteBuffer _bb) { return GetRootAsSA_ProductionLevelUp(_bb, new SA_ProductionLevelUp()); }
  public static SA_ProductionLevelUp GetRootAsSA_ProductionLevelUp(ByteBuffer _bb, SA_ProductionLevelUp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_ProductionLevelUp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.ProductionData? ProductionInfo { get { int o = __p.__offset(4); return o != 0 ? (Lobby.ProductionData?)(new Lobby.ProductionData()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Lobby.AssetData? ChangeAssetList(int j) { int o = __p.__offset(6); return o != 0 ? (Lobby.AssetData?)(new Lobby.AssetData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int ChangeAssetListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_ProductionLevelUp> CreateSA_ProductionLevelUp(FlatBufferBuilder builder,
      Lobby.ProductionDataT ProductionInfo = null,
      VectorOffset ChangeAssetListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SA_ProductionLevelUp.AddChangeAssetList(builder, ChangeAssetListOffset);
    SA_ProductionLevelUp.AddProductionInfo(builder, Lobby.ProductionData.Pack(builder, ProductionInfo));
    return SA_ProductionLevelUp.EndSA_ProductionLevelUp(builder);
  }

  public static void StartSA_ProductionLevelUp(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddProductionInfo(FlatBufferBuilder builder, Offset<Lobby.ProductionData> ProductionInfoOffset) { builder.AddStruct(0, ProductionInfoOffset.Value, 0); }
  public static void AddChangeAssetList(FlatBufferBuilder builder, VectorOffset ChangeAssetListOffset) { builder.AddOffset(1, ChangeAssetListOffset.Value, 0); }
  public static void StartChangeAssetListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Lobby.SA_ProductionLevelUp> EndSA_ProductionLevelUp(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_ProductionLevelUp>(o);
  }
  public SA_ProductionLevelUpT UnPack() {
    var _o = new SA_ProductionLevelUpT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_ProductionLevelUpT _o) {
    _o.ProductionInfo = this.ProductionInfo.HasValue ? this.ProductionInfo.Value.UnPack() : null;
    _o.ChangeAssetList = new List<Lobby.AssetDataT>();
    for (var _j = 0; _j < this.ChangeAssetListLength; ++_j) {_o.ChangeAssetList.Add(this.ChangeAssetList(_j).HasValue ? this.ChangeAssetList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_ProductionLevelUp> Pack(FlatBufferBuilder builder, SA_ProductionLevelUpT _o) {
    if (_o == null) return default(Offset<Lobby.SA_ProductionLevelUp>);
    var _ChangeAssetList = default(VectorOffset);
    if (_o.ChangeAssetList != null) {
      StartChangeAssetListVector(builder, _o.ChangeAssetList.Count);
      for (var _j = _o.ChangeAssetList.Count - 1; _j >= 0; --_j) { Lobby.AssetData.Pack(builder, _o.ChangeAssetList[_j]); }
      _ChangeAssetList = builder.EndVector();
    }
    return CreateSA_ProductionLevelUp(
      builder,
      _o.ProductionInfo,
      _ChangeAssetList);
  }
}

public class SA_ProductionLevelUpT
{
  public Lobby.ProductionDataT ProductionInfo { get; set; }
  public List<Lobby.AssetDataT> ChangeAssetList { get; set; }

  public SA_ProductionLevelUpT() {
    this.ProductionInfo = new Lobby.ProductionDataT();
    this.ChangeAssetList = null;
  }
}


}
