// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_AchievementReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_AchievementReward GetRootAsSA_AchievementReward(ByteBuffer _bb) { return GetRootAsSA_AchievementReward(_bb, new SA_AchievementReward()); }
  public static SA_AchievementReward GetRootAsSA_AchievementReward(ByteBuffer _bb, SA_AchievementReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_AchievementReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.AchievementData? Achievement { get { int o = __p.__offset(4); return o != 0 ? (Lobby.AchievementData?)(new Lobby.AchievementData()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Lobby.AssetData? ChangeAssetList(int j) { int o = __p.__offset(6); return o != 0 ? (Lobby.AssetData?)(new Lobby.AssetData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int ChangeAssetListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_AchievementReward> CreateSA_AchievementReward(FlatBufferBuilder builder,
      Lobby.AchievementDataT Achievement = null,
      VectorOffset ChangeAssetListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SA_AchievementReward.AddChangeAssetList(builder, ChangeAssetListOffset);
    SA_AchievementReward.AddAchievement(builder, Lobby.AchievementData.Pack(builder, Achievement));
    return SA_AchievementReward.EndSA_AchievementReward(builder);
  }

  public static void StartSA_AchievementReward(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAchievement(FlatBufferBuilder builder, Offset<Lobby.AchievementData> AchievementOffset) { builder.AddStruct(0, AchievementOffset.Value, 0); }
  public static void AddChangeAssetList(FlatBufferBuilder builder, VectorOffset ChangeAssetListOffset) { builder.AddOffset(1, ChangeAssetListOffset.Value, 0); }
  public static void StartChangeAssetListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Lobby.SA_AchievementReward> EndSA_AchievementReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_AchievementReward>(o);
  }
  public SA_AchievementRewardT UnPack() {
    var _o = new SA_AchievementRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_AchievementRewardT _o) {
    _o.Achievement = this.Achievement.HasValue ? this.Achievement.Value.UnPack() : null;
    _o.ChangeAssetList = new List<Lobby.AssetDataT>();
    for (var _j = 0; _j < this.ChangeAssetListLength; ++_j) {_o.ChangeAssetList.Add(this.ChangeAssetList(_j).HasValue ? this.ChangeAssetList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_AchievementReward> Pack(FlatBufferBuilder builder, SA_AchievementRewardT _o) {
    if (_o == null) return default(Offset<Lobby.SA_AchievementReward>);
    var _ChangeAssetList = default(VectorOffset);
    if (_o.ChangeAssetList != null) {
      StartChangeAssetListVector(builder, _o.ChangeAssetList.Count);
      for (var _j = _o.ChangeAssetList.Count - 1; _j >= 0; --_j) { Lobby.AssetData.Pack(builder, _o.ChangeAssetList[_j]); }
      _ChangeAssetList = builder.EndVector();
    }
    return CreateSA_AchievementReward(
      builder,
      _o.Achievement,
      _ChangeAssetList);
  }
}

public class SA_AchievementRewardT
{
  public Lobby.AchievementDataT Achievement { get; set; }
  public List<Lobby.AssetDataT> ChangeAssetList { get; set; }

  public SA_AchievementRewardT() {
    this.Achievement = new Lobby.AchievementDataT();
    this.ChangeAssetList = null;
  }
}


}
