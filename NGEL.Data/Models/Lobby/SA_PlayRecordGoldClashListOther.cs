// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_PlayRecordGoldClashListOther : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_PlayRecordGoldClashListOther GetRootAsSA_PlayRecordGoldClashListOther(ByteBuffer _bb) { return GetRootAsSA_PlayRecordGoldClashListOther(_bb, new SA_PlayRecordGoldClashListOther()); }
  public static SA_PlayRecordGoldClashListOther GetRootAsSA_PlayRecordGoldClashListOther(ByteBuffer _bb, SA_PlayRecordGoldClashListOther obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_PlayRecordGoldClashListOther __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TargetUID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SeasonID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.PlayRecordGoldClashData? RecordList(int j) { int o = __p.__offset(8); return o != 0 ? (Lobby.PlayRecordGoldClashData?)(new Lobby.PlayRecordGoldClashData()).__assign(__p.__vector(o) + j * 44, __p.bb) : null; }
  public int RecordListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_PlayRecordGoldClashListOther> CreateSA_PlayRecordGoldClashListOther(FlatBufferBuilder builder,
      int TargetUID = 0,
      int SeasonID = 0,
      VectorOffset RecordListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    SA_PlayRecordGoldClashListOther.AddRecordList(builder, RecordListOffset);
    SA_PlayRecordGoldClashListOther.AddSeasonID(builder, SeasonID);
    SA_PlayRecordGoldClashListOther.AddTargetUID(builder, TargetUID);
    return SA_PlayRecordGoldClashListOther.EndSA_PlayRecordGoldClashListOther(builder);
  }

  public static void StartSA_PlayRecordGoldClashListOther(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTargetUID(FlatBufferBuilder builder, int TargetUID) { builder.AddInt(0, TargetUID, 0); }
  public static void AddSeasonID(FlatBufferBuilder builder, int SeasonID) { builder.AddInt(1, SeasonID, 0); }
  public static void AddRecordList(FlatBufferBuilder builder, VectorOffset RecordListOffset) { builder.AddOffset(2, RecordListOffset.Value, 0); }
  public static void StartRecordListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(44, numElems, 4); }
  public static Offset<Lobby.SA_PlayRecordGoldClashListOther> EndSA_PlayRecordGoldClashListOther(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_PlayRecordGoldClashListOther>(o);
  }
  public SA_PlayRecordGoldClashListOtherT UnPack() {
    var _o = new SA_PlayRecordGoldClashListOtherT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_PlayRecordGoldClashListOtherT _o) {
    _o.TargetUID = this.TargetUID;
    _o.SeasonID = this.SeasonID;
    _o.RecordList = new List<Lobby.PlayRecordGoldClashDataT>();
    for (var _j = 0; _j < this.RecordListLength; ++_j) {_o.RecordList.Add(this.RecordList(_j).HasValue ? this.RecordList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_PlayRecordGoldClashListOther> Pack(FlatBufferBuilder builder, SA_PlayRecordGoldClashListOtherT _o) {
    if (_o == null) return default(Offset<Lobby.SA_PlayRecordGoldClashListOther>);
    var _RecordList = default(VectorOffset);
    if (_o.RecordList != null) {
      StartRecordListVector(builder, _o.RecordList.Count);
      for (var _j = _o.RecordList.Count - 1; _j >= 0; --_j) { Lobby.PlayRecordGoldClashData.Pack(builder, _o.RecordList[_j]); }
      _RecordList = builder.EndVector();
    }
    return CreateSA_PlayRecordGoldClashListOther(
      builder,
      _o.TargetUID,
      _o.SeasonID,
      _RecordList);
  }
}

public class SA_PlayRecordGoldClashListOtherT
{
  public int TargetUID { get; set; }
  public int SeasonID { get; set; }
  public List<Lobby.PlayRecordGoldClashDataT> RecordList { get; set; }

  public SA_PlayRecordGoldClashListOtherT() {
    this.TargetUID = 0;
    this.SeasonID = 0;
    this.RecordList = null;
  }
}


}
