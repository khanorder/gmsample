// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_PlayRecordRpgList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_PlayRecordRpgList GetRootAsSA_PlayRecordRpgList(ByteBuffer _bb) { return GetRootAsSA_PlayRecordRpgList(_bb, new SA_PlayRecordRpgList()); }
  public static SA_PlayRecordRpgList GetRootAsSA_PlayRecordRpgList(ByteBuffer _bb, SA_PlayRecordRpgList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_PlayRecordRpgList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.PlayRecordRpgData? RecordList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.PlayRecordRpgData?)(new Lobby.PlayRecordRpgData()).__assign(__p.__vector(o) + j * 32, __p.bb) : null; }
  public int RecordListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ChapterID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Lobby.SA_PlayRecordRpgList> CreateSA_PlayRecordRpgList(FlatBufferBuilder builder,
      VectorOffset RecordListOffset = default(VectorOffset),
      int ChapterID = 0) {
    builder.StartTable(2);
    SA_PlayRecordRpgList.AddChapterID(builder, ChapterID);
    SA_PlayRecordRpgList.AddRecordList(builder, RecordListOffset);
    return SA_PlayRecordRpgList.EndSA_PlayRecordRpgList(builder);
  }

  public static void StartSA_PlayRecordRpgList(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRecordList(FlatBufferBuilder builder, VectorOffset RecordListOffset) { builder.AddOffset(0, RecordListOffset.Value, 0); }
  public static void StartRecordListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(32, numElems, 4); }
  public static void AddChapterID(FlatBufferBuilder builder, int ChapterID) { builder.AddInt(1, ChapterID, 0); }
  public static Offset<Lobby.SA_PlayRecordRpgList> EndSA_PlayRecordRpgList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_PlayRecordRpgList>(o);
  }
  public SA_PlayRecordRpgListT UnPack() {
    var _o = new SA_PlayRecordRpgListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_PlayRecordRpgListT _o) {
    _o.RecordList = new List<Lobby.PlayRecordRpgDataT>();
    for (var _j = 0; _j < this.RecordListLength; ++_j) {_o.RecordList.Add(this.RecordList(_j).HasValue ? this.RecordList(_j).Value.UnPack() : null);}
    _o.ChapterID = this.ChapterID;
  }
  public static Offset<Lobby.SA_PlayRecordRpgList> Pack(FlatBufferBuilder builder, SA_PlayRecordRpgListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_PlayRecordRpgList>);
    var _RecordList = default(VectorOffset);
    if (_o.RecordList != null) {
      StartRecordListVector(builder, _o.RecordList.Count);
      for (var _j = _o.RecordList.Count - 1; _j >= 0; --_j) { Lobby.PlayRecordRpgData.Pack(builder, _o.RecordList[_j]); }
      _RecordList = builder.EndVector();
    }
    return CreateSA_PlayRecordRpgList(
      builder,
      _RecordList,
      _o.ChapterID);
  }
}

public class SA_PlayRecordRpgListT
{
  public List<Lobby.PlayRecordRpgDataT> RecordList { get; set; }
  public int ChapterID { get; set; }

  public SA_PlayRecordRpgListT() {
    this.RecordList = null;
    this.ChapterID = 0;
  }
}


}
