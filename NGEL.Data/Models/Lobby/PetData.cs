// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PetData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static PetData GetRootAsPetData(ByteBuffer _bb) { return GetRootAsPetData(_bb, new PetData()); }
  public static PetData GetRootAsPetData(ByteBuffer _bb, PetData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PetData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int PetID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Ability(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AbilityLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAbilityBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetAbilityBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetAbilityArray() { return __p.__vector_as_array<int>(8); }
  public int Like { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsLocked { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Lobby.PetData> CreatePetData(FlatBufferBuilder builder,
      long UniqueID = 0,
      int PetID = 0,
      VectorOffset AbilityOffset = default(VectorOffset),
      int Like = 0,
      bool IsLocked = false) {
    builder.StartTable(5);
    PetData.AddUniqueID(builder, UniqueID);
    PetData.AddLike(builder, Like);
    PetData.AddAbility(builder, AbilityOffset);
    PetData.AddPetID(builder, PetID);
    PetData.AddIsLocked(builder, IsLocked);
    return PetData.EndPetData(builder);
  }

  public static void StartPetData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddUniqueID(FlatBufferBuilder builder, long UniqueID) { builder.AddLong(0, UniqueID, 0); }
  public static void AddPetID(FlatBufferBuilder builder, int PetID) { builder.AddInt(1, PetID, 0); }
  public static void AddAbility(FlatBufferBuilder builder, VectorOffset AbilityOffset) { builder.AddOffset(2, AbilityOffset.Value, 0); }
  public static VectorOffset CreateAbilityVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAbilityVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAbilityVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAbilityVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAbilityVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLike(FlatBufferBuilder builder, int Like) { builder.AddInt(3, Like, 0); }
  public static void AddIsLocked(FlatBufferBuilder builder, bool IsLocked) { builder.AddBool(4, IsLocked, false); }
  public static Offset<Lobby.PetData> EndPetData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.PetData>(o);
  }
  public PetDataT UnPack() {
    var _o = new PetDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PetDataT _o) {
    _o.UniqueID = this.UniqueID;
    _o.PetID = this.PetID;
    _o.Ability = new List<int>();
    for (var _j = 0; _j < this.AbilityLength; ++_j) {_o.Ability.Add(this.Ability(_j));}
    _o.Like = this.Like;
    _o.IsLocked = this.IsLocked;
  }
  public static Offset<Lobby.PetData> Pack(FlatBufferBuilder builder, PetDataT _o) {
    if (_o == null) return default(Offset<Lobby.PetData>);
    var _Ability = default(VectorOffset);
    if (_o.Ability != null) {
      var __Ability = _o.Ability.ToArray();
      _Ability = CreateAbilityVector(builder, __Ability);
    }
    return CreatePetData(
      builder,
      _o.UniqueID,
      _o.PetID,
      _Ability,
      _o.Like,
      _o.IsLocked);
  }
}

public class PetDataT
{
  public long UniqueID { get; set; }
  public int PetID { get; set; }
  public List<int> Ability { get; set; }
  public int Like { get; set; }
  public bool IsLocked { get; set; }

  public PetDataT() {
    this.UniqueID = 0;
    this.PetID = 0;
    this.Ability = null;
    this.Like = 0;
    this.IsLocked = false;
  }
}


}
