// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SN_FriendRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SN_FriendRequest GetRootAsSN_FriendRequest(ByteBuffer _bb) { return GetRootAsSN_FriendRequest(_bb, new SN_FriendRequest()); }
  public static SN_FriendRequest GetRootAsSN_FriendRequest(ByteBuffer _bb, SN_FriendRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SN_FriendRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.FriendRequestData? FriendRequest { get { int o = __p.__offset(4); return o != 0 ? (Lobby.FriendRequestData?)(new Lobby.FriendRequestData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Lobby.SN_FriendRequest> CreateSN_FriendRequest(FlatBufferBuilder builder,
      Offset<Lobby.FriendRequestData> FriendRequestOffset = default(Offset<Lobby.FriendRequestData>)) {
    builder.StartTable(1);
    SN_FriendRequest.AddFriendRequest(builder, FriendRequestOffset);
    return SN_FriendRequest.EndSN_FriendRequest(builder);
  }

  public static void StartSN_FriendRequest(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFriendRequest(FlatBufferBuilder builder, Offset<Lobby.FriendRequestData> FriendRequestOffset) { builder.AddOffset(0, FriendRequestOffset.Value, 0); }
  public static Offset<Lobby.SN_FriendRequest> EndSN_FriendRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SN_FriendRequest>(o);
  }
  public SN_FriendRequestT UnPack() {
    var _o = new SN_FriendRequestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SN_FriendRequestT _o) {
    _o.FriendRequest = this.FriendRequest.HasValue ? this.FriendRequest.Value.UnPack() : null;
  }
  public static Offset<Lobby.SN_FriendRequest> Pack(FlatBufferBuilder builder, SN_FriendRequestT _o) {
    if (_o == null) return default(Offset<Lobby.SN_FriendRequest>);
    var _FriendRequest = _o.FriendRequest == null ? default(Offset<Lobby.FriendRequestData>) : Lobby.FriendRequestData.Pack(builder, _o.FriendRequest);
    return CreateSN_FriendRequest(
      builder,
      _FriendRequest);
  }
}

public class SN_FriendRequestT
{
  public Lobby.FriendRequestDataT FriendRequest { get; set; }

  public SN_FriendRequestT() {
    this.FriendRequest = null;
  }
}


}
