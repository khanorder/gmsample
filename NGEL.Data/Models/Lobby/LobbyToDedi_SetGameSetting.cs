// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LobbyToDedi_SetGameSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static LobbyToDedi_SetGameSetting GetRootAsLobbyToDedi_SetGameSetting(ByteBuffer _bb) { return GetRootAsLobbyToDedi_SetGameSetting(_bb, new LobbyToDedi_SetGameSetting()); }
  public static LobbyToDedi_SetGameSetting GetRootAsLobbyToDedi_SetGameSetting(ByteBuffer _bb, LobbyToDedi_SetGameSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LobbyToDedi_SetGameSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TeamMembers { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.AISpawnInfo? AISpawnList(int j) { int o = __p.__offset(6); return o != 0 ? (Lobby.AISpawnInfo?)(new Lobby.AISpawnInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AISpawnListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MatchID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchIDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMatchIDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMatchIDArray() { return __p.__vector_as_array<byte>(8); }
  public bool IsCustomMatch { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int MatchingTableID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TeamCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RunningTime { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.PlayerSpawnInfo? PlayerSpawnList(int j) { int o = __p.__offset(18); return o != 0 ? (Lobby.PlayerSpawnInfo?)(new Lobby.PlayerSpawnInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayerSpawnListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.LobbyToDedi_SetGameSetting> CreateLobbyToDedi_SetGameSetting(FlatBufferBuilder builder,
      int TeamMembers = 0,
      VectorOffset AISpawnListOffset = default(VectorOffset),
      StringOffset MatchIDOffset = default(StringOffset),
      bool IsCustomMatch = false,
      int MatchingTableID = 0,
      int TeamCount = 0,
      int RunningTime = 0,
      VectorOffset PlayerSpawnListOffset = default(VectorOffset)) {
    builder.StartTable(8);
    LobbyToDedi_SetGameSetting.AddPlayerSpawnList(builder, PlayerSpawnListOffset);
    LobbyToDedi_SetGameSetting.AddRunningTime(builder, RunningTime);
    LobbyToDedi_SetGameSetting.AddTeamCount(builder, TeamCount);
    LobbyToDedi_SetGameSetting.AddMatchingTableID(builder, MatchingTableID);
    LobbyToDedi_SetGameSetting.AddMatchID(builder, MatchIDOffset);
    LobbyToDedi_SetGameSetting.AddAISpawnList(builder, AISpawnListOffset);
    LobbyToDedi_SetGameSetting.AddTeamMembers(builder, TeamMembers);
    LobbyToDedi_SetGameSetting.AddIsCustomMatch(builder, IsCustomMatch);
    return LobbyToDedi_SetGameSetting.EndLobbyToDedi_SetGameSetting(builder);
  }

  public static void StartLobbyToDedi_SetGameSetting(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddTeamMembers(FlatBufferBuilder builder, int TeamMembers) { builder.AddInt(0, TeamMembers, 0); }
  public static void AddAISpawnList(FlatBufferBuilder builder, VectorOffset AISpawnListOffset) { builder.AddOffset(1, AISpawnListOffset.Value, 0); }
  public static VectorOffset CreateAISpawnListVector(FlatBufferBuilder builder, Offset<Lobby.AISpawnInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAISpawnListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.AISpawnInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAISpawnListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.AISpawnInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAISpawnListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.AISpawnInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAISpawnListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMatchID(FlatBufferBuilder builder, StringOffset MatchIDOffset) { builder.AddOffset(2, MatchIDOffset.Value, 0); }
  public static void AddIsCustomMatch(FlatBufferBuilder builder, bool IsCustomMatch) { builder.AddBool(3, IsCustomMatch, false); }
  public static void AddMatchingTableID(FlatBufferBuilder builder, int MatchingTableID) { builder.AddInt(4, MatchingTableID, 0); }
  public static void AddTeamCount(FlatBufferBuilder builder, int TeamCount) { builder.AddInt(5, TeamCount, 0); }
  public static void AddRunningTime(FlatBufferBuilder builder, int RunningTime) { builder.AddInt(6, RunningTime, 0); }
  public static void AddPlayerSpawnList(FlatBufferBuilder builder, VectorOffset PlayerSpawnListOffset) { builder.AddOffset(7, PlayerSpawnListOffset.Value, 0); }
  public static VectorOffset CreatePlayerSpawnListVector(FlatBufferBuilder builder, Offset<Lobby.PlayerSpawnInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlayerSpawnListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.PlayerSpawnInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerSpawnListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.PlayerSpawnInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerSpawnListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.PlayerSpawnInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPlayerSpawnListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.LobbyToDedi_SetGameSetting> EndLobbyToDedi_SetGameSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.LobbyToDedi_SetGameSetting>(o);
  }
  public LobbyToDedi_SetGameSettingT UnPack() {
    var _o = new LobbyToDedi_SetGameSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LobbyToDedi_SetGameSettingT _o) {
    _o.TeamMembers = this.TeamMembers;
    _o.AISpawnList = new List<Lobby.AISpawnInfoT>();
    for (var _j = 0; _j < this.AISpawnListLength; ++_j) {_o.AISpawnList.Add(this.AISpawnList(_j).HasValue ? this.AISpawnList(_j).Value.UnPack() : null);}
    _o.MatchID = this.MatchID;
    _o.IsCustomMatch = this.IsCustomMatch;
    _o.MatchingTableID = this.MatchingTableID;
    _o.TeamCount = this.TeamCount;
    _o.RunningTime = this.RunningTime;
    _o.PlayerSpawnList = new List<Lobby.PlayerSpawnInfoT>();
    for (var _j = 0; _j < this.PlayerSpawnListLength; ++_j) {_o.PlayerSpawnList.Add(this.PlayerSpawnList(_j).HasValue ? this.PlayerSpawnList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.LobbyToDedi_SetGameSetting> Pack(FlatBufferBuilder builder, LobbyToDedi_SetGameSettingT _o) {
    if (_o == null) return default(Offset<Lobby.LobbyToDedi_SetGameSetting>);
    var _AISpawnList = default(VectorOffset);
    if (_o.AISpawnList != null) {
      var __AISpawnList = new Offset<Lobby.AISpawnInfo>[_o.AISpawnList.Count];
      for (var _j = 0; _j < __AISpawnList.Length; ++_j) { __AISpawnList[_j] = Lobby.AISpawnInfo.Pack(builder, _o.AISpawnList[_j]); }
      _AISpawnList = CreateAISpawnListVector(builder, __AISpawnList);
    }
    var _MatchID = _o.MatchID == null ? default(StringOffset) : builder.CreateString(_o.MatchID);
    var _PlayerSpawnList = default(VectorOffset);
    if (_o.PlayerSpawnList != null) {
      var __PlayerSpawnList = new Offset<Lobby.PlayerSpawnInfo>[_o.PlayerSpawnList.Count];
      for (var _j = 0; _j < __PlayerSpawnList.Length; ++_j) { __PlayerSpawnList[_j] = Lobby.PlayerSpawnInfo.Pack(builder, _o.PlayerSpawnList[_j]); }
      _PlayerSpawnList = CreatePlayerSpawnListVector(builder, __PlayerSpawnList);
    }
    return CreateLobbyToDedi_SetGameSetting(
      builder,
      _o.TeamMembers,
      _AISpawnList,
      _MatchID,
      _o.IsCustomMatch,
      _o.MatchingTableID,
      _o.TeamCount,
      _o.RunningTime,
      _PlayerSpawnList);
  }
}

public class LobbyToDedi_SetGameSettingT
{
  public int TeamMembers { get; set; }
  public List<Lobby.AISpawnInfoT> AISpawnList { get; set; }
  public string MatchID { get; set; }
  public bool IsCustomMatch { get; set; }
  public int MatchingTableID { get; set; }
  public int TeamCount { get; set; }
  public int RunningTime { get; set; }
  public List<Lobby.PlayerSpawnInfoT> PlayerSpawnList { get; set; }

  public LobbyToDedi_SetGameSettingT() {
    this.TeamMembers = 0;
    this.AISpawnList = null;
    this.MatchID = null;
    this.IsCustomMatch = false;
    this.MatchingTableID = 0;
    this.TeamCount = 0;
    this.RunningTime = 0;
    this.PlayerSpawnList = null;
  }
}


}
