// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_Inventory : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_Inventory GetRootAsSA_Inventory(ByteBuffer _bb) { return GetRootAsSA_Inventory(_bb, new SA_Inventory()); }
  public static SA_Inventory GetRootAsSA_Inventory(ByteBuffer _bb, SA_Inventory obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_Inventory __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.ItemData? ItemList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.ItemData?)(new Lobby.ItemData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ItemListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_Inventory> CreateSA_Inventory(FlatBufferBuilder builder,
      VectorOffset ItemListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_Inventory.AddItemList(builder, ItemListOffset);
    return SA_Inventory.EndSA_Inventory(builder);
  }

  public static void StartSA_Inventory(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddItemList(FlatBufferBuilder builder, VectorOffset ItemListOffset) { builder.AddOffset(0, ItemListOffset.Value, 0); }
  public static void StartItemListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.SA_Inventory> EndSA_Inventory(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_Inventory>(o);
  }
  public SA_InventoryT UnPack() {
    var _o = new SA_InventoryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_InventoryT _o) {
    _o.ItemList = new List<Lobby.ItemDataT>();
    for (var _j = 0; _j < this.ItemListLength; ++_j) {_o.ItemList.Add(this.ItemList(_j).HasValue ? this.ItemList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_Inventory> Pack(FlatBufferBuilder builder, SA_InventoryT _o) {
    if (_o == null) return default(Offset<Lobby.SA_Inventory>);
    var _ItemList = default(VectorOffset);
    if (_o.ItemList != null) {
      StartItemListVector(builder, _o.ItemList.Count);
      for (var _j = _o.ItemList.Count - 1; _j >= 0; --_j) { Lobby.ItemData.Pack(builder, _o.ItemList[_j]); }
      _ItemList = builder.EndVector();
    }
    return CreateSA_Inventory(
      builder,
      _ItemList);
  }
}

public class SA_InventoryT
{
  public List<Lobby.ItemDataT> ItemList { get; set; }

  public SA_InventoryT() {
    this.ItemList = null;
  }
}


}
