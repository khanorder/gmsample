// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_WonderCubeList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_WonderCubeList GetRootAsSA_WonderCubeList(ByteBuffer _bb) { return GetRootAsSA_WonderCubeList(_bb, new SA_WonderCubeList()); }
  public static SA_WonderCubeList GetRootAsSA_WonderCubeList(ByteBuffer _bb, SA_WonderCubeList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_WonderCubeList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.WonderCubeData? WonderCubeList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.WonderCubeData?)(new Lobby.WonderCubeData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int WonderCubeListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_WonderCubeList> CreateSA_WonderCubeList(FlatBufferBuilder builder,
      VectorOffset WonderCubeListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_WonderCubeList.AddWonderCubeList(builder, WonderCubeListOffset);
    return SA_WonderCubeList.EndSA_WonderCubeList(builder);
  }

  public static void StartSA_WonderCubeList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddWonderCubeList(FlatBufferBuilder builder, VectorOffset WonderCubeListOffset) { builder.AddOffset(0, WonderCubeListOffset.Value, 0); }
  public static void StartWonderCubeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.SA_WonderCubeList> EndSA_WonderCubeList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_WonderCubeList>(o);
  }
  public SA_WonderCubeListT UnPack() {
    var _o = new SA_WonderCubeListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_WonderCubeListT _o) {
    _o.WonderCubeList = new List<Lobby.WonderCubeDataT>();
    for (var _j = 0; _j < this.WonderCubeListLength; ++_j) {_o.WonderCubeList.Add(this.WonderCubeList(_j).HasValue ? this.WonderCubeList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_WonderCubeList> Pack(FlatBufferBuilder builder, SA_WonderCubeListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_WonderCubeList>);
    var _WonderCubeList = default(VectorOffset);
    if (_o.WonderCubeList != null) {
      StartWonderCubeListVector(builder, _o.WonderCubeList.Count);
      for (var _j = _o.WonderCubeList.Count - 1; _j >= 0; --_j) { Lobby.WonderCubeData.Pack(builder, _o.WonderCubeList[_j]); }
      _WonderCubeList = builder.EndVector();
    }
    return CreateSA_WonderCubeList(
      builder,
      _WonderCubeList);
  }
}

public class SA_WonderCubeListT
{
  public List<Lobby.WonderCubeDataT> WonderCubeList { get; set; }

  public SA_WonderCubeListT() {
    this.WonderCubeList = null;
  }
}


}
