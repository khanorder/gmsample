// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_CheatSetUserAccount : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_CheatSetUserAccount GetRootAsSA_CheatSetUserAccount(ByteBuffer _bb) { return GetRootAsSA_CheatSetUserAccount(_bb, new SA_CheatSetUserAccount()); }
  public static SA_CheatSetUserAccount GetRootAsSA_CheatSetUserAccount(ByteBuffer _bb, SA_CheatSetUserAccount obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_CheatSetUserAccount __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.UserAccountData? UserAccount { get { int o = __p.__offset(4); return o != 0 ? (Lobby.UserAccountData?)(new Lobby.UserAccountData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Lobby.SA_CheatSetUserAccount> CreateSA_CheatSetUserAccount(FlatBufferBuilder builder,
      Offset<Lobby.UserAccountData> UserAccountOffset = default(Offset<Lobby.UserAccountData>)) {
    builder.StartTable(1);
    SA_CheatSetUserAccount.AddUserAccount(builder, UserAccountOffset);
    return SA_CheatSetUserAccount.EndSA_CheatSetUserAccount(builder);
  }

  public static void StartSA_CheatSetUserAccount(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddUserAccount(FlatBufferBuilder builder, Offset<Lobby.UserAccountData> UserAccountOffset) { builder.AddOffset(0, UserAccountOffset.Value, 0); }
  public static Offset<Lobby.SA_CheatSetUserAccount> EndSA_CheatSetUserAccount(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_CheatSetUserAccount>(o);
  }
  public SA_CheatSetUserAccountT UnPack() {
    var _o = new SA_CheatSetUserAccountT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_CheatSetUserAccountT _o) {
    _o.UserAccount = this.UserAccount.HasValue ? this.UserAccount.Value.UnPack() : null;
  }
  public static Offset<Lobby.SA_CheatSetUserAccount> Pack(FlatBufferBuilder builder, SA_CheatSetUserAccountT _o) {
    if (_o == null) return default(Offset<Lobby.SA_CheatSetUserAccount>);
    var _UserAccount = _o.UserAccount == null ? default(Offset<Lobby.UserAccountData>) : Lobby.UserAccountData.Pack(builder, _o.UserAccount);
    return CreateSA_CheatSetUserAccount(
      builder,
      _UserAccount);
  }
}

public class SA_CheatSetUserAccountT
{
  public Lobby.UserAccountDataT UserAccount { get; set; }

  public SA_CheatSetUserAccountT() {
    this.UserAccount = null;
  }
}


}
