// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SN_NewMail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SN_NewMail GetRootAsSN_NewMail(ByteBuffer _bb) { return GetRootAsSN_NewMail(_bb, new SN_NewMail()); }
  public static SN_NewMail GetRootAsSN_NewMail(ByteBuffer _bb, SN_NewMail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SN_NewMail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MailIDList(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MailIDListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetMailIDListBytes() { return __p.__vector_as_span<long>(4, 8); }
#else
  public ArraySegment<byte>? GetMailIDListBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public long[] GetMailIDListArray() { return __p.__vector_as_array<long>(4); }

  public static Offset<Lobby.SN_NewMail> CreateSN_NewMail(FlatBufferBuilder builder,
      VectorOffset MailIDListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SN_NewMail.AddMailIDList(builder, MailIDListOffset);
    return SN_NewMail.EndSN_NewMail(builder);
  }

  public static void StartSN_NewMail(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMailIDList(FlatBufferBuilder builder, VectorOffset MailIDListOffset) { builder.AddOffset(0, MailIDListOffset.Value, 0); }
  public static VectorOffset CreateMailIDListVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMailIDListVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMailIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMailIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMailIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<Lobby.SN_NewMail> EndSN_NewMail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SN_NewMail>(o);
  }
  public SN_NewMailT UnPack() {
    var _o = new SN_NewMailT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SN_NewMailT _o) {
    _o.MailIDList = new List<long>();
    for (var _j = 0; _j < this.MailIDListLength; ++_j) {_o.MailIDList.Add(this.MailIDList(_j));}
  }
  public static Offset<Lobby.SN_NewMail> Pack(FlatBufferBuilder builder, SN_NewMailT _o) {
    if (_o == null) return default(Offset<Lobby.SN_NewMail>);
    var _MailIDList = default(VectorOffset);
    if (_o.MailIDList != null) {
      var __MailIDList = _o.MailIDList.ToArray();
      _MailIDList = CreateMailIDListVector(builder, __MailIDList);
    }
    return CreateSN_NewMail(
      builder,
      _MailIDList);
  }
}

public class SN_NewMailT
{
  public List<long> MailIDList { get; set; }

  public SN_NewMailT() {
    this.MailIDList = null;
  }
}


}
