// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_HeroEyeColorChange : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_HeroEyeColorChange GetRootAsSA_HeroEyeColorChange(ByteBuffer _bb) { return GetRootAsSA_HeroEyeColorChange(_bb, new SA_HeroEyeColorChange()); }
  public static SA_HeroEyeColorChange GetRootAsSA_HeroEyeColorChange(ByteBuffer _bb, SA_HeroEyeColorChange obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_HeroEyeColorChange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int HeroID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LeftEyeHexColor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLeftEyeHexColorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLeftEyeHexColorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLeftEyeHexColorArray() { return __p.__vector_as_array<byte>(6); }
  public string RightEyeHexColor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRightEyeHexColorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRightEyeHexColorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRightEyeHexColorArray() { return __p.__vector_as_array<byte>(8); }
  public Lobby.ItemData? ChangeItemList(int j) { int o = __p.__offset(10); return o != 0 ? (Lobby.ItemData?)(new Lobby.ItemData()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ChangeItemListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_HeroEyeColorChange> CreateSA_HeroEyeColorChange(FlatBufferBuilder builder,
      int HeroID = 0,
      StringOffset LeftEyeHexColorOffset = default(StringOffset),
      StringOffset RightEyeHexColorOffset = default(StringOffset),
      VectorOffset ChangeItemListOffset = default(VectorOffset)) {
    builder.StartTable(4);
    SA_HeroEyeColorChange.AddChangeItemList(builder, ChangeItemListOffset);
    SA_HeroEyeColorChange.AddRightEyeHexColor(builder, RightEyeHexColorOffset);
    SA_HeroEyeColorChange.AddLeftEyeHexColor(builder, LeftEyeHexColorOffset);
    SA_HeroEyeColorChange.AddHeroID(builder, HeroID);
    return SA_HeroEyeColorChange.EndSA_HeroEyeColorChange(builder);
  }

  public static void StartSA_HeroEyeColorChange(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddHeroID(FlatBufferBuilder builder, int HeroID) { builder.AddInt(0, HeroID, 0); }
  public static void AddLeftEyeHexColor(FlatBufferBuilder builder, StringOffset LeftEyeHexColorOffset) { builder.AddOffset(1, LeftEyeHexColorOffset.Value, 0); }
  public static void AddRightEyeHexColor(FlatBufferBuilder builder, StringOffset RightEyeHexColorOffset) { builder.AddOffset(2, RightEyeHexColorOffset.Value, 0); }
  public static void AddChangeItemList(FlatBufferBuilder builder, VectorOffset ChangeItemListOffset) { builder.AddOffset(3, ChangeItemListOffset.Value, 0); }
  public static void StartChangeItemListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.SA_HeroEyeColorChange> EndSA_HeroEyeColorChange(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_HeroEyeColorChange>(o);
  }
  public SA_HeroEyeColorChangeT UnPack() {
    var _o = new SA_HeroEyeColorChangeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_HeroEyeColorChangeT _o) {
    _o.HeroID = this.HeroID;
    _o.LeftEyeHexColor = this.LeftEyeHexColor;
    _o.RightEyeHexColor = this.RightEyeHexColor;
    _o.ChangeItemList = new List<Lobby.ItemDataT>();
    for (var _j = 0; _j < this.ChangeItemListLength; ++_j) {_o.ChangeItemList.Add(this.ChangeItemList(_j).HasValue ? this.ChangeItemList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_HeroEyeColorChange> Pack(FlatBufferBuilder builder, SA_HeroEyeColorChangeT _o) {
    if (_o == null) return default(Offset<Lobby.SA_HeroEyeColorChange>);
    var _LeftEyeHexColor = _o.LeftEyeHexColor == null ? default(StringOffset) : builder.CreateString(_o.LeftEyeHexColor);
    var _RightEyeHexColor = _o.RightEyeHexColor == null ? default(StringOffset) : builder.CreateString(_o.RightEyeHexColor);
    var _ChangeItemList = default(VectorOffset);
    if (_o.ChangeItemList != null) {
      StartChangeItemListVector(builder, _o.ChangeItemList.Count);
      for (var _j = _o.ChangeItemList.Count - 1; _j >= 0; --_j) { Lobby.ItemData.Pack(builder, _o.ChangeItemList[_j]); }
      _ChangeItemList = builder.EndVector();
    }
    return CreateSA_HeroEyeColorChange(
      builder,
      _o.HeroID,
      _LeftEyeHexColor,
      _RightEyeHexColor,
      _ChangeItemList);
  }
}

public class SA_HeroEyeColorChangeT
{
  public int HeroID { get; set; }
  public string LeftEyeHexColor { get; set; }
  public string RightEyeHexColor { get; set; }
  public List<Lobby.ItemDataT> ChangeItemList { get; set; }

  public SA_HeroEyeColorChangeT() {
    this.HeroID = 0;
    this.LeftEyeHexColor = null;
    this.RightEyeHexColor = null;
    this.ChangeItemList = null;
  }
}


}
