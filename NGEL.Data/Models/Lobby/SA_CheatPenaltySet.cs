// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_CheatPenaltySet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_CheatPenaltySet GetRootAsSA_CheatPenaltySet(ByteBuffer _bb) { return GetRootAsSA_CheatPenaltySet(_bb, new SA_CheatPenaltySet()); }
  public static SA_CheatPenaltySet GetRootAsSA_CheatPenaltySet(ByteBuffer _bb, SA_CheatPenaltySet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_CheatPenaltySet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.PenaltyInfo? PenaltyList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.PenaltyInfo?)(new Lobby.PenaltyInfo()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int PenaltyListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string NewNick { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNewNickBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNewNickBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNewNickArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<Lobby.SA_CheatPenaltySet> CreateSA_CheatPenaltySet(FlatBufferBuilder builder,
      VectorOffset PenaltyListOffset = default(VectorOffset),
      StringOffset NewNickOffset = default(StringOffset)) {
    builder.StartTable(2);
    SA_CheatPenaltySet.AddNewNick(builder, NewNickOffset);
    SA_CheatPenaltySet.AddPenaltyList(builder, PenaltyListOffset);
    return SA_CheatPenaltySet.EndSA_CheatPenaltySet(builder);
  }

  public static void StartSA_CheatPenaltySet(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPenaltyList(FlatBufferBuilder builder, VectorOffset PenaltyListOffset) { builder.AddOffset(0, PenaltyListOffset.Value, 0); }
  public static void StartPenaltyListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 4); }
  public static void AddNewNick(FlatBufferBuilder builder, StringOffset NewNickOffset) { builder.AddOffset(1, NewNickOffset.Value, 0); }
  public static Offset<Lobby.SA_CheatPenaltySet> EndSA_CheatPenaltySet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_CheatPenaltySet>(o);
  }
  public SA_CheatPenaltySetT UnPack() {
    var _o = new SA_CheatPenaltySetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_CheatPenaltySetT _o) {
    _o.PenaltyList = new List<Lobby.PenaltyInfoT>();
    for (var _j = 0; _j < this.PenaltyListLength; ++_j) {_o.PenaltyList.Add(this.PenaltyList(_j).HasValue ? this.PenaltyList(_j).Value.UnPack() : null);}
    _o.NewNick = this.NewNick;
  }
  public static Offset<Lobby.SA_CheatPenaltySet> Pack(FlatBufferBuilder builder, SA_CheatPenaltySetT _o) {
    if (_o == null) return default(Offset<Lobby.SA_CheatPenaltySet>);
    var _PenaltyList = default(VectorOffset);
    if (_o.PenaltyList != null) {
      StartPenaltyListVector(builder, _o.PenaltyList.Count);
      for (var _j = _o.PenaltyList.Count - 1; _j >= 0; --_j) { Lobby.PenaltyInfo.Pack(builder, _o.PenaltyList[_j]); }
      _PenaltyList = builder.EndVector();
    }
    var _NewNick = _o.NewNick == null ? default(StringOffset) : builder.CreateString(_o.NewNick);
    return CreateSA_CheatPenaltySet(
      builder,
      _PenaltyList,
      _NewNick);
  }
}

public class SA_CheatPenaltySetT
{
  public List<Lobby.PenaltyInfoT> PenaltyList { get; set; }
  public string NewNick { get; set; }

  public SA_CheatPenaltySetT() {
    this.PenaltyList = null;
    this.NewNick = null;
  }
}


}
