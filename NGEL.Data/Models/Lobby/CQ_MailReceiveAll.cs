// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CQ_MailReceiveAll : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static CQ_MailReceiveAll GetRootAsCQ_MailReceiveAll(ByteBuffer _bb) { return GetRootAsCQ_MailReceiveAll(_bb, new CQ_MailReceiveAll()); }
  public static CQ_MailReceiveAll GetRootAsCQ_MailReceiveAll(ByteBuffer _bb, CQ_MailReceiveAll obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CQ_MailReceiveAll __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MailIDList(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MailIDListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetMailIDListBytes() { return __p.__vector_as_span<long>(4, 8); }
#else
  public ArraySegment<byte>? GetMailIDListBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public long[] GetMailIDListArray() { return __p.__vector_as_array<long>(4); }
  public bool IsBM { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Lobby.CQ_MailReceiveAll> CreateCQ_MailReceiveAll(FlatBufferBuilder builder,
      VectorOffset MailIDListOffset = default(VectorOffset),
      bool IsBM = false) {
    builder.StartTable(2);
    CQ_MailReceiveAll.AddMailIDList(builder, MailIDListOffset);
    CQ_MailReceiveAll.AddIsBM(builder, IsBM);
    return CQ_MailReceiveAll.EndCQ_MailReceiveAll(builder);
  }

  public static void StartCQ_MailReceiveAll(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMailIDList(FlatBufferBuilder builder, VectorOffset MailIDListOffset) { builder.AddOffset(0, MailIDListOffset.Value, 0); }
  public static VectorOffset CreateMailIDListVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMailIDListVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMailIDListVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMailIDListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMailIDListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddIsBM(FlatBufferBuilder builder, bool IsBM) { builder.AddBool(1, IsBM, false); }
  public static Offset<Lobby.CQ_MailReceiveAll> EndCQ_MailReceiveAll(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.CQ_MailReceiveAll>(o);
  }
  public CQ_MailReceiveAllT UnPack() {
    var _o = new CQ_MailReceiveAllT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CQ_MailReceiveAllT _o) {
    _o.MailIDList = new List<long>();
    for (var _j = 0; _j < this.MailIDListLength; ++_j) {_o.MailIDList.Add(this.MailIDList(_j));}
    _o.IsBM = this.IsBM;
  }
  public static Offset<Lobby.CQ_MailReceiveAll> Pack(FlatBufferBuilder builder, CQ_MailReceiveAllT _o) {
    if (_o == null) return default(Offset<Lobby.CQ_MailReceiveAll>);
    var _MailIDList = default(VectorOffset);
    if (_o.MailIDList != null) {
      var __MailIDList = _o.MailIDList.ToArray();
      _MailIDList = CreateMailIDListVector(builder, __MailIDList);
    }
    return CreateCQ_MailReceiveAll(
      builder,
      _MailIDList,
      _o.IsBM);
  }
}

public class CQ_MailReceiveAllT
{
  public List<long> MailIDList { get; set; }
  public bool IsBM { get; set; }

  public CQ_MailReceiveAllT() {
    this.MailIDList = null;
    this.IsBM = false;
  }
}


}
