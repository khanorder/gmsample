// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MatchingSuccessInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static MatchingSuccessInfo GetRootAsMatchingSuccessInfo(ByteBuffer _bb) { return GetRootAsMatchingSuccessInfo(_bb, new MatchingSuccessInfo()); }
  public static MatchingSuccessInfo GetRootAsMatchingSuccessInfo(ByteBuffer _bb, MatchingSuccessInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MatchingSuccessInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TeamID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTeamIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTeamIDArray() { return __p.__vector_as_array<byte>(4); }
  public int UID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Nick { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNickBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNickBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNickArray() { return __p.__vector_as_array<byte>(8); }
  public int HeroSkinID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Lobby.MultiArtifactInfo? ArtifactList(int j) { int o = __p.__offset(12); return o != 0 ? (Lobby.MultiArtifactInfo?)(new Lobby.MultiArtifactInfo()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ArtifactListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.MatchingSuccessInfo> CreateMatchingSuccessInfo(FlatBufferBuilder builder,
      StringOffset TeamIDOffset = default(StringOffset),
      int UID = 0,
      StringOffset NickOffset = default(StringOffset),
      int HeroSkinID = 0,
      VectorOffset ArtifactListOffset = default(VectorOffset)) {
    builder.StartTable(5);
    MatchingSuccessInfo.AddArtifactList(builder, ArtifactListOffset);
    MatchingSuccessInfo.AddHeroSkinID(builder, HeroSkinID);
    MatchingSuccessInfo.AddNick(builder, NickOffset);
    MatchingSuccessInfo.AddUID(builder, UID);
    MatchingSuccessInfo.AddTeamID(builder, TeamIDOffset);
    return MatchingSuccessInfo.EndMatchingSuccessInfo(builder);
  }

  public static void StartMatchingSuccessInfo(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTeamID(FlatBufferBuilder builder, StringOffset TeamIDOffset) { builder.AddOffset(0, TeamIDOffset.Value, 0); }
  public static void AddUID(FlatBufferBuilder builder, int UID) { builder.AddInt(1, UID, 0); }
  public static void AddNick(FlatBufferBuilder builder, StringOffset NickOffset) { builder.AddOffset(2, NickOffset.Value, 0); }
  public static void AddHeroSkinID(FlatBufferBuilder builder, int HeroSkinID) { builder.AddInt(3, HeroSkinID, 0); }
  public static void AddArtifactList(FlatBufferBuilder builder, VectorOffset ArtifactListOffset) { builder.AddOffset(4, ArtifactListOffset.Value, 0); }
  public static void StartArtifactListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.MatchingSuccessInfo> EndMatchingSuccessInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.MatchingSuccessInfo>(o);
  }
  public MatchingSuccessInfoT UnPack() {
    var _o = new MatchingSuccessInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MatchingSuccessInfoT _o) {
    _o.TeamID = this.TeamID;
    _o.UID = this.UID;
    _o.Nick = this.Nick;
    _o.HeroSkinID = this.HeroSkinID;
    _o.ArtifactList = new List<Lobby.MultiArtifactInfoT>();
    for (var _j = 0; _j < this.ArtifactListLength; ++_j) {_o.ArtifactList.Add(this.ArtifactList(_j).HasValue ? this.ArtifactList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.MatchingSuccessInfo> Pack(FlatBufferBuilder builder, MatchingSuccessInfoT _o) {
    if (_o == null) return default(Offset<Lobby.MatchingSuccessInfo>);
    var _TeamID = _o.TeamID == null ? default(StringOffset) : builder.CreateString(_o.TeamID);
    var _Nick = _o.Nick == null ? default(StringOffset) : builder.CreateString(_o.Nick);
    var _ArtifactList = default(VectorOffset);
    if (_o.ArtifactList != null) {
      StartArtifactListVector(builder, _o.ArtifactList.Count);
      for (var _j = _o.ArtifactList.Count - 1; _j >= 0; --_j) { Lobby.MultiArtifactInfo.Pack(builder, _o.ArtifactList[_j]); }
      _ArtifactList = builder.EndVector();
    }
    return CreateMatchingSuccessInfo(
      builder,
      _TeamID,
      _o.UID,
      _Nick,
      _o.HeroSkinID,
      _ArtifactList);
  }
}

public class MatchingSuccessInfoT
{
  public string TeamID { get; set; }
  public int UID { get; set; }
  public string Nick { get; set; }
  public int HeroSkinID { get; set; }
  public List<Lobby.MultiArtifactInfoT> ArtifactList { get; set; }

  public MatchingSuccessInfoT() {
    this.TeamID = null;
    this.UID = 0;
    this.Nick = null;
    this.HeroSkinID = 0;
    this.ArtifactList = null;
  }
}


}
