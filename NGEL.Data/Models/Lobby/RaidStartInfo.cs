// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RaidStartInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static RaidStartInfo GetRootAsRaidStartInfo(ByteBuffer _bb) { return GetRootAsRaidStartInfo(_bb, new RaidStartInfo()); }
  public static RaidStartInfo GetRootAsRaidStartInfo(ByteBuffer _bb, RaidStartInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RaidStartInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HeroID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RaidMapID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRaidMapIDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRaidMapIDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRaidMapIDArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<Lobby.RaidStartInfo> CreateRaidStartInfo(FlatBufferBuilder builder,
      int UID = 0,
      int HeroID = 0,
      StringOffset RaidMapIDOffset = default(StringOffset)) {
    builder.StartTable(3);
    RaidStartInfo.AddRaidMapID(builder, RaidMapIDOffset);
    RaidStartInfo.AddHeroID(builder, HeroID);
    RaidStartInfo.AddUID(builder, UID);
    return RaidStartInfo.EndRaidStartInfo(builder);
  }

  public static void StartRaidStartInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddUID(FlatBufferBuilder builder, int UID) { builder.AddInt(0, UID, 0); }
  public static void AddHeroID(FlatBufferBuilder builder, int HeroID) { builder.AddInt(1, HeroID, 0); }
  public static void AddRaidMapID(FlatBufferBuilder builder, StringOffset RaidMapIDOffset) { builder.AddOffset(2, RaidMapIDOffset.Value, 0); }
  public static Offset<Lobby.RaidStartInfo> EndRaidStartInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.RaidStartInfo>(o);
  }
  public RaidStartInfoT UnPack() {
    var _o = new RaidStartInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RaidStartInfoT _o) {
    _o.UID = this.UID;
    _o.HeroID = this.HeroID;
    _o.RaidMapID = this.RaidMapID;
  }
  public static Offset<Lobby.RaidStartInfo> Pack(FlatBufferBuilder builder, RaidStartInfoT _o) {
    if (_o == null) return default(Offset<Lobby.RaidStartInfo>);
    var _RaidMapID = _o.RaidMapID == null ? default(StringOffset) : builder.CreateString(_o.RaidMapID);
    return CreateRaidStartInfo(
      builder,
      _o.UID,
      _o.HeroID,
      _RaidMapID);
  }
}

public class RaidStartInfoT
{
  public int UID { get; set; }
  public int HeroID { get; set; }
  public string RaidMapID { get; set; }

  public RaidStartInfoT() {
    this.UID = 0;
    this.HeroID = 0;
    this.RaidMapID = null;
  }
}


}
