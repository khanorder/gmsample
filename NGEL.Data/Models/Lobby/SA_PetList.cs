// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_PetList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_PetList GetRootAsSA_PetList(ByteBuffer _bb) { return GetRootAsSA_PetList(_bb, new SA_PetList()); }
  public static SA_PetList GetRootAsSA_PetList(ByteBuffer _bb, SA_PetList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_PetList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.PetData? PetList(int j) { int o = __p.__offset(4); return o != 0 ? (Lobby.PetData?)(new Lobby.PetData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PetListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.SA_PetList> CreateSA_PetList(FlatBufferBuilder builder,
      VectorOffset PetListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SA_PetList.AddPetList(builder, PetListOffset);
    return SA_PetList.EndSA_PetList(builder);
  }

  public static void StartSA_PetList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPetList(FlatBufferBuilder builder, VectorOffset PetListOffset) { builder.AddOffset(0, PetListOffset.Value, 0); }
  public static VectorOffset CreatePetListVector(FlatBufferBuilder builder, Offset<Lobby.PetData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePetListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.PetData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePetListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.PetData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePetListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.PetData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPetListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Lobby.SA_PetList> EndSA_PetList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_PetList>(o);
  }
  public SA_PetListT UnPack() {
    var _o = new SA_PetListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_PetListT _o) {
    _o.PetList = new List<Lobby.PetDataT>();
    for (var _j = 0; _j < this.PetListLength; ++_j) {_o.PetList.Add(this.PetList(_j).HasValue ? this.PetList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.SA_PetList> Pack(FlatBufferBuilder builder, SA_PetListT _o) {
    if (_o == null) return default(Offset<Lobby.SA_PetList>);
    var _PetList = default(VectorOffset);
    if (_o.PetList != null) {
      var __PetList = new Offset<Lobby.PetData>[_o.PetList.Count];
      for (var _j = 0; _j < __PetList.Length; ++_j) { __PetList[_j] = Lobby.PetData.Pack(builder, _o.PetList[_j]); }
      _PetList = CreatePetListVector(builder, __PetList);
    }
    return CreateSA_PetList(
      builder,
      _PetList);
  }
}

public class SA_PetListT
{
  public List<Lobby.PetDataT> PetList { get; set; }

  public SA_PetListT() {
    this.PetList = null;
  }
}


}
