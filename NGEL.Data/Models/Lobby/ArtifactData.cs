// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ArtifactData : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ArtifactData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ArtifactID { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Enhance { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public int Count { get { return __p.bb.GetInt(__p.bb_pos + 8); } }
  public int AcquiredAt { get { return __p.bb.GetInt(__p.bb_pos + 12); } }

  public static Offset<Lobby.ArtifactData> CreateArtifactData(FlatBufferBuilder builder, int ArtifactID, int Enhance, int Count, int AcquiredAt) {
    builder.Prep(4, 16);
    builder.PutInt(AcquiredAt);
    builder.PutInt(Count);
    builder.PutInt(Enhance);
    builder.PutInt(ArtifactID);
    return new Offset<Lobby.ArtifactData>(builder.Offset);
  }
  public ArtifactDataT UnPack() {
    var _o = new ArtifactDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ArtifactDataT _o) {
    _o.ArtifactID = this.ArtifactID;
    _o.Enhance = this.Enhance;
    _o.Count = this.Count;
    _o.AcquiredAt = this.AcquiredAt;
  }
  public static Offset<Lobby.ArtifactData> Pack(FlatBufferBuilder builder, ArtifactDataT _o) {
    if (_o == null) return default(Offset<Lobby.ArtifactData>);
    return CreateArtifactData(
      builder,
      _o.ArtifactID,
      _o.Enhance,
      _o.Count,
      _o.AcquiredAt);
  }
}

public class ArtifactDataT
{
  public int ArtifactID { get; set; }
  public int Enhance { get; set; }
  public int Count { get; set; }
  public int AcquiredAt { get; set; }

  public ArtifactDataT() {
    this.ArtifactID = 0;
    this.Enhance = 0;
    this.Count = 0;
    this.AcquiredAt = 0;
  }
}


}
