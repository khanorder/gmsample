// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LobbyToDedi_VehicleRacePrepare : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static LobbyToDedi_VehicleRacePrepare GetRootAsLobbyToDedi_VehicleRacePrepare(ByteBuffer _bb) { return GetRootAsLobbyToDedi_VehicleRacePrepare(_bb, new LobbyToDedi_VehicleRacePrepare()); }
  public static LobbyToDedi_VehicleRacePrepare GetRootAsLobbyToDedi_VehicleRacePrepare(ByteBuffer _bb, LobbyToDedi_VehicleRacePrepare obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LobbyToDedi_VehicleRacePrepare __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string RaceUniqueID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRaceUniqueIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetRaceUniqueIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetRaceUniqueIDArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Lobby.LobbyToDedi_VehicleRacePrepare> CreateLobbyToDedi_VehicleRacePrepare(FlatBufferBuilder builder,
      StringOffset RaceUniqueIDOffset = default(StringOffset)) {
    builder.StartTable(1);
    LobbyToDedi_VehicleRacePrepare.AddRaceUniqueID(builder, RaceUniqueIDOffset);
    return LobbyToDedi_VehicleRacePrepare.EndLobbyToDedi_VehicleRacePrepare(builder);
  }

  public static void StartLobbyToDedi_VehicleRacePrepare(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRaceUniqueID(FlatBufferBuilder builder, StringOffset RaceUniqueIDOffset) { builder.AddOffset(0, RaceUniqueIDOffset.Value, 0); }
  public static Offset<Lobby.LobbyToDedi_VehicleRacePrepare> EndLobbyToDedi_VehicleRacePrepare(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.LobbyToDedi_VehicleRacePrepare>(o);
  }
  public LobbyToDedi_VehicleRacePrepareT UnPack() {
    var _o = new LobbyToDedi_VehicleRacePrepareT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LobbyToDedi_VehicleRacePrepareT _o) {
    _o.RaceUniqueID = this.RaceUniqueID;
  }
  public static Offset<Lobby.LobbyToDedi_VehicleRacePrepare> Pack(FlatBufferBuilder builder, LobbyToDedi_VehicleRacePrepareT _o) {
    if (_o == null) return default(Offset<Lobby.LobbyToDedi_VehicleRacePrepare>);
    var _RaceUniqueID = _o.RaceUniqueID == null ? default(StringOffset) : builder.CreateString(_o.RaceUniqueID);
    return CreateLobbyToDedi_VehicleRacePrepare(
      builder,
      _RaceUniqueID);
  }
}

public class LobbyToDedi_VehicleRacePrepareT
{
  public string RaceUniqueID { get; set; }

  public LobbyToDedi_VehicleRacePrepareT() {
    this.RaceUniqueID = null;
  }
}


}
