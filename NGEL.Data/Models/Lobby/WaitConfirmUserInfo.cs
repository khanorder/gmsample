// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WaitConfirmUserInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static WaitConfirmUserInfo GetRootAsWaitConfirmUserInfo(ByteBuffer _bb) { return GetRootAsWaitConfirmUserInfo(_bb, new WaitConfirmUserInfo()); }
  public static WaitConfirmUserInfo GetRootAsWaitConfirmUserInfo(ByteBuffer _bb, WaitConfirmUserInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WaitConfirmUserInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HeroSkinID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Nick { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNickBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNickBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNickArray() { return __p.__vector_as_array<byte>(8); }
  public string LobbyID { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLobbyIDBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetLobbyIDBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetLobbyIDArray() { return __p.__vector_as_array<byte>(10); }
  public string TeamID { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamIDBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTeamIDBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTeamIDArray() { return __p.__vector_as_array<byte>(12); }
  public string OTP { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOTPBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOTPBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOTPArray() { return __p.__vector_as_array<byte>(14); }
  public Lobby.MultiArtifactInfo? ArtifactList(int j) { int o = __p.__offset(16); return o != 0 ? (Lobby.MultiArtifactInfo?)(new Lobby.MultiArtifactInfo()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ArtifactListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Lobby.WaitConfirmUserInfo> CreateWaitConfirmUserInfo(FlatBufferBuilder builder,
      int UID = 0,
      int HeroSkinID = 0,
      StringOffset NickOffset = default(StringOffset),
      StringOffset LobbyIDOffset = default(StringOffset),
      StringOffset TeamIDOffset = default(StringOffset),
      StringOffset OTPOffset = default(StringOffset),
      VectorOffset ArtifactListOffset = default(VectorOffset)) {
    builder.StartTable(7);
    WaitConfirmUserInfo.AddArtifactList(builder, ArtifactListOffset);
    WaitConfirmUserInfo.AddOTP(builder, OTPOffset);
    WaitConfirmUserInfo.AddTeamID(builder, TeamIDOffset);
    WaitConfirmUserInfo.AddLobbyID(builder, LobbyIDOffset);
    WaitConfirmUserInfo.AddNick(builder, NickOffset);
    WaitConfirmUserInfo.AddHeroSkinID(builder, HeroSkinID);
    WaitConfirmUserInfo.AddUID(builder, UID);
    return WaitConfirmUserInfo.EndWaitConfirmUserInfo(builder);
  }

  public static void StartWaitConfirmUserInfo(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddUID(FlatBufferBuilder builder, int UID) { builder.AddInt(0, UID, 0); }
  public static void AddHeroSkinID(FlatBufferBuilder builder, int HeroSkinID) { builder.AddInt(1, HeroSkinID, 0); }
  public static void AddNick(FlatBufferBuilder builder, StringOffset NickOffset) { builder.AddOffset(2, NickOffset.Value, 0); }
  public static void AddLobbyID(FlatBufferBuilder builder, StringOffset LobbyIDOffset) { builder.AddOffset(3, LobbyIDOffset.Value, 0); }
  public static void AddTeamID(FlatBufferBuilder builder, StringOffset TeamIDOffset) { builder.AddOffset(4, TeamIDOffset.Value, 0); }
  public static void AddOTP(FlatBufferBuilder builder, StringOffset OTPOffset) { builder.AddOffset(5, OTPOffset.Value, 0); }
  public static void AddArtifactList(FlatBufferBuilder builder, VectorOffset ArtifactListOffset) { builder.AddOffset(6, ArtifactListOffset.Value, 0); }
  public static void StartArtifactListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<Lobby.WaitConfirmUserInfo> EndWaitConfirmUserInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.WaitConfirmUserInfo>(o);
  }
  public WaitConfirmUserInfoT UnPack() {
    var _o = new WaitConfirmUserInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WaitConfirmUserInfoT _o) {
    _o.UID = this.UID;
    _o.HeroSkinID = this.HeroSkinID;
    _o.Nick = this.Nick;
    _o.LobbyID = this.LobbyID;
    _o.TeamID = this.TeamID;
    _o.OTP = this.OTP;
    _o.ArtifactList = new List<Lobby.MultiArtifactInfoT>();
    for (var _j = 0; _j < this.ArtifactListLength; ++_j) {_o.ArtifactList.Add(this.ArtifactList(_j).HasValue ? this.ArtifactList(_j).Value.UnPack() : null);}
  }
  public static Offset<Lobby.WaitConfirmUserInfo> Pack(FlatBufferBuilder builder, WaitConfirmUserInfoT _o) {
    if (_o == null) return default(Offset<Lobby.WaitConfirmUserInfo>);
    var _Nick = _o.Nick == null ? default(StringOffset) : builder.CreateString(_o.Nick);
    var _LobbyID = _o.LobbyID == null ? default(StringOffset) : builder.CreateString(_o.LobbyID);
    var _TeamID = _o.TeamID == null ? default(StringOffset) : builder.CreateString(_o.TeamID);
    var _OTP = _o.OTP == null ? default(StringOffset) : builder.CreateString(_o.OTP);
    var _ArtifactList = default(VectorOffset);
    if (_o.ArtifactList != null) {
      StartArtifactListVector(builder, _o.ArtifactList.Count);
      for (var _j = _o.ArtifactList.Count - 1; _j >= 0; --_j) { Lobby.MultiArtifactInfo.Pack(builder, _o.ArtifactList[_j]); }
      _ArtifactList = builder.EndVector();
    }
    return CreateWaitConfirmUserInfo(
      builder,
      _o.UID,
      _o.HeroSkinID,
      _Nick,
      _LobbyID,
      _TeamID,
      _OTP,
      _ArtifactList);
  }
}

public class WaitConfirmUserInfoT
{
  public int UID { get; set; }
  public int HeroSkinID { get; set; }
  public string Nick { get; set; }
  public string LobbyID { get; set; }
  public string TeamID { get; set; }
  public string OTP { get; set; }
  public List<Lobby.MultiArtifactInfoT> ArtifactList { get; set; }

  public WaitConfirmUserInfoT() {
    this.UID = 0;
    this.HeroSkinID = 0;
    this.Nick = null;
    this.LobbyID = null;
    this.TeamID = null;
    this.OTP = null;
    this.ArtifactList = null;
  }
}


}
