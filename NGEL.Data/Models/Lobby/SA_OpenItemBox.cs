// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_OpenItemBox : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_OpenItemBox GetRootAsSA_OpenItemBox(ByteBuffer _bb) { return GetRootAsSA_OpenItemBox(_bb, new SA_OpenItemBox()); }
  public static SA_OpenItemBox GetRootAsSA_OpenItemBox(ByteBuffer _bb, SA_OpenItemBox obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_OpenItemBox __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Lobby.EItemBoxType ItemBoxType { get { int o = __p.__offset(4); return o != 0 ? (Lobby.EItemBoxType)__p.bb.Get(o + __p.bb_pos) : Lobby.EItemBoxType.None; } }
  public Lobby.RewardData? RewardInfo { get { int o = __p.__offset(6); return o != 0 ? (Lobby.RewardData?)(new Lobby.RewardData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Lobby.SA_OpenItemBox> CreateSA_OpenItemBox(FlatBufferBuilder builder,
      Lobby.EItemBoxType ItemBoxType = Lobby.EItemBoxType.None,
      Offset<Lobby.RewardData> RewardInfoOffset = default(Offset<Lobby.RewardData>)) {
    builder.StartTable(2);
    SA_OpenItemBox.AddRewardInfo(builder, RewardInfoOffset);
    SA_OpenItemBox.AddItemBoxType(builder, ItemBoxType);
    return SA_OpenItemBox.EndSA_OpenItemBox(builder);
  }

  public static void StartSA_OpenItemBox(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddItemBoxType(FlatBufferBuilder builder, Lobby.EItemBoxType ItemBoxType) { builder.AddByte(0, (byte)ItemBoxType, 0); }
  public static void AddRewardInfo(FlatBufferBuilder builder, Offset<Lobby.RewardData> RewardInfoOffset) { builder.AddOffset(1, RewardInfoOffset.Value, 0); }
  public static Offset<Lobby.SA_OpenItemBox> EndSA_OpenItemBox(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_OpenItemBox>(o);
  }
  public SA_OpenItemBoxT UnPack() {
    var _o = new SA_OpenItemBoxT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_OpenItemBoxT _o) {
    _o.ItemBoxType = this.ItemBoxType;
    _o.RewardInfo = this.RewardInfo.HasValue ? this.RewardInfo.Value.UnPack() : null;
  }
  public static Offset<Lobby.SA_OpenItemBox> Pack(FlatBufferBuilder builder, SA_OpenItemBoxT _o) {
    if (_o == null) return default(Offset<Lobby.SA_OpenItemBox>);
    var _RewardInfo = _o.RewardInfo == null ? default(Offset<Lobby.RewardData>) : Lobby.RewardData.Pack(builder, _o.RewardInfo);
    return CreateSA_OpenItemBox(
      builder,
      _o.ItemBoxType,
      _RewardInfo);
  }
}

public class SA_OpenItemBoxT
{
  public Lobby.EItemBoxType ItemBoxType { get; set; }
  public Lobby.RewardDataT RewardInfo { get; set; }

  public SA_OpenItemBoxT() {
    this.ItemBoxType = Lobby.EItemBoxType.None;
    this.RewardInfo = null;
  }
}


}
