// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SN_MatchingSuccessMatch : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SN_MatchingSuccessMatch GetRootAsSN_MatchingSuccessMatch(ByteBuffer _bb) { return GetRootAsSN_MatchingSuccessMatch(_bb, new SN_MatchingSuccessMatch()); }
  public static SN_MatchingSuccessMatch GetRootAsSN_MatchingSuccessMatch(ByteBuffer _bb, SN_MatchingSuccessMatch obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SN_MatchingSuccessMatch __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MatchingTableID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MatchID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchIDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMatchIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMatchIDArray() { return __p.__vector_as_array<byte>(6); }
  public Lobby.MatchingSuccessInfo? MemberList(int j) { int o = __p.__offset(8); return o != 0 ? (Lobby.MatchingSuccessInfo?)(new Lobby.MatchingSuccessInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MemberListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string DedicatedID { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDedicatedIDBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDedicatedIDBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDedicatedIDArray() { return __p.__vector_as_array<byte>(10); }
  public string ServerUrl { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetServerUrlBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetServerUrlBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetServerUrlArray() { return __p.__vector_as_array<byte>(12); }
  public string OTP { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOTPBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOTPBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOTPArray() { return __p.__vector_as_array<byte>(14); }
  public string TeamID { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamIDBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTeamIDBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTeamIDArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<Lobby.SN_MatchingSuccessMatch> CreateSN_MatchingSuccessMatch(FlatBufferBuilder builder,
      int MatchingTableID = 0,
      StringOffset MatchIDOffset = default(StringOffset),
      VectorOffset MemberListOffset = default(VectorOffset),
      StringOffset DedicatedIDOffset = default(StringOffset),
      StringOffset ServerUrlOffset = default(StringOffset),
      StringOffset OTPOffset = default(StringOffset),
      StringOffset TeamIDOffset = default(StringOffset)) {
    builder.StartTable(7);
    SN_MatchingSuccessMatch.AddTeamID(builder, TeamIDOffset);
    SN_MatchingSuccessMatch.AddOTP(builder, OTPOffset);
    SN_MatchingSuccessMatch.AddServerUrl(builder, ServerUrlOffset);
    SN_MatchingSuccessMatch.AddDedicatedID(builder, DedicatedIDOffset);
    SN_MatchingSuccessMatch.AddMemberList(builder, MemberListOffset);
    SN_MatchingSuccessMatch.AddMatchID(builder, MatchIDOffset);
    SN_MatchingSuccessMatch.AddMatchingTableID(builder, MatchingTableID);
    return SN_MatchingSuccessMatch.EndSN_MatchingSuccessMatch(builder);
  }

  public static void StartSN_MatchingSuccessMatch(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddMatchingTableID(FlatBufferBuilder builder, int MatchingTableID) { builder.AddInt(0, MatchingTableID, 0); }
  public static void AddMatchID(FlatBufferBuilder builder, StringOffset MatchIDOffset) { builder.AddOffset(1, MatchIDOffset.Value, 0); }
  public static void AddMemberList(FlatBufferBuilder builder, VectorOffset MemberListOffset) { builder.AddOffset(2, MemberListOffset.Value, 0); }
  public static VectorOffset CreateMemberListVector(FlatBufferBuilder builder, Offset<Lobby.MatchingSuccessInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMemberListVectorBlock(FlatBufferBuilder builder, Offset<Lobby.MatchingSuccessInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMemberListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Lobby.MatchingSuccessInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMemberListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Lobby.MatchingSuccessInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMemberListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDedicatedID(FlatBufferBuilder builder, StringOffset DedicatedIDOffset) { builder.AddOffset(3, DedicatedIDOffset.Value, 0); }
  public static void AddServerUrl(FlatBufferBuilder builder, StringOffset ServerUrlOffset) { builder.AddOffset(4, ServerUrlOffset.Value, 0); }
  public static void AddOTP(FlatBufferBuilder builder, StringOffset OTPOffset) { builder.AddOffset(5, OTPOffset.Value, 0); }
  public static void AddTeamID(FlatBufferBuilder builder, StringOffset TeamIDOffset) { builder.AddOffset(6, TeamIDOffset.Value, 0); }
  public static Offset<Lobby.SN_MatchingSuccessMatch> EndSN_MatchingSuccessMatch(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SN_MatchingSuccessMatch>(o);
  }
  public SN_MatchingSuccessMatchT UnPack() {
    var _o = new SN_MatchingSuccessMatchT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SN_MatchingSuccessMatchT _o) {
    _o.MatchingTableID = this.MatchingTableID;
    _o.MatchID = this.MatchID;
    _o.MemberList = new List<Lobby.MatchingSuccessInfoT>();
    for (var _j = 0; _j < this.MemberListLength; ++_j) {_o.MemberList.Add(this.MemberList(_j).HasValue ? this.MemberList(_j).Value.UnPack() : null);}
    _o.DedicatedID = this.DedicatedID;
    _o.ServerUrl = this.ServerUrl;
    _o.OTP = this.OTP;
    _o.TeamID = this.TeamID;
  }
  public static Offset<Lobby.SN_MatchingSuccessMatch> Pack(FlatBufferBuilder builder, SN_MatchingSuccessMatchT _o) {
    if (_o == null) return default(Offset<Lobby.SN_MatchingSuccessMatch>);
    var _MatchID = _o.MatchID == null ? default(StringOffset) : builder.CreateString(_o.MatchID);
    var _MemberList = default(VectorOffset);
    if (_o.MemberList != null) {
      var __MemberList = new Offset<Lobby.MatchingSuccessInfo>[_o.MemberList.Count];
      for (var _j = 0; _j < __MemberList.Length; ++_j) { __MemberList[_j] = Lobby.MatchingSuccessInfo.Pack(builder, _o.MemberList[_j]); }
      _MemberList = CreateMemberListVector(builder, __MemberList);
    }
    var _DedicatedID = _o.DedicatedID == null ? default(StringOffset) : builder.CreateString(_o.DedicatedID);
    var _ServerUrl = _o.ServerUrl == null ? default(StringOffset) : builder.CreateString(_o.ServerUrl);
    var _OTP = _o.OTP == null ? default(StringOffset) : builder.CreateString(_o.OTP);
    var _TeamID = _o.TeamID == null ? default(StringOffset) : builder.CreateString(_o.TeamID);
    return CreateSN_MatchingSuccessMatch(
      builder,
      _o.MatchingTableID,
      _MatchID,
      _MemberList,
      _DedicatedID,
      _ServerUrl,
      _OTP,
      _TeamID);
  }
}

public class SN_MatchingSuccessMatchT
{
  public int MatchingTableID { get; set; }
  public string MatchID { get; set; }
  public List<Lobby.MatchingSuccessInfoT> MemberList { get; set; }
  public string DedicatedID { get; set; }
  public string ServerUrl { get; set; }
  public string OTP { get; set; }
  public string TeamID { get; set; }

  public SN_MatchingSuccessMatchT() {
    this.MatchingTableID = 0;
    this.MatchID = null;
    this.MemberList = null;
    this.DedicatedID = null;
    this.ServerUrl = null;
    this.OTP = null;
    this.TeamID = null;
  }
}


}
