// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Lobby
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SA_CheatSendSystemMail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_20(); }
  public static SA_CheatSendSystemMail GetRootAsSA_CheatSendSystemMail(ByteBuffer _bb) { return GetRootAsSA_CheatSendSystemMail(_bb, new SA_CheatSendSystemMail()); }
  public static SA_CheatSendSystemMail GetRootAsSA_CheatSendSystemMail(ByteBuffer _bb, SA_CheatSendSystemMail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SA_CheatSendSystemMail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TargetUID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long MailID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Lobby.SA_CheatSendSystemMail> CreateSA_CheatSendSystemMail(FlatBufferBuilder builder,
      int TargetUID = 0,
      long MailID = 0) {
    builder.StartTable(2);
    SA_CheatSendSystemMail.AddMailID(builder, MailID);
    SA_CheatSendSystemMail.AddTargetUID(builder, TargetUID);
    return SA_CheatSendSystemMail.EndSA_CheatSendSystemMail(builder);
  }

  public static void StartSA_CheatSendSystemMail(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTargetUID(FlatBufferBuilder builder, int TargetUID) { builder.AddInt(0, TargetUID, 0); }
  public static void AddMailID(FlatBufferBuilder builder, long MailID) { builder.AddLong(1, MailID, 0); }
  public static Offset<Lobby.SA_CheatSendSystemMail> EndSA_CheatSendSystemMail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Lobby.SA_CheatSendSystemMail>(o);
  }
  public SA_CheatSendSystemMailT UnPack() {
    var _o = new SA_CheatSendSystemMailT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SA_CheatSendSystemMailT _o) {
    _o.TargetUID = this.TargetUID;
    _o.MailID = this.MailID;
  }
  public static Offset<Lobby.SA_CheatSendSystemMail> Pack(FlatBufferBuilder builder, SA_CheatSendSystemMailT _o) {
    if (_o == null) return default(Offset<Lobby.SA_CheatSendSystemMail>);
    return CreateSA_CheatSendSystemMail(
      builder,
      _o.TargetUID,
      _o.MailID);
  }
}

public class SA_CheatSendSystemMailT
{
  public int TargetUID { get; set; }
  public long MailID { get; set; }

  public SA_CheatSendSystemMailT() {
    this.TargetUID = 0;
    this.MailID = 0;
  }
}


}
